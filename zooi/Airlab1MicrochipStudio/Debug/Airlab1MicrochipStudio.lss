
Airlab1MicrochipStudio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000516e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00802000  0000516e  00005202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000019bb  008020e8  008020e8  000052ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000052ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000531c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  0000535c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007444  00000000  00000000  000055b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032a0  00000000  00000000  0000c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000425b  00000000  00000000  0000fc98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000714  00000000  00000000  00013ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002fb7  00000000  00000000  00014608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024c4  00000000  00000000  000175bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00019a83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9c 02 	jmp	0x538	; 0x538 <__ctors_end>
       4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
       8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
       c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      10:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      14:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      18:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      1c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      20:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      24:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      28:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      2c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      30:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      34:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      38:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__vector_14>
      3c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      40:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      44:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      48:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      4c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      50:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      54:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      58:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      5c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      60:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      64:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      68:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      6c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      70:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      74:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      78:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      7c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      80:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      84:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      88:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      8c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      90:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      94:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      98:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      9c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      a0:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      a4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      a8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      ac:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      b0:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      b4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      b8:	0c 94 cc 27 	jmp	0x4f98	; 0x4f98 <__vector_46>
      bc:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      c0:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      c4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      c8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      cc:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      d0:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      d4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      d8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      dc:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      e0:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      e4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      e8:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__vector_58>
      ec:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      f0:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <__vector_60>
      f4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      f8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
      fc:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     100:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     104:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     108:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     10c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     110:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     114:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     118:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     11c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     120:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     124:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     128:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     12c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     130:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     134:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     138:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     13c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     140:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     144:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     148:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     14c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     150:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     154:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     158:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     15c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     160:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     164:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     168:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     16c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     170:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     174:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     178:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     17c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     180:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     184:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     188:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     18c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     190:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     194:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     198:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     19c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1a0:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1a4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1a8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1ac:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1b0:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1b4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1b8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1bc:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1c0:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1c4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1c8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1cc:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1d0:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1d4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1d8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1dc:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1e0:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1e4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1e8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1ec:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1f0:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1f4:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1f8:	0c 94 c2 02 	jmp	0x584	; 0x584 <__bad_interrupt>
     1fc:	ac 0d       	add	r26, r12
     1fe:	b4 10       	cpse	r11, r4
     200:	f9 11       	cpse	r31, r9
     202:	55 14       	cp	r5, r5
     204:	8a 1f       	adc	r24, r26
     206:	8a 1f       	adc	r24, r26
     208:	74 16       	cp	r7, r20
     20a:	88 16       	cp	r8, r24
     20c:	8a 1f       	adc	r24, r26
     20e:	8a 1f       	adc	r24, r26
     210:	8a 1f       	adc	r24, r26
     212:	8a 1f       	adc	r24, r26
     214:	8a 1f       	adc	r24, r26
     216:	8a 1f       	adc	r24, r26
     218:	8a 1f       	adc	r24, r26
     21a:	8a 1f       	adc	r24, r26
     21c:	8a 1f       	adc	r24, r26
     21e:	8a 1f       	adc	r24, r26
     220:	8a 1f       	adc	r24, r26
     222:	8a 1f       	adc	r24, r26
     224:	8a 1f       	adc	r24, r26
     226:	8a 1f       	adc	r24, r26
     228:	8a 1f       	adc	r24, r26
     22a:	8a 1f       	adc	r24, r26
     22c:	8a 1f       	adc	r24, r26
     22e:	8a 1f       	adc	r24, r26
     230:	8a 1f       	adc	r24, r26
     232:	8a 1f       	adc	r24, r26
     234:	8a 1f       	adc	r24, r26
     236:	8a 1f       	adc	r24, r26
     238:	8a 1f       	adc	r24, r26
     23a:	8a 1f       	adc	r24, r26
     23c:	8a 1f       	adc	r24, r26
     23e:	8a 1f       	adc	r24, r26
     240:	8a 1f       	adc	r24, r26
     242:	8a 1f       	adc	r24, r26
     244:	8a 1f       	adc	r24, r26
     246:	8a 1f       	adc	r24, r26
     248:	8a 1f       	adc	r24, r26
     24a:	8a 1f       	adc	r24, r26
     24c:	8a 1f       	adc	r24, r26
     24e:	8a 1f       	adc	r24, r26
     250:	8a 1f       	adc	r24, r26
     252:	8a 1f       	adc	r24, r26
     254:	8a 1f       	adc	r24, r26
     256:	8a 1f       	adc	r24, r26
     258:	8a 1f       	adc	r24, r26
     25a:	8a 1f       	adc	r24, r26
     25c:	8a 1f       	adc	r24, r26
     25e:	8a 1f       	adc	r24, r26
     260:	8a 1f       	adc	r24, r26
     262:	8a 1f       	adc	r24, r26
     264:	8a 1f       	adc	r24, r26
     266:	8a 1f       	adc	r24, r26
     268:	8a 1f       	adc	r24, r26
     26a:	8a 1f       	adc	r24, r26
     26c:	8a 1f       	adc	r24, r26
     26e:	8a 1f       	adc	r24, r26
     270:	8a 1f       	adc	r24, r26
     272:	8a 1f       	adc	r24, r26
     274:	8a 1f       	adc	r24, r26
     276:	8a 1f       	adc	r24, r26
     278:	8a 1f       	adc	r24, r26
     27a:	8a 1f       	adc	r24, r26
     27c:	8a 1f       	adc	r24, r26
     27e:	8a 1f       	adc	r24, r26
     280:	8a 1f       	adc	r24, r26
     282:	8a 1f       	adc	r24, r26
     284:	8a 1f       	adc	r24, r26
     286:	8a 1f       	adc	r24, r26
     288:	8a 1f       	adc	r24, r26
     28a:	8a 1f       	adc	r24, r26
     28c:	8a 1f       	adc	r24, r26
     28e:	8a 1f       	adc	r24, r26
     290:	8a 1f       	adc	r24, r26
     292:	8a 1f       	adc	r24, r26
     294:	8a 1f       	adc	r24, r26
     296:	8a 1f       	adc	r24, r26
     298:	8a 1f       	adc	r24, r26
     29a:	8a 1f       	adc	r24, r26
     29c:	8a 1f       	adc	r24, r26
     29e:	8a 1f       	adc	r24, r26
     2a0:	8a 1f       	adc	r24, r26
     2a2:	8a 1f       	adc	r24, r26
     2a4:	8a 1f       	adc	r24, r26
     2a6:	8a 1f       	adc	r24, r26
     2a8:	8a 1f       	adc	r24, r26
     2aa:	8a 1f       	adc	r24, r26
     2ac:	8a 1f       	adc	r24, r26
     2ae:	8a 1f       	adc	r24, r26
     2b0:	8a 1f       	adc	r24, r26
     2b2:	8a 1f       	adc	r24, r26
     2b4:	8a 1f       	adc	r24, r26
     2b6:	8a 1f       	adc	r24, r26
     2b8:	8a 1f       	adc	r24, r26
     2ba:	8a 1f       	adc	r24, r26
     2bc:	8a 1f       	adc	r24, r26
     2be:	8a 1f       	adc	r24, r26
     2c0:	8a 1f       	adc	r24, r26
     2c2:	8a 1f       	adc	r24, r26
     2c4:	8a 1f       	adc	r24, r26
     2c6:	8a 1f       	adc	r24, r26
     2c8:	8a 1f       	adc	r24, r26
     2ca:	8a 1f       	adc	r24, r26
     2cc:	8a 1f       	adc	r24, r26
     2ce:	8a 1f       	adc	r24, r26
     2d0:	8a 1f       	adc	r24, r26
     2d2:	8a 1f       	adc	r24, r26
     2d4:	8a 1f       	adc	r24, r26
     2d6:	8a 1f       	adc	r24, r26
     2d8:	8a 1f       	adc	r24, r26
     2da:	8a 1f       	adc	r24, r26
     2dc:	8a 1f       	adc	r24, r26
     2de:	8a 1f       	adc	r24, r26
     2e0:	8a 1f       	adc	r24, r26
     2e2:	8a 1f       	adc	r24, r26
     2e4:	8a 1f       	adc	r24, r26
     2e6:	8a 1f       	adc	r24, r26
     2e8:	8a 1f       	adc	r24, r26
     2ea:	8a 1f       	adc	r24, r26
     2ec:	8a 1f       	adc	r24, r26
     2ee:	8a 1f       	adc	r24, r26
     2f0:	8a 1f       	adc	r24, r26
     2f2:	8a 1f       	adc	r24, r26
     2f4:	8a 1f       	adc	r24, r26
     2f6:	8a 1f       	adc	r24, r26
     2f8:	8a 1f       	adc	r24, r26
     2fa:	8a 1f       	adc	r24, r26
     2fc:	0d 17       	cp	r16, r29
     2fe:	2f 18       	sub	r2, r15
     300:	1c 1b       	sub	r17, r28
     302:	28 1c       	adc	r2, r8
     304:	5c 1b       	sub	r21, r28
     306:	f0 1c       	adc	r15, r0
     308:	69 1d       	adc	r22, r9
     30a:	ad 1d       	adc	r26, r13
     30c:	f2 1e       	adc	r15, r18
     30e:	4f 12       	cpse	r4, r31
     310:	5c 12       	cpse	r5, r28
     312:	5c 12       	cpse	r5, r28
     314:	4f 12       	cpse	r4, r31
     316:	4f 12       	cpse	r4, r31
     318:	5c 12       	cpse	r5, r28
     31a:	5c 12       	cpse	r5, r28
     31c:	4f 12       	cpse	r4, r31
     31e:	6a 12       	cpse	r6, r26
     320:	6a 12       	cpse	r6, r26
     322:	4f 12       	cpse	r4, r31
     324:	4f 12       	cpse	r4, r31
     326:	4f 12       	cpse	r4, r31
     328:	4f 12       	cpse	r4, r31
     32a:	6a 12       	cpse	r6, r26
     32c:	6a 12       	cpse	r6, r26
     32e:	4f 12       	cpse	r4, r31
     330:	6a 12       	cpse	r6, r26
     332:	6a 12       	cpse	r6, r26
     334:	4f 12       	cpse	r4, r31
     336:	6a 12       	cpse	r6, r26
     338:	4f 12       	cpse	r4, r31
     33a:	4f 12       	cpse	r4, r31
     33c:	4f 12       	cpse	r4, r31
     33e:	4f 12       	cpse	r4, r31
     340:	4f 12       	cpse	r4, r31
     342:	77 12       	cpse	r7, r23
     344:	77 12       	cpse	r7, r23
     346:	77 12       	cpse	r7, r23
     348:	77 12       	cpse	r7, r23
     34a:	77 12       	cpse	r7, r23
     34c:	77 12       	cpse	r7, r23
     34e:	77 12       	cpse	r7, r23
     350:	a1 12       	cpse	r10, r17
     352:	a1 12       	cpse	r10, r17
     354:	a1 12       	cpse	r10, r17
     356:	83 12       	cpse	r8, r19
     358:	8b 12       	cpse	r8, r27
     35a:	9c 12       	cpse	r9, r28
     35c:	9f 12       	cpse	r9, r31
     35e:	9f 12       	cpse	r9, r31
     360:	9f 12       	cpse	r9, r31
     362:	9f 12       	cpse	r9, r31
     364:	9f 12       	cpse	r9, r31
     366:	9f 12       	cpse	r9, r31
     368:	a1 12       	cpse	r10, r17
     36a:	86 12       	cpse	r8, r22
     36c:	86 12       	cpse	r8, r22
     36e:	77 12       	cpse	r7, r23
     370:	77 12       	cpse	r7, r23
     372:	77 12       	cpse	r7, r23
     374:	77 12       	cpse	r7, r23
     376:	77 12       	cpse	r7, r23
     378:	77 12       	cpse	r7, r23
     37a:	77 12       	cpse	r7, r23
     37c:	a1 12       	cpse	r10, r17
     37e:	a1 12       	cpse	r10, r17
     380:	a1 12       	cpse	r10, r17
     382:	83 12       	cpse	r8, r19
     384:	8b 12       	cpse	r8, r27
     386:	9c 12       	cpse	r9, r28
     388:	9f 12       	cpse	r9, r31
     38a:	9f 12       	cpse	r9, r31
     38c:	9f 12       	cpse	r9, r31
     38e:	9f 12       	cpse	r9, r31
     390:	9f 12       	cpse	r9, r31
     392:	9f 12       	cpse	r9, r31
     394:	a1 12       	cpse	r10, r17
     396:	86 12       	cpse	r8, r22
     398:	86 12       	cpse	r8, r22
     39a:	77 12       	cpse	r7, r23
     39c:	77 12       	cpse	r7, r23
     39e:	77 12       	cpse	r7, r23
     3a0:	77 12       	cpse	r7, r23
     3a2:	77 12       	cpse	r7, r23
     3a4:	77 12       	cpse	r7, r23
     3a6:	77 12       	cpse	r7, r23
     3a8:	a1 12       	cpse	r10, r17
     3aa:	a1 12       	cpse	r10, r17
     3ac:	a1 12       	cpse	r10, r17
     3ae:	83 12       	cpse	r8, r19
     3b0:	99 12       	cpse	r9, r25
     3b2:	9c 12       	cpse	r9, r28
     3b4:	9f 12       	cpse	r9, r31
     3b6:	9f 12       	cpse	r9, r31
     3b8:	9f 12       	cpse	r9, r31
     3ba:	9f 12       	cpse	r9, r31
     3bc:	9f 12       	cpse	r9, r31
     3be:	9f 12       	cpse	r9, r31
     3c0:	a1 12       	cpse	r10, r17
     3c2:	86 12       	cpse	r8, r22
     3c4:	86 12       	cpse	r8, r22
     3c6:	d6 24       	eor	r13, r6
     3c8:	ed 24       	eor	r14, r13
     3ca:	a4 26       	eor	r10, r20
     3cc:	a4 26       	eor	r10, r20
     3ce:	a4 26       	eor	r10, r20
     3d0:	a4 26       	eor	r10, r20
     3d2:	a4 26       	eor	r10, r20
     3d4:	a4 26       	eor	r10, r20
     3d6:	a4 26       	eor	r10, r20
     3d8:	a4 26       	eor	r10, r20
     3da:	a4 26       	eor	r10, r20
     3dc:	a4 26       	eor	r10, r20
     3de:	a4 26       	eor	r10, r20
     3e0:	a4 26       	eor	r10, r20
     3e2:	a4 26       	eor	r10, r20
     3e4:	a4 26       	eor	r10, r20
     3e6:	04 25       	eor	r16, r4
     3e8:	08 25       	eor	r16, r8
     3ea:	0b 25       	eor	r16, r11
     3ec:	12 25       	eor	r17, r2
     3ee:	2a 25       	eor	r18, r10
     3f0:	a4 26       	eor	r10, r20
     3f2:	c6 25       	eor	r28, r6
     3f4:	a4 26       	eor	r10, r20
     3f6:	a4 26       	eor	r10, r20
     3f8:	a4 26       	eor	r10, r20
     3fa:	a4 26       	eor	r10, r20
     3fc:	a4 26       	eor	r10, r20
     3fe:	a4 26       	eor	r10, r20
     400:	a4 26       	eor	r10, r20
     402:	a4 26       	eor	r10, r20
     404:	a4 26       	eor	r10, r20
     406:	a4 26       	eor	r10, r20
     408:	a4 26       	eor	r10, r20
     40a:	a4 26       	eor	r10, r20
     40c:	a4 26       	eor	r10, r20
     40e:	a4 26       	eor	r10, r20
     410:	a4 26       	eor	r10, r20
     412:	a4 26       	eor	r10, r20
     414:	a4 26       	eor	r10, r20
     416:	a4 26       	eor	r10, r20
     418:	a4 26       	eor	r10, r20
     41a:	a4 26       	eor	r10, r20
     41c:	a4 26       	eor	r10, r20
     41e:	a4 26       	eor	r10, r20
     420:	a4 26       	eor	r10, r20
     422:	a4 26       	eor	r10, r20
     424:	a4 26       	eor	r10, r20
     426:	a4 26       	eor	r10, r20
     428:	a4 26       	eor	r10, r20
     42a:	a4 26       	eor	r10, r20
     42c:	5f 25       	eor	r21, r15
     42e:	83 25       	eor	r24, r3
     430:	a3 25       	eor	r26, r3
     432:	a4 26       	eor	r10, r20
     434:	a4 26       	eor	r10, r20
     436:	a4 26       	eor	r10, r20
     438:	a4 26       	eor	r10, r20
     43a:	3c 25       	eor	r19, r12
     43c:	a4 26       	eor	r10, r20
     43e:	a4 26       	eor	r10, r20
     440:	a4 26       	eor	r10, r20
     442:	a4 26       	eor	r10, r20
     444:	a4 26       	eor	r10, r20
     446:	a4 26       	eor	r10, r20
     448:	a4 26       	eor	r10, r20
     44a:	a4 26       	eor	r10, r20
     44c:	a4 26       	eor	r10, r20
     44e:	a4 26       	eor	r10, r20
     450:	a4 26       	eor	r10, r20
     452:	a4 26       	eor	r10, r20
     454:	a4 26       	eor	r10, r20
     456:	a4 26       	eor	r10, r20
     458:	a4 26       	eor	r10, r20
     45a:	a4 26       	eor	r10, r20
     45c:	a4 26       	eor	r10, r20
     45e:	a4 26       	eor	r10, r20
     460:	a4 26       	eor	r10, r20
     462:	a4 26       	eor	r10, r20
     464:	a4 26       	eor	r10, r20
     466:	a4 26       	eor	r10, r20
     468:	a4 26       	eor	r10, r20
     46a:	a4 26       	eor	r10, r20
     46c:	a4 26       	eor	r10, r20
     46e:	a4 26       	eor	r10, r20
     470:	a4 26       	eor	r10, r20
     472:	a4 26       	eor	r10, r20
     474:	a4 26       	eor	r10, r20
     476:	a4 26       	eor	r10, r20
     478:	a4 26       	eor	r10, r20
     47a:	a4 26       	eor	r10, r20
     47c:	a4 26       	eor	r10, r20
     47e:	a4 26       	eor	r10, r20
     480:	a4 26       	eor	r10, r20
     482:	a4 26       	eor	r10, r20
     484:	a4 26       	eor	r10, r20
     486:	39 26       	eor	r3, r25
     488:	52 26       	eor	r5, r18
     48a:	85 26       	eor	r8, r21

0000048c <__trampolines_start>:
     48c:	0c 94 39 26 	jmp	0x4c72	; 0x4c72 <DoSerial+0x31a>
     490:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <__DATA_REGION_LENGTH__+0x1de4>
     494:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__DATA_REGION_LENGTH__+0x8aa>
     498:	0c 94 d6 24 	jmp	0x49ac	; 0x49ac <DoSerial+0x54>
     49c:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <__DATA_REGION_LENGTH__+0x4d4>
     4a0:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__DATA_REGION_LENGTH__+0x1ad2>
     4a4:	0c 94 08 25 	jmp	0x4a10	; 0x4a10 <DoSerial+0xb8>
     4a8:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__DATA_REGION_LENGTH__+0x49e>
     4ac:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <__DATA_REGION_LENGTH__+0x168>
     4b0:	0c 94 a3 25 	jmp	0x4b46	; 0x4b46 <DoSerial+0x1ee>
     4b4:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <DoSerial+0x3f0>
     4b8:	0c 94 52 26 	jmp	0x4ca4	; 0x4ca4 <DoSerial+0x34c>
     4bc:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__DATA_REGION_LENGTH__+0x16b8>
     4c0:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__DATA_REGION_LENGTH__+0x105e>
     4c4:	0c 94 2a 25 	jmp	0x4a54	; 0x4a54 <DoSerial+0xfc>
     4c8:	0c 94 86 12 	jmp	0x250c	; 0x250c <__DATA_REGION_LENGTH__+0x50c>
     4cc:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <DoSerial+0xcc>
     4d0:	0c 94 ed 24 	jmp	0x49da	; 0x49da <DoSerial+0x82>
     4d4:	0c 94 88 16 	jmp	0x2d10	; 0x2d10 <__DATA_REGION_LENGTH__+0xd10>
     4d8:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__DATA_REGION_LENGTH__+0x4ee>
     4dc:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <DoSerial+0x1ae>
     4e0:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__DATA_REGION_LENGTH__+0x506>
     4e4:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__DATA_REGION_LENGTH__+0x1850>
     4e8:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__DATA_REGION_LENGTH__+0x4b8>
     4ec:	0c 94 1c 1b 	jmp	0x3638	; 0x3638 <__DATA_REGION_LENGTH__+0x1638>
     4f0:	0c 94 85 26 	jmp	0x4d0a	; 0x4d0a <DoSerial+0x3b2>
     4f4:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
     4f8:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__DATA_REGION_LENGTH__+0x19e0>
     4fc:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__DATA_REGION_LENGTH__+0xce8>
     500:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <DoEvent+0x56>
     504:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__DATA_REGION_LENGTH__+0x516>
     508:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__DATA_REGION_LENGTH__+0xe1a>
     50c:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__DATA_REGION_LENGTH__+0x1b5a>
     510:	0c 94 5f 25 	jmp	0x4abe	; 0x4abe <DoSerial+0x166>
     514:	0c 94 04 25 	jmp	0x4a08	; 0x4a08 <DoSerial+0xb0>
     518:	0c 94 3c 25 	jmp	0x4a78	; 0x4a78 <DoSerial+0x120>
     51c:	0c 94 c6 25 	jmp	0x4b8c	; 0x4b8c <DoSerial+0x234>
     520:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__DATA_REGION_LENGTH__+0x53e>
     524:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__DATA_REGION_LENGTH__+0x3f2>
     528:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__DATA_REGION_LENGTH__+0x532>
     52c:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <__DATA_REGION_LENGTH__+0x542>
     530:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__DATA_REGION_LENGTH__+0x538>
     534:	0c 94 0b 25 	jmp	0x4a16	; 0x4a16 <DoSerial+0xbe>

00000538 <__ctors_end>:
     538:	11 24       	eor	r1, r1
     53a:	1f be       	out	0x3f, r1	; 63
     53c:	cf ef       	ldi	r28, 0xFF	; 255
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	df e3       	ldi	r29, 0x3F	; 63
     542:	de bf       	out	0x3e, r29	; 62
     544:	00 e0       	ldi	r16, 0x00	; 0
     546:	0c bf       	out	0x3c, r16	; 60
     548:	18 be       	out	0x38, r1	; 56
     54a:	19 be       	out	0x39, r1	; 57
     54c:	1a be       	out	0x3a, r1	; 58
     54e:	1b be       	out	0x3b, r1	; 59

00000550 <__do_copy_data>:
     550:	10 e2       	ldi	r17, 0x20	; 32
     552:	a0 e0       	ldi	r26, 0x00	; 0
     554:	b0 e2       	ldi	r27, 0x20	; 32
     556:	ee e6       	ldi	r30, 0x6E	; 110
     558:	f1 e5       	ldi	r31, 0x51	; 81
     55a:	00 e0       	ldi	r16, 0x00	; 0
     55c:	0b bf       	out	0x3b, r16	; 59
     55e:	02 c0       	rjmp	.+4      	; 0x564 <__do_copy_data+0x14>
     560:	07 90       	elpm	r0, Z+
     562:	0d 92       	st	X+, r0
     564:	a8 3e       	cpi	r26, 0xE8	; 232
     566:	b1 07       	cpc	r27, r17
     568:	d9 f7       	brne	.-10     	; 0x560 <__do_copy_data+0x10>
     56a:	1b be       	out	0x3b, r1	; 59

0000056c <__do_clear_bss>:
     56c:	2a e3       	ldi	r18, 0x3A	; 58
     56e:	a8 ee       	ldi	r26, 0xE8	; 232
     570:	b0 e2       	ldi	r27, 0x20	; 32
     572:	01 c0       	rjmp	.+2      	; 0x576 <.do_clear_bss_start>

00000574 <.do_clear_bss_loop>:
     574:	1d 92       	st	X+, r1

00000576 <.do_clear_bss_start>:
     576:	a3 3a       	cpi	r26, 0xA3	; 163
     578:	b2 07       	cpc	r27, r18
     57a:	e1 f7       	brne	.-8      	; 0x574 <.do_clear_bss_loop>
     57c:	0e 94 20 0b 	call	0x1640	; 0x1640 <main>
     580:	0c 94 b5 28 	jmp	0x516a	; 0x516a <_exit>

00000584 <__bad_interrupt>:
     584:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000588 <TimerControl>:
void TimerControl(unsigned char Module)
{
	unsigned char SetTimerOn = 0;
	unsigned char cntModule;

	if (ModuleData[Module][MIC_RING]&0x80)
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	fc 01       	movw	r30, r24
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	ee 0f       	add	r30, r30
     592:	ff 1f       	adc	r31, r31
     594:	ee 0f       	add	r30, r30
     596:	ff 1f       	adc	r31, r31
     598:	e5 5f       	subi	r30, 0xF5	; 245
     59a:	f4 4d       	sbci	r31, 0xD4	; 212
     59c:	27 81       	ldd	r18, Z+7	; 0x07
     59e:	22 23       	and	r18, r18
     5a0:	74 f4       	brge	.+28     	; 0x5be <TimerControl+0x36>
	{
		if (ConsoleModuleSettings[Module][TIMERMIC])
     5a2:	2d e1       	ldi	r18, 0x1D	; 29
     5a4:	28 9f       	mul	r18, r24
     5a6:	f0 01       	movw	r30, r0
     5a8:	29 9f       	mul	r18, r25
     5aa:	f0 0d       	add	r31, r0
     5ac:	11 24       	eor	r1, r1
     5ae:	e5 5e       	subi	r30, 0xE5	; 229
     5b0:	f7 4c       	sbci	r31, 0xC7	; 199
		SetTimerOn = 1;
     5b2:	21 e0       	ldi	r18, 0x01	; 1
     5b4:	32 81       	ldd	r19, Z+2	; 0x02
     5b6:	31 11       	cpse	r19, r1
     5b8:	29 c0       	rjmp	.+82     	; 0x60c <TimerControl+0x84>
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	27 c0       	rjmp	.+78     	; 0x60c <TimerControl+0x84>
	}
	else if (!(ModuleData[Module][LINEB]&0x80))
     5be:	fc 01       	movw	r30, r24
     5c0:	ee 0f       	add	r30, r30
     5c2:	ff 1f       	adc	r31, r31
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	ee 0f       	add	r30, r30
     5ca:	ff 1f       	adc	r31, r31
     5cc:	e5 5f       	subi	r30, 0xF5	; 245
     5ce:	f4 4d       	sbci	r31, 0xD4	; 212
     5d0:	26 81       	ldd	r18, Z+6	; 0x06
     5d2:	22 23       	and	r18, r18
     5d4:	74 f0       	brlt	.+28     	; 0x5f2 <TimerControl+0x6a>
	{
		if (ConsoleModuleSettings[Module][TIMERLINEA])
     5d6:	2d e1       	ldi	r18, 0x1D	; 29
     5d8:	28 9f       	mul	r18, r24
     5da:	f0 01       	movw	r30, r0
     5dc:	29 9f       	mul	r18, r25
     5de:	f0 0d       	add	r31, r0
     5e0:	11 24       	eor	r1, r1
     5e2:	e5 5e       	subi	r30, 0xE5	; 229
     5e4:	f7 4c       	sbci	r31, 0xC7	; 199
	unsigned char cntModule;

	if (ModuleData[Module][MIC_RING]&0x80)
	{
		if (ConsoleModuleSettings[Module][TIMERMIC])
		SetTimerOn = 1;
     5e6:	21 e0       	ldi	r18, 0x01	; 1
     5e8:	30 81       	ld	r19, Z
     5ea:	31 11       	cpse	r19, r1
     5ec:	0f c0       	rjmp	.+30     	; 0x60c <TimerControl+0x84>
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	0d c0       	rjmp	.+26     	; 0x60c <TimerControl+0x84>
		if (ConsoleModuleSettings[Module][TIMERLINEA])
		SetTimerOn = 1;
	}
	else if (ModuleData[Module][LINEB]&0x80)
	{
		if (ConsoleModuleSettings[Module][TIMERLINEB])
     5f2:	2d e1       	ldi	r18, 0x1D	; 29
     5f4:	28 9f       	mul	r18, r24
     5f6:	f0 01       	movw	r30, r0
     5f8:	29 9f       	mul	r18, r25
     5fa:	f0 0d       	add	r31, r0
     5fc:	11 24       	eor	r1, r1
     5fe:	e5 5e       	subi	r30, 0xE5	; 229
     600:	f7 4c       	sbci	r31, 0xC7	; 199
	unsigned char cntModule;

	if (ModuleData[Module][MIC_RING]&0x80)
	{
		if (ConsoleModuleSettings[Module][TIMERMIC])
		SetTimerOn = 1;
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	31 81       	ldd	r19, Z+1	; 0x01
     606:	31 11       	cpse	r19, r1
     608:	01 c0       	rjmp	.+2      	; 0x60c <TimerControl+0x84>
     60a:	20 e0       	ldi	r18, 0x00	; 0
	{
		if (ConsoleModuleSettings[Module][TIMERLINEB])
		SetTimerOn = 1;
	}

	if (SetTimerOn)
     60c:	22 23       	and	r18, r18
     60e:	19 f1       	breq	.+70     	; 0x656 <TimerControl+0xce>
	{
		if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
     610:	fc 01       	movw	r30, r24
     612:	ee 0f       	add	r30, r30
     614:	ff 1f       	adc	r31, r31
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	ee 0f       	add	r30, r30
     61c:	ff 1f       	adc	r31, r31
     61e:	e5 5f       	subi	r30, 0xF5	; 245
     620:	f4 4d       	sbci	r31, 0xD4	; 212
     622:	21 81       	ldd	r18, Z+1	; 0x01
     624:	22 23       	and	r18, r18
     626:	94 f4       	brge	.+36     	; 0x64c <TimerControl+0xc4>
     628:	fc 01       	movw	r30, r24
     62a:	e0 56       	subi	r30, 0x60	; 96
     62c:	fd 4d       	sbci	r31, 0xDD	; 221
     62e:	20 81       	ld	r18, Z
     630:	25 ff       	sbrs	r18, 5
     632:	0c c0       	rjmp	.+24     	; 0x64c <TimerControl+0xc4>
		{// !JB
			TimeAndDate.Hours = 0;
     634:	e6 e1       	ldi	r30, 0x16	; 22
     636:	fa e3       	ldi	r31, 0x3A	; 58
     638:	13 82       	std	Z+3, r1	; 0x03
			TimeAndDate.Minutes = 0;
     63a:	12 82       	std	Z+2, r1	; 0x02
			TimeAndDate.Seconds = 0;
     63c:	11 82       	std	Z+1, r1	; 0x01
			TimeAndDate.Frames = 0;
     63e:	10 82       	st	Z, r1
			TimerActive[Module] = 1;
     640:	fc 01       	movw	r30, r24
     642:	ea 5c       	subi	r30, 0xCA	; 202
     644:	fd 4c       	sbci	r31, 0xCD	; 205
     646:	21 e0       	ldi	r18, 0x01	; 1
     648:	20 83       	st	Z, r18
     64a:	09 c0       	rjmp	.+18     	; 0x65e <TimerControl+0xd6>
		}
		else
		{
			TimerActive[Module] = 0;
     64c:	fc 01       	movw	r30, r24
     64e:	ea 5c       	subi	r30, 0xCA	; 202
     650:	fd 4c       	sbci	r31, 0xCD	; 205
     652:	10 82       	st	Z, r1
     654:	04 c0       	rjmp	.+8      	; 0x65e <TimerControl+0xd6>
		}
	}
	else
	{
		TimerActive[Module] = 0;
     656:	fc 01       	movw	r30, r24
     658:	ea 5c       	subi	r30, 0xCA	; 202
     65a:	fd 4c       	sbci	r31, 0xCD	; 205
     65c:	10 82       	st	Z, r1
     65e:	e6 e3       	ldi	r30, 0x36	; 54
     660:	f2 e3       	ldi	r31, 0x32	; 50
     662:	26 e4       	ldi	r18, 0x46	; 70
     664:	32 e3       	ldi	r19, 0x32	; 50
//unsigned char I2CItem;
//unsigned char I2CModule;


void TimerControl(unsigned char Module)
{
     666:	90 e0       	ldi	r25, 0x00	; 0
	}

	GlobalTimerActive = 0;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		if (TimerActive[cntModule])
     668:	81 91       	ld	r24, Z+
     66a:	81 11       	cpse	r24, r1
		GlobalTimerActive = 1;
     66c:	91 e0       	ldi	r25, 0x01	; 1
	{
		TimerActive[Module] = 0;
	}

	GlobalTimerActive = 0;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     66e:	e2 17       	cp	r30, r18
     670:	f3 07       	cpc	r31, r19
     672:	d1 f7       	brne	.-12     	; 0x668 <TimerControl+0xe0>
     674:	90 93 1b 3a 	sts	0x3A1B, r25	; 0x803a1b <GlobalTimerActive>
     678:	08 95       	ret

0000067a <ShowFunction>:
	}
}


void ShowFunction(unsigned char Function)
{
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	e4 e0       	ldi	r30, 0x04	; 4
     680:	fa e3       	ldi	r31, 0x3A	; 58
     682:	a8 2f       	mov	r26, r24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	a5 5e       	subi	r26, 0xE5	; 229
     688:	b7 4c       	sbci	r27, 0xC7	; 199
     68a:	24 e1       	ldi	r18, 0x14	; 20
     68c:	3a e3       	ldi	r19, 0x3A	; 58
	unsigned char cnt;
	for (cnt=0; cnt<NROFMODULES; cnt++)
	{
		ShowFunctionData[cnt] &= CUE_LED^0xFF;
     68e:	90 81       	ld	r25, Z
     690:	97 7f       	andi	r25, 0xF7	; 247
     692:	91 93       	st	Z+, r25
		if (ConsoleModuleSettings[cnt][Function])
     694:	8c 91       	ld	r24, X
     696:	88 23       	and	r24, r24
     698:	21 f0       	breq	.+8      	; 0x6a2 <ShowFunction+0x28>
		{
			ShowFunctionData[cnt] |= CUE_LED;
     69a:	ef 01       	movw	r28, r30
     69c:	21 97       	sbiw	r28, 0x01	; 1
     69e:	98 60       	ori	r25, 0x08	; 8
     6a0:	98 83       	st	Y, r25
     6a2:	5d 96       	adiw	r26, 0x1d	; 29


void ShowFunction(unsigned char Function)
{
	unsigned char cnt;
	for (cnt=0; cnt<NROFMODULES; cnt++)
     6a4:	e2 17       	cp	r30, r18
     6a6:	f3 07       	cpc	r31, r19
     6a8:	91 f7       	brne	.-28     	; 0x68e <ShowFunction+0x14>
		if (ConsoleModuleSettings[cnt][Function])
		{
			ShowFunctionData[cnt] |= CUE_LED;
		}
	}
	SendSerialData = 1;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
}
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <GetTelcoNrFromModuleNr>:
			}
		}
	}

	return TelcoNr;
}
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	08 95       	ret

000006ba <CheckTBMic>:

void CheckTBMic()
{
     6ba:	08 95       	ret

000006bc <StudioMicControl>:
		//TBL_MUTE = 0xFF;   // willem
	}
}

void StudioMicControl()
{
     6bc:	cf 92       	push	r12
     6be:	df 92       	push	r13
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
	unsigned char cntModule;
	unsigned char StudioMicActive=0;

	ConsoleFunctionData[16] &= STUDIOMUTE_FUNCTION_LED^0xFF;
     6ca:	e0 ea       	ldi	r30, 0xA0	; 160
     6cc:	f2 e2       	ldi	r31, 0x22	; 34
     6ce:	90 89       	ldd	r25, Z+16	; 0x10
     6d0:	9b 7f       	andi	r25, 0xFB	; 251
     6d2:	90 8b       	std	Z+16, r25	; 0x10
     6d4:	e9 e2       	ldi	r30, 0x29	; 41
     6d6:	f8 e3       	ldi	r31, 0x38	; 56
     6d8:	a0 e7       	ldi	r26, 0x70	; 112
     6da:	b2 e2       	ldi	r27, 0x22	; 34
     6dc:	0f 2e       	mov	r0, r31
     6de:	fc e0       	ldi	r31, 0x0C	; 12
     6e0:	cf 2e       	mov	r12, r31
     6e2:	fb e2       	ldi	r31, 0x2B	; 43
     6e4:	df 2e       	mov	r13, r31
     6e6:	f0 2d       	mov	r31, r0
     6e8:	20 ea       	ldi	r18, 0xA0	; 160
     6ea:	32 e2       	ldi	r19, 0x22	; 34
     6ec:	69 ef       	ldi	r22, 0xF9	; 249
     6ee:	79 e3       	ldi	r23, 0x39	; 57
}

void StudioMicControl()
{
	unsigned char cntModule;
	unsigned char StudioMicActive=0;
     6f0:	f1 2c       	mov	r15, r1
     6f2:	af 01       	movw	r20, r30

	ConsoleFunctionData[16] &= STUDIOMUTE_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		if (((ConsoleModuleSettings[cntModule][STUDIOMIC]) || (ConsoleModuleSettings[cntModule][ANNMIC])) && ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO)))
     6f4:	81 81       	ldd	r24, Z+1	; 0x01
     6f6:	81 11       	cpse	r24, r1
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <StudioMicControl+0x44>
     6fa:	80 81       	ld	r24, Z
     6fc:	88 23       	and	r24, r24
     6fe:	f9 f0       	breq	.+62     	; 0x73e <StudioMicControl+0x82>
     700:	8c 91       	ld	r24, X
     702:	81 50       	subi	r24, 0x01	; 1
     704:	82 30       	cpi	r24, 0x02	; 2
     706:	d8 f4       	brcc	.+54     	; 0x73e <StudioMicControl+0x82>
     708:	86 01       	movw	r16, r12
			else
			{
				if (((ModuleData[cntModule][FADERON]&0x80)) && ((ConsoleFunctionData[cntModule]&ON_LED)))
					StudioMicActive = 1; // !JB
			}*/
			if ((ModuleData[cntModule][MIC_RING]&0x80) ||
     70a:	e6 01       	movw	r28, r12
     70c:	8e 81       	ldd	r24, Y+6	; 0x06
     70e:	88 23       	and	r24, r24
     710:	64 f0       	brlt	.+24     	; 0x72a <StudioMicControl+0x6e>
     712:	8d 81       	ldd	r24, Y+5	; 0x05
     714:	88 23       	and	r24, r24
     716:	2c f0       	brlt	.+10     	; 0x722 <StudioMicControl+0x66>
				 ((!(ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEA])) ||
     718:	ea 01       	movw	r28, r20
     71a:	89 85       	ldd	r24, Y+9	; 0x09
     71c:	81 11       	cpse	r24, r1
     71e:	05 c0       	rjmp	.+10     	; 0x72a <StudioMicControl+0x6e>
     720:	0e c0       	rjmp	.+28     	; 0x73e <StudioMicControl+0x82>
				 (((ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEB])))
     722:	ea 01       	movw	r28, r20
     724:	8a 85       	ldd	r24, Y+10	; 0x0a
     726:	88 23       	and	r24, r24
     728:	51 f0       	breq	.+20     	; 0x73e <StudioMicControl+0x82>
			{
				if (((ModuleData[cntModule][FADERON]&0x80)) && ((ConsoleFunctionData[cntModule]&ON_LED)))
     72a:	e8 01       	movw	r28, r16
     72c:	88 81       	ld	r24, Y
     72e:	88 23       	and	r24, r24
     730:	34 f4       	brge	.+12     	; 0x73e <StudioMicControl+0x82>
     732:	e9 01       	movw	r28, r18
     734:	88 81       	ld	r24, Y
     736:	85 ff       	sbrs	r24, 5
     738:	02 c0       	rjmp	.+4      	; 0x73e <StudioMicControl+0x82>
					StudioMicActive = 1; // !JB
     73a:	ff 24       	eor	r15, r15
     73c:	f3 94       	inc	r15
     73e:	7d 96       	adiw	r30, 0x1d	; 29
     740:	11 96       	adiw	r26, 0x01	; 1
     742:	d8 e0       	ldi	r29, 0x08	; 8
     744:	cd 0e       	add	r12, r29
     746:	d1 1c       	adc	r13, r1
     748:	2f 5f       	subi	r18, 0xFF	; 255
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
{
	unsigned char cntModule;
	unsigned char StudioMicActive=0;

	ConsoleFunctionData[16] &= STUDIOMUTE_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     74c:	e6 17       	cp	r30, r22
     74e:	f7 07       	cpc	r31, r23
     750:	81 f6       	brne	.-96     	; 0x6f2 <StudioMicControl+0x36>
					StudioMicActive = 1; // !JB
			}
		}
	}

	if (StudioMicActive)
     752:	ff 20       	and	r15, r15
     754:	19 f0       	breq	.+6      	; 0x75c <StudioMicControl+0xa0>
		ConsoleFunctionData[16] |= STUDIOMUTE_FUNCTION_LED;		
     756:	94 60       	ori	r25, 0x04	; 4
     758:	90 93 b0 22 	sts	0x22B0, r25	; 0x8022b0 <ConsoleFunctionData+0x10>

	if (ConsoleFunctionData[16]&STUDIOMUTE_FUNCTION_LED)
     75c:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <ConsoleFunctionData+0x10>
     760:	82 ff       	sbrs	r24, 2
     762:	19 c0       	rjmp	.+50     	; 0x796 <StudioMicControl+0xda>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
     764:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     768:	ae 2f       	mov	r26, r30
     76a:	b0 e0       	ldi	r27, 0x00	; 0
     76c:	ab 53       	subi	r26, 0x3B	; 59
     76e:	bc 4d       	sbci	r27, 0xDC	; 220
     770:	80 ed       	ldi	r24, 0xD0	; 208
     772:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_STUDIOMUTE;
     774:	a1 e0       	ldi	r26, 0x01	; 1
     776:	ae 0f       	add	r26, r30
     778:	b0 e0       	ldi	r27, 0x00	; 0
     77a:	ab 53       	subi	r26, 0x3B	; 59
     77c:	bc 4d       	sbci	r27, 0xDC	; 220
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     782:	93 e0       	ldi	r25, 0x03	; 3
     784:	9e 0f       	add	r25, r30
     786:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
     78a:	ee 5f       	subi	r30, 0xFE	; 254
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	eb 53       	subi	r30, 0x3B	; 59
     790:	fc 4d       	sbci	r31, 0xDC	; 220
     792:	80 83       	st	Z, r24
     794:	18 c0       	rjmp	.+48     	; 0x7c6 <StudioMicControl+0x10a>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
     796:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     79a:	ae 2f       	mov	r26, r30
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	ab 53       	subi	r26, 0x3B	; 59
     7a0:	bc 4d       	sbci	r27, 0xDC	; 220
     7a2:	80 ed       	ldi	r24, 0xD0	; 208
     7a4:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_STUDIOMUTE;
     7a6:	a1 e0       	ldi	r26, 0x01	; 1
     7a8:	ae 0f       	add	r26, r30
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	ab 53       	subi	r26, 0x3B	; 59
     7ae:	bc 4d       	sbci	r27, 0xDC	; 220
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	8e 0f       	add	r24, r30
     7b8:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     7bc:	ee 5f       	subi	r30, 0xFE	; 254
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	eb 53       	subi	r30, 0x3B	; 59
     7c2:	fc 4d       	sbci	r31, 0xDC	; 220
     7c4:	10 82       	st	Z, r1
	}

	SendSerialData = 1;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
}
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	df 90       	pop	r13
     7d8:	cf 90       	pop	r12
     7da:	08 95       	ret

000007dc <DJControl>:




void DJControl()
{
     7dc:	cf 92       	push	r12
     7de:	df 92       	push	r13
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
	unsigned char cntModule;
	unsigned char DJMicActive=0;

	ConsoleFunctionData[16] &= CRMMUTE_FUNCTION_LED^0xFF;
     7ea:	e0 ea       	ldi	r30, 0xA0	; 160
     7ec:	f2 e2       	ldi	r31, 0x22	; 34
     7ee:	30 89       	ldd	r19, Z+16	; 0x10
     7f0:	3e 7f       	andi	r19, 0xFE	; 254
     7f2:	30 8b       	std	Z+16, r19	; 0x10
     7f4:	e8 e2       	ldi	r30, 0x28	; 40
     7f6:	f8 e3       	ldi	r31, 0x38	; 56
     7f8:	a0 e7       	ldi	r26, 0x70	; 112
     7fa:	b2 e2       	ldi	r27, 0x22	; 34
     7fc:	0f 2e       	mov	r0, r31
     7fe:	fc e0       	ldi	r31, 0x0C	; 12
     800:	cf 2e       	mov	r12, r31
     802:	fb e2       	ldi	r31, 0x2B	; 43
     804:	df 2e       	mov	r13, r31
     806:	f0 2d       	mov	r31, r0
     808:	80 ea       	ldi	r24, 0xA0	; 160
     80a:	92 e2       	ldi	r25, 0x22	; 34
     80c:	68 ef       	ldi	r22, 0xF8	; 248
     80e:	79 e3       	ldi	r23, 0x39	; 57


void DJControl()
{
	unsigned char cntModule;
	unsigned char DJMicActive=0;
     810:	f1 2c       	mov	r15, r1

	ConsoleFunctionData[16] &= CRMMUTE_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		if ((ConsoleModuleSettings[cntModule][DJMIC]) && ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO)))
     812:	20 81       	ld	r18, Z
     814:	22 23       	and	r18, r18
     816:	e9 f0       	breq	.+58     	; 0x852 <__EEPROM_REGION_LENGTH__+0x52>
     818:	2c 91       	ld	r18, X
     81a:	21 50       	subi	r18, 0x01	; 1
     81c:	22 30       	cpi	r18, 0x02	; 2
     81e:	c8 f4       	brcc	.+50     	; 0x852 <__EEPROM_REGION_LENGTH__+0x52>
     820:	86 01       	movw	r16, r12
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED) || (ConsoleFunctionData[cntModule]&CUE_FUNCTION))
					DJMicActive = 1; // !JB
			}
		}*/
//v1.15
			if ((ModuleData[cntModule][MIC_RING]&0x80) ||
     822:	e6 01       	movw	r28, r12
     824:	2e 81       	ldd	r18, Y+6	; 0x06
     826:	22 23       	and	r18, r18
     828:	54 f0       	brlt	.+20     	; 0x83e <__EEPROM_REGION_LENGTH__+0x3e>
     82a:	2d 81       	ldd	r18, Y+5	; 0x05
     82c:	22 23       	and	r18, r18
     82e:	24 f0       	brlt	.+8      	; 0x838 <__EEPROM_REGION_LENGTH__+0x38>
				 ((!(ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEA])) || (((ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEB])))
     830:	22 85       	ldd	r18, Z+10	; 0x0a
     832:	21 11       	cpse	r18, r1
     834:	04 c0       	rjmp	.+8      	; 0x83e <__EEPROM_REGION_LENGTH__+0x3e>
     836:	0d c0       	rjmp	.+26     	; 0x852 <__EEPROM_REGION_LENGTH__+0x52>
     838:	23 85       	ldd	r18, Z+11	; 0x0b
     83a:	22 23       	and	r18, r18
     83c:	51 f0       	breq	.+20     	; 0x852 <__EEPROM_REGION_LENGTH__+0x52>
			{
				if (((ModuleData[cntModule][FADERON]&0x80)) && ((ConsoleFunctionData[cntModule]&ON_LED) || (ConsoleFunctionData[cntModule]&CUE_FUNCTION)))
     83e:	e8 01       	movw	r28, r16
     840:	28 81       	ld	r18, Y
     842:	22 23       	and	r18, r18
     844:	34 f4       	brge	.+12     	; 0x852 <__EEPROM_REGION_LENGTH__+0x52>
     846:	ec 01       	movw	r28, r24
     848:	28 81       	ld	r18, Y
     84a:	24 72       	andi	r18, 0x24	; 36
     84c:	11 f0       	breq	.+4      	; 0x852 <__EEPROM_REGION_LENGTH__+0x52>
					DJMicActive = 1; // !JB
     84e:	ff 24       	eor	r15, r15
     850:	f3 94       	inc	r15
     852:	7d 96       	adiw	r30, 0x1d	; 29
     854:	11 96       	adiw	r26, 0x01	; 1
     856:	d8 e0       	ldi	r29, 0x08	; 8
     858:	cd 0e       	add	r12, r29
     85a:	d1 1c       	adc	r13, r1
     85c:	01 96       	adiw	r24, 0x01	; 1
{
	unsigned char cntModule;
	unsigned char DJMicActive=0;

	ConsoleFunctionData[16] &= CRMMUTE_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     85e:	e6 17       	cp	r30, r22
     860:	f7 07       	cpc	r31, r23
     862:	b9 f6       	brne	.-82     	; 0x812 <__EEPROM_REGION_LENGTH__+0x12>
					DJMicActive = 1; // !JB
			}
		}
	}

	if (DJMicActive)
     864:	ff 20       	and	r15, r15
     866:	19 f0       	breq	.+6      	; 0x86e <__EEPROM_REGION_LENGTH__+0x6e>
		ConsoleFunctionData[16] |= CRMMUTE_FUNCTION_LED;		
     868:	31 60       	ori	r19, 0x01	; 1
     86a:	30 93 b0 22 	sts	0x22B0, r19	; 0x8022b0 <ConsoleFunctionData+0x10>

	if (ConsoleFunctionData[16]&CRMMUTE_FUNCTION_LED)
     86e:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <ConsoleFunctionData+0x10>
     872:	80 ff       	sbrs	r24, 0
     874:	19 c0       	rjmp	.+50     	; 0x8a8 <__EEPROM_REGION_LENGTH__+0xa8>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
     876:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     87a:	ae 2f       	mov	r26, r30
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	ab 53       	subi	r26, 0x3B	; 59
     880:	bc 4d       	sbci	r27, 0xDC	; 220
     882:	80 ed       	ldi	r24, 0xD0	; 208
     884:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_CRMMUTE;
     886:	a1 e0       	ldi	r26, 0x01	; 1
     888:	ae 0f       	add	r26, r30
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	ab 53       	subi	r26, 0x3B	; 59
     88e:	bc 4d       	sbci	r27, 0xDC	; 220
     890:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     892:	83 e0       	ldi	r24, 0x03	; 3
     894:	8e 0f       	add	r24, r30
     896:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     89a:	ee 5f       	subi	r30, 0xFE	; 254
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	eb 53       	subi	r30, 0x3B	; 59
     8a0:	fc 4d       	sbci	r31, 0xDC	; 220
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 83       	st	Z, r24
     8a6:	17 c0       	rjmp	.+46     	; 0x8d6 <__EEPROM_REGION_LENGTH__+0xd6>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
     8a8:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     8ac:	ae 2f       	mov	r26, r30
     8ae:	b0 e0       	ldi	r27, 0x00	; 0
     8b0:	ab 53       	subi	r26, 0x3B	; 59
     8b2:	bc 4d       	sbci	r27, 0xDC	; 220
     8b4:	80 ed       	ldi	r24, 0xD0	; 208
     8b6:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_CRMMUTE;
     8b8:	a1 e0       	ldi	r26, 0x01	; 1
     8ba:	ae 0f       	add	r26, r30
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	ab 53       	subi	r26, 0x3B	; 59
     8c0:	bc 4d       	sbci	r27, 0xDC	; 220
     8c2:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     8c4:	83 e0       	ldi	r24, 0x03	; 3
     8c6:	8e 0f       	add	r24, r30
     8c8:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     8cc:	ee 5f       	subi	r30, 0xFE	; 254
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	eb 53       	subi	r30, 0x3B	; 59
     8d2:	fc 4d       	sbci	r31, 0xDC	; 220
     8d4:	10 82       	st	Z, r1
	}
	SendSerialData = 1;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	08 95       	ret

000008ec <OnAirControl>:

void OnAirControl()
{
     8ec:	cf 92       	push	r12
     8ee:	df 92       	push	r13
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	20 e7       	ldi	r18, 0x70	; 112
     8fc:	32 e2       	ldi	r19, 0x22	; 34
     8fe:	ec e0       	ldi	r30, 0x0C	; 12
     900:	fb e2       	ldi	r31, 0x2B	; 43
     902:	0f 2e       	mov	r0, r31
     904:	f0 ea       	ldi	r31, 0xA0	; 160
     906:	cf 2e       	mov	r12, r31
     908:	f2 e2       	ldi	r31, 0x22	; 34
     90a:	df 2e       	mov	r13, r31
     90c:	f0 2d       	mov	r31, r0
     90e:	ab e2       	ldi	r26, 0x2B	; 43
     910:	b8 e3       	ldi	r27, 0x38	; 56
     912:	4c e8       	ldi	r20, 0x8C	; 140
     914:	5b e2       	ldi	r21, 0x2B	; 43
	unsigned char cntModule;
	unsigned char OnAir1=0;
	unsigned char OnAir2=0;
     916:	90 e0       	ldi	r25, 0x00	; 0
}

void OnAirControl()
{
	unsigned char cntModule;
	unsigned char OnAir1=0;
     918:	f1 2c       	mov	r15, r1
	unsigned char OnAir2=0;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		if  ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO))
     91a:	e9 01       	movw	r28, r18
     91c:	89 91       	ld	r24, Y+
     91e:	9e 01       	movw	r18, r28
     920:	81 50       	subi	r24, 0x01	; 1
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	08 f0       	brcs	.+2      	; 0x928 <OnAirControl+0x3c>
     926:	5f c0       	rjmp	.+190    	; 0x9e6 <OnAirControl+0xfa>
		{
			if (ModuleData[cntModule][MIC_RING]&0x80)
     928:	86 81       	ldd	r24, Z+6	; 0x06
     92a:	88 23       	and	r24, r24
     92c:	0c f5       	brge	.+66     	; 0x970 <OnAirControl+0x84>
     92e:	8d 01       	movw	r16, r26
			{
				if (ConsoleModuleSettings[cntModule][ONAIR1MIC])
     930:	12 96       	adiw	r26, 0x02	; 2
     932:	8c 91       	ld	r24, X
     934:	12 97       	sbiw	r26, 0x02	; 2
     936:	88 23       	and	r24, r24
     938:	59 f0       	breq	.+22     	; 0x950 <OnAirControl+0x64>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     93a:	80 81       	ld	r24, Z
     93c:	88 23       	and	r24, r24
     93e:	0c f0       	brlt	.+2      	; 0x942 <OnAirControl+0x56>
     940:	52 c0       	rjmp	.+164    	; 0x9e6 <OnAirControl+0xfa>
     942:	e6 01       	movw	r28, r12
     944:	88 81       	ld	r24, Y
     946:	85 ff       	sbrs	r24, 5
     948:	d5 c0       	rjmp	.+426    	; 0xaf4 <OnAirControl+0x208>
				OnAir1 = 1;	 // !JB
     94a:	ff 24       	eor	r15, r15
     94c:	f3 94       	inc	r15
     94e:	d2 c0       	rjmp	.+420    	; 0xaf4 <OnAirControl+0x208>
				if (ConsoleModuleSettings[cntModule][ONAIR2MIC])
     950:	15 96       	adiw	r26, 0x05	; 5
     952:	8c 91       	ld	r24, X
     954:	15 97       	sbiw	r26, 0x05	; 5
     956:	88 23       	and	r24, r24
     958:	09 f4       	brne	.+2      	; 0x95c <OnAirControl+0x70>
     95a:	45 c0       	rjmp	.+138    	; 0x9e6 <OnAirControl+0xfa>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     95c:	80 81       	ld	r24, Z
     95e:	88 23       	and	r24, r24
     960:	0c f0       	brlt	.+2      	; 0x964 <OnAirControl+0x78>
     962:	41 c0       	rjmp	.+130    	; 0x9e6 <OnAirControl+0xfa>
     964:	e6 01       	movw	r28, r12
     966:	88 81       	ld	r24, Y
     968:	85 ff       	sbrs	r24, 5
     96a:	3d c0       	rjmp	.+122    	; 0x9e6 <OnAirControl+0xfa>
				OnAir2 = 1;	 // !JB
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	3b c0       	rjmp	.+118    	; 0x9e6 <OnAirControl+0xfa>
			}
			else if (!(ModuleData[cntModule][LINEB]&0x80))
     970:	85 81       	ldd	r24, Z+5	; 0x05
     972:	88 23       	and	r24, r24
     974:	e4 f0       	brlt	.+56     	; 0x9ae <OnAirControl+0xc2>
     976:	8d 01       	movw	r16, r26
			{
				if (ConsoleModuleSettings[cntModule][ONAIR1LINEA])
     978:	8c 91       	ld	r24, X
     97a:	88 23       	and	r24, r24
     97c:	51 f0       	breq	.+20     	; 0x992 <OnAirControl+0xa6>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     97e:	80 81       	ld	r24, Z
     980:	88 23       	and	r24, r24
     982:	8c f5       	brge	.+98     	; 0x9e6 <OnAirControl+0xfa>
     984:	e6 01       	movw	r28, r12
     986:	88 81       	ld	r24, Y
     988:	85 ff       	sbrs	r24, 5
     98a:	ba c0       	rjmp	.+372    	; 0xb00 <OnAirControl+0x214>
				OnAir1 = 1;	// !JB
     98c:	ff 24       	eor	r15, r15
     98e:	f3 94       	inc	r15
     990:	b7 c0       	rjmp	.+366    	; 0xb00 <OnAirControl+0x214>
				if (ConsoleModuleSettings[cntModule][ONAIR2LINEA])
     992:	13 96       	adiw	r26, 0x03	; 3
     994:	8c 91       	ld	r24, X
     996:	13 97       	sbiw	r26, 0x03	; 3
     998:	88 23       	and	r24, r24
     99a:	29 f1       	breq	.+74     	; 0x9e6 <OnAirControl+0xfa>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     99c:	80 81       	ld	r24, Z
     99e:	88 23       	and	r24, r24
     9a0:	14 f5       	brge	.+68     	; 0x9e6 <OnAirControl+0xfa>
     9a2:	e6 01       	movw	r28, r12
     9a4:	88 81       	ld	r24, Y
     9a6:	85 ff       	sbrs	r24, 5
     9a8:	1e c0       	rjmp	.+60     	; 0x9e6 <OnAirControl+0xfa>
				OnAir2 = 1;	// !JB
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	1c c0       	rjmp	.+56     	; 0x9e6 <OnAirControl+0xfa>
     9ae:	8d 01       	movw	r16, r26
			}
			else if (ModuleData[cntModule][LINEB]&0x80)
			{
				if (ConsoleModuleSettings[cntModule][ONAIR1LINEB])
     9b0:	11 96       	adiw	r26, 0x01	; 1
     9b2:	8c 91       	ld	r24, X
     9b4:	11 97       	sbiw	r26, 0x01	; 1
     9b6:	88 23       	and	r24, r24
     9b8:	51 f0       	breq	.+20     	; 0x9ce <OnAirControl+0xe2>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     9ba:	80 81       	ld	r24, Z
     9bc:	88 23       	and	r24, r24
     9be:	9c f4       	brge	.+38     	; 0x9e6 <OnAirControl+0xfa>
     9c0:	e6 01       	movw	r28, r12
     9c2:	88 81       	ld	r24, Y
     9c4:	85 ff       	sbrs	r24, 5
     9c6:	a1 c0       	rjmp	.+322    	; 0xb0a <OnAirControl+0x21e>
				OnAir1 = 1;	 // !JB
     9c8:	ff 24       	eor	r15, r15
     9ca:	f3 94       	inc	r15
     9cc:	9e c0       	rjmp	.+316    	; 0xb0a <OnAirControl+0x21e>
				if (ConsoleModuleSettings[cntModule][ONAIR2LINEB])
     9ce:	14 96       	adiw	r26, 0x04	; 4
     9d0:	8c 91       	ld	r24, X
     9d2:	14 97       	sbiw	r26, 0x04	; 4
     9d4:	88 23       	and	r24, r24
     9d6:	39 f0       	breq	.+14     	; 0x9e6 <OnAirControl+0xfa>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     9d8:	80 81       	ld	r24, Z
     9da:	88 23       	and	r24, r24
     9dc:	24 f4       	brge	.+8      	; 0x9e6 <OnAirControl+0xfa>
     9de:	e6 01       	movw	r28, r12
     9e0:	88 81       	ld	r24, Y
     9e2:	85 fd       	sbrc	r24, 5
				OnAir2 = 1;	// !JB
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	38 96       	adiw	r30, 0x08	; 8
     9e8:	df ef       	ldi	r29, 0xFF	; 255
     9ea:	cd 1a       	sub	r12, r29
     9ec:	dd 0a       	sbc	r13, r29
     9ee:	5d 96       	adiw	r26, 0x1d	; 29
{
	unsigned char cntModule;
	unsigned char OnAir1=0;
	unsigned char OnAir2=0;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     9f0:	4e 17       	cp	r20, r30
     9f2:	5f 07       	cpc	r21, r31
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <OnAirControl+0x10c>
     9f6:	91 cf       	rjmp	.-222    	; 0x91a <OnAirControl+0x2e>
			}
		}
	}
	
	ConsoleFunctionData[16] &= ONAIR1_FUNCTION^0xFF;
	ConsoleFunctionData[16] &= ONAIR2_FUNCTION^0xFF;
     9f8:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <ConsoleFunctionData+0x10>
     9fc:	8f 7c       	andi	r24, 0xCF	; 207
	if (OnAir1)
     9fe:	f1 10       	cpse	r15, r1
     a00:	03 c0       	rjmp	.+6      	; 0xa08 <OnAirControl+0x11c>
			}
		}
	}
	
	ConsoleFunctionData[16] &= ONAIR1_FUNCTION^0xFF;
	ConsoleFunctionData[16] &= ONAIR2_FUNCTION^0xFF;
     a02:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <ConsoleFunctionData+0x10>
     a06:	03 c0       	rjmp	.+6      	; 0xa0e <OnAirControl+0x122>
	if (OnAir1)
	ConsoleFunctionData[16] |= ONAIR1_FUNCTION;
     a08:	80 62       	ori	r24, 0x20	; 32
     a0a:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <ConsoleFunctionData+0x10>
	if (OnAir2)
     a0e:	99 23       	and	r25, r25
     a10:	29 f0       	breq	.+10     	; 0xa1c <OnAirControl+0x130>
	ConsoleFunctionData[16] |= ONAIR2_FUNCTION;
     a12:	e0 ea       	ldi	r30, 0xA0	; 160
     a14:	f2 e2       	ldi	r31, 0x22	; 34
     a16:	80 89       	ldd	r24, Z+16	; 0x10
     a18:	80 61       	ori	r24, 0x10	; 16
     a1a:	80 8b       	std	Z+16, r24	; 0x10

	if (ConsoleFunctionData[16]&ONAIR1_FUNCTION)
     a1c:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <ConsoleFunctionData+0x10>
     a20:	85 ff       	sbrs	r24, 5
     a22:	19 c0       	rjmp	.+50     	; 0xa56 <OnAirControl+0x16a>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_ONAIR1;
     a24:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     a28:	ae 2f       	mov	r26, r30
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	ab 53       	subi	r26, 0x3B	; 59
     a2e:	bc 4d       	sbci	r27, 0xDC	; 220
     a30:	84 e8       	ldi	r24, 0x84	; 132
     a32:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     a34:	a1 e0       	ldi	r26, 0x01	; 1
     a36:	ae 0f       	add	r26, r30
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	ab 53       	subi	r26, 0x3B	; 59
     a3c:	bc 4d       	sbci	r27, 0xDC	; 220
     a3e:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     a40:	83 e0       	ldi	r24, 0x03	; 3
     a42:	8e 0f       	add	r24, r30
     a44:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     a48:	ee 5f       	subi	r30, 0xFE	; 254
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	eb 53       	subi	r30, 0x3B	; 59
     a4e:	fc 4d       	sbci	r31, 0xDC	; 220
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	80 83       	st	Z, r24
     a54:	17 c0       	rjmp	.+46     	; 0xa84 <OnAirControl+0x198>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_ONAIR1;
     a56:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     a5a:	ae 2f       	mov	r26, r30
     a5c:	b0 e0       	ldi	r27, 0x00	; 0
     a5e:	ab 53       	subi	r26, 0x3B	; 59
     a60:	bc 4d       	sbci	r27, 0xDC	; 220
     a62:	84 e8       	ldi	r24, 0x84	; 132
     a64:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     a66:	a1 e0       	ldi	r26, 0x01	; 1
     a68:	ae 0f       	add	r26, r30
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	ab 53       	subi	r26, 0x3B	; 59
     a6e:	bc 4d       	sbci	r27, 0xDC	; 220
     a70:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8e 0f       	add	r24, r30
     a76:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     a7a:	ee 5f       	subi	r30, 0xFE	; 254
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	eb 53       	subi	r30, 0x3B	; 59
     a80:	fc 4d       	sbci	r31, 0xDC	; 220
     a82:	10 82       	st	Z, r1
	}

	if (ConsoleFunctionData[16]&ONAIR2_FUNCTION)
     a84:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <ConsoleFunctionData+0x10>
     a88:	84 ff       	sbrs	r24, 4
     a8a:	19 c0       	rjmp	.+50     	; 0xabe <OnAirControl+0x1d2>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_ONAIR2;
     a8c:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     a90:	ae 2f       	mov	r26, r30
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	ab 53       	subi	r26, 0x3B	; 59
     a96:	bc 4d       	sbci	r27, 0xDC	; 220
     a98:	85 e8       	ldi	r24, 0x85	; 133
     a9a:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     a9c:	a1 e0       	ldi	r26, 0x01	; 1
     a9e:	ae 0f       	add	r26, r30
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	ab 53       	subi	r26, 0x3B	; 59
     aa4:	bc 4d       	sbci	r27, 0xDC	; 220
     aa6:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     aa8:	83 e0       	ldi	r24, 0x03	; 3
     aaa:	8e 0f       	add	r24, r30
     aac:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     ab0:	ee 5f       	subi	r30, 0xFE	; 254
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	eb 53       	subi	r30, 0x3B	; 59
     ab6:	fc 4d       	sbci	r31, 0xDC	; 220
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	80 83       	st	Z, r24
     abc:	17 c0       	rjmp	.+46     	; 0xaec <OnAirControl+0x200>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_ONAIR2;
     abe:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     ac2:	ae 2f       	mov	r26, r30
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	ab 53       	subi	r26, 0x3B	; 59
     ac8:	bc 4d       	sbci	r27, 0xDC	; 220
     aca:	85 e8       	ldi	r24, 0x85	; 133
     acc:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     ace:	a1 e0       	ldi	r26, 0x01	; 1
     ad0:	ae 0f       	add	r26, r30
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	ab 53       	subi	r26, 0x3B	; 59
     ad6:	bc 4d       	sbci	r27, 0xDC	; 220
     ad8:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     ada:	83 e0       	ldi	r24, 0x03	; 3
     adc:	8e 0f       	add	r24, r30
     ade:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     ae2:	ee 5f       	subi	r30, 0xFE	; 254
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	eb 53       	subi	r30, 0x3B	; 59
     ae8:	fc 4d       	sbci	r31, 0xDC	; 220
     aea:	10 82       	st	Z, r1
	}
	SendSerialData = 1;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
}
     af2:	10 c0       	rjmp	.+32     	; 0xb14 <OnAirControl+0x228>
			if (ModuleData[cntModule][MIC_RING]&0x80)
			{
				if (ConsoleModuleSettings[cntModule][ONAIR1MIC])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir1 = 1;	 // !JB
				if (ConsoleModuleSettings[cntModule][ONAIR2MIC])
     af4:	e8 01       	movw	r28, r16
     af6:	8d 81       	ldd	r24, Y+5	; 0x05
     af8:	88 23       	and	r24, r24
     afa:	09 f4       	brne	.+2      	; 0xafe <OnAirControl+0x212>
     afc:	74 cf       	rjmp	.-280    	; 0x9e6 <OnAirControl+0xfa>
     afe:	32 cf       	rjmp	.-412    	; 0x964 <OnAirControl+0x78>
			else if (!(ModuleData[cntModule][LINEB]&0x80))
			{
				if (ConsoleModuleSettings[cntModule][ONAIR1LINEA])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir1 = 1;	// !JB
				if (ConsoleModuleSettings[cntModule][ONAIR2LINEA])
     b00:	e8 01       	movw	r28, r16
     b02:	8b 81       	ldd	r24, Y+3	; 0x03
     b04:	81 11       	cpse	r24, r1
     b06:	4d cf       	rjmp	.-358    	; 0x9a2 <OnAirControl+0xb6>
     b08:	6e cf       	rjmp	.-292    	; 0x9e6 <OnAirControl+0xfa>
			else if (ModuleData[cntModule][LINEB]&0x80)
			{
				if (ConsoleModuleSettings[cntModule][ONAIR1LINEB])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir1 = 1;	 // !JB
				if (ConsoleModuleSettings[cntModule][ONAIR2LINEB])
     b0a:	e8 01       	movw	r28, r16
     b0c:	8c 81       	ldd	r24, Y+4	; 0x04
     b0e:	81 11       	cpse	r24, r1
     b10:	66 cf       	rjmp	.-308    	; 0x9de <OnAirControl+0xf2>
     b12:	69 cf       	rjmp	.-302    	; 0x9e6 <OnAirControl+0xfa>
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_ONAIR2;
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
	}
	SendSerialData = 1;
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	df 90       	pop	r13
     b20:	cf 90       	pop	r12
     b22:	08 95       	ret

00000b24 <StartControl>:

void StartControl(unsigned char Module, unsigned char On)
{
	unsigned char Status = 0;

	ConsoleFunctionData[Module] &= START_FUNCTION^0xFF;
     b24:	28 2f       	mov	r18, r24
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	f9 01       	movw	r30, r18
     b2a:	e0 56       	subi	r30, 0x60	; 96
     b2c:	fd 4d       	sbci	r31, 0xDD	; 221
     b2e:	90 81       	ld	r25, Z
     b30:	9d 7f       	andi	r25, 0xFD	; 253
     b32:	90 83       	st	Z, r25
	if (On)
     b34:	66 23       	and	r22, r22
     b36:	09 f4       	brne	.+2      	; 0xb3a <StartControl+0x16>
     b38:	4a c0       	rjmp	.+148    	; 0xbce <StartControl+0xaa>
	{
		if (ModuleData[Module][MIC_RING]&0x80)
     b3a:	f9 01       	movw	r30, r18
     b3c:	ee 0f       	add	r30, r30
     b3e:	ff 1f       	adc	r31, r31
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	ee 0f       	add	r30, r30
     b46:	ff 1f       	adc	r31, r31
     b48:	e5 5f       	subi	r30, 0xF5	; 245
     b4a:	f4 4d       	sbci	r31, 0xD4	; 212
     b4c:	47 81       	ldd	r20, Z+7	; 0x07
     b4e:	44 23       	and	r20, r20
     b50:	8c f4       	brge	.+34     	; 0xb74 <StartControl+0x50>
		{
			if (ConsoleModuleSettings[Module][STARTMIC])
     b52:	4d e1       	ldi	r20, 0x1D	; 29
     b54:	42 9f       	mul	r20, r18
     b56:	f0 01       	movw	r30, r0
     b58:	43 9f       	mul	r20, r19
     b5a:	f0 0d       	add	r31, r0
     b5c:	11 24       	eor	r1, r1
     b5e:	e5 5e       	subi	r30, 0xE5	; 229
     b60:	f7 4c       	sbci	r31, 0xC7	; 199
     b62:	45 81       	ldd	r20, Z+5	; 0x05
     b64:	44 23       	and	r20, r20
     b66:	99 f1       	breq	.+102    	; 0xbce <StartControl+0xaa>
			ConsoleFunctionData[Module] |= START_FUNCTION;
     b68:	f9 01       	movw	r30, r18
     b6a:	e0 56       	subi	r30, 0x60	; 96
     b6c:	fd 4d       	sbci	r31, 0xDD	; 221
     b6e:	92 60       	ori	r25, 0x02	; 2
     b70:	90 83       	st	Z, r25
     b72:	2d c0       	rjmp	.+90     	; 0xbce <StartControl+0xaa>
		}
		else if (!(ModuleData[Module][LINEB]&0x80))
     b74:	f9 01       	movw	r30, r18
     b76:	ee 0f       	add	r30, r30
     b78:	ff 1f       	adc	r31, r31
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	e5 5f       	subi	r30, 0xF5	; 245
     b84:	f4 4d       	sbci	r31, 0xD4	; 212
     b86:	46 81       	ldd	r20, Z+6	; 0x06
     b88:	44 23       	and	r20, r20
     b8a:	8c f0       	brlt	.+34     	; 0xbae <StartControl+0x8a>
		{
			if (ConsoleModuleSettings[Module][STARTLINEA])
     b8c:	4d e1       	ldi	r20, 0x1D	; 29
     b8e:	42 9f       	mul	r20, r18
     b90:	f0 01       	movw	r30, r0
     b92:	43 9f       	mul	r20, r19
     b94:	f0 0d       	add	r31, r0
     b96:	11 24       	eor	r1, r1
     b98:	e5 5e       	subi	r30, 0xE5	; 229
     b9a:	f7 4c       	sbci	r31, 0xC7	; 199
     b9c:	43 81       	ldd	r20, Z+3	; 0x03
     b9e:	44 23       	and	r20, r20
     ba0:	b1 f0       	breq	.+44     	; 0xbce <StartControl+0xaa>
			ConsoleFunctionData[Module] |= START_FUNCTION;
     ba2:	f9 01       	movw	r30, r18
     ba4:	e0 56       	subi	r30, 0x60	; 96
     ba6:	fd 4d       	sbci	r31, 0xDD	; 221
     ba8:	92 60       	ori	r25, 0x02	; 2
     baa:	90 83       	st	Z, r25
     bac:	10 c0       	rjmp	.+32     	; 0xbce <StartControl+0xaa>
		}
		else if (ModuleData[Module][LINEB]&0x80)
		{
			if (ConsoleModuleSettings[Module][STARTLINEB])
     bae:	4d e1       	ldi	r20, 0x1D	; 29
     bb0:	42 9f       	mul	r20, r18
     bb2:	f0 01       	movw	r30, r0
     bb4:	43 9f       	mul	r20, r19
     bb6:	f0 0d       	add	r31, r0
     bb8:	11 24       	eor	r1, r1
     bba:	e5 5e       	subi	r30, 0xE5	; 229
     bbc:	f7 4c       	sbci	r31, 0xC7	; 199
     bbe:	44 81       	ldd	r20, Z+4	; 0x04
     bc0:	44 23       	and	r20, r20
     bc2:	29 f0       	breq	.+10     	; 0xbce <StartControl+0xaa>
			ConsoleFunctionData[Module] |= START_FUNCTION;
     bc4:	f9 01       	movw	r30, r18
     bc6:	e0 56       	subi	r30, 0x60	; 96
     bc8:	fd 4d       	sbci	r31, 0xDD	; 221
     bca:	92 60       	ori	r25, 0x02	; 2
     bcc:	90 83       	st	Z, r25
		}
	}
	
	cntStartPuls[Module] = 0;
     bce:	f9 01       	movw	r30, r18
     bd0:	e5 51       	subi	r30, 0x15	; 21
     bd2:	f6 4c       	sbci	r31, 0xC6	; 198
     bd4:	10 82       	st	Z, r1
	if ((ConsoleFunctionData[Module]&START_FUNCTION) && (ConsoleModuleSettings[Module][STARTPULS]))
     bd6:	f9 01       	movw	r30, r18
     bd8:	e0 56       	subi	r30, 0x60	; 96
     bda:	fd 4d       	sbci	r31, 0xDD	; 221
     bdc:	90 81       	ld	r25, Z
     bde:	91 ff       	sbrs	r25, 1
     be0:	2e c0       	rjmp	.+92     	; 0xc3e <StartControl+0x11a>
     be2:	9d e1       	ldi	r25, 0x1D	; 29
     be4:	92 9f       	mul	r25, r18
     be6:	f0 01       	movw	r30, r0
     be8:	93 9f       	mul	r25, r19
     bea:	f0 0d       	add	r31, r0
     bec:	11 24       	eor	r1, r1
     bee:	e5 5e       	subi	r30, 0xE5	; 229
     bf0:	f7 4c       	sbci	r31, 0xC7	; 199
     bf2:	91 85       	ldd	r25, Z+9	; 0x09
     bf4:	99 23       	and	r25, r25
     bf6:	51 f0       	breq	.+20     	; 0xc0c <StartControl+0xe8>
	{
		cntStartPuls[Module] = PULSWIDTH;
     bf8:	f9 01       	movw	r30, r18
     bfa:	e5 51       	subi	r30, 0x15	; 21
     bfc:	f6 4c       	sbci	r31, 0xC6	; 198
     bfe:	9a e0       	ldi	r25, 0x0A	; 10
     c00:	90 83       	st	Z, r25
     c02:	04 c0       	rjmp	.+8      	; 0xc0c <StartControl+0xe8>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_STOP;
		SerialBufferOut[SerialBufferOutPtrTop++] = Module;
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
	}
	SendSerialData = 1;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
}
     c0a:	08 95       	ret
		cntStartPuls[Module] = PULSWIDTH;
	}

	if (ConsoleFunctionData[Module]&START_FUNCTION)
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_START;
     c0c:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     c10:	ae 2f       	mov	r26, r30
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	ab 53       	subi	r26, 0x3B	; 59
     c16:	bc 4d       	sbci	r27, 0xDC	; 220
     c18:	92 e8       	ldi	r25, 0x82	; 130
     c1a:	9c 93       	st	X, r25
		SerialBufferOut[SerialBufferOutPtrTop++] = Module;
     c1c:	a1 e0       	ldi	r26, 0x01	; 1
     c1e:	ae 0f       	add	r26, r30
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	ab 53       	subi	r26, 0x3B	; 59
     c24:	bc 4d       	sbci	r27, 0xDC	; 220
     c26:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     c28:	83 e0       	ldi	r24, 0x03	; 3
     c2a:	8e 0f       	add	r24, r30
     c2c:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     c30:	ee 5f       	subi	r30, 0xFE	; 254
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	eb 53       	subi	r30, 0x3B	; 59
     c36:	fc 4d       	sbci	r31, 0xDC	; 220
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	80 83       	st	Z, r24
     c3c:	e3 cf       	rjmp	.-58     	; 0xc04 <StartControl+0xe0>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_STOP;
     c3e:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     c42:	ae 2f       	mov	r26, r30
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	ab 53       	subi	r26, 0x3B	; 59
     c48:	bc 4d       	sbci	r27, 0xDC	; 220
     c4a:	93 e8       	ldi	r25, 0x83	; 131
     c4c:	9c 93       	st	X, r25
		SerialBufferOut[SerialBufferOutPtrTop++] = Module;
     c4e:	a1 e0       	ldi	r26, 0x01	; 1
     c50:	ae 0f       	add	r26, r30
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	ab 53       	subi	r26, 0x3B	; 59
     c56:	bc 4d       	sbci	r27, 0xDC	; 220
     c58:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	8e 0f       	add	r24, r30
     c5e:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     c62:	ee 5f       	subi	r30, 0xFE	; 254
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	eb 53       	subi	r30, 0x3B	; 59
     c68:	fc 4d       	sbci	r31, 0xDC	; 220
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 83       	st	Z, r24
     c6e:	ca cf       	rjmp	.-108    	; 0xc04 <StartControl+0xe0>

00000c70 <CheckStartCondition>:
	}
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	18 2f       	mov	r17, r24
	unsigned char StartOn = 0;

	if (!ConsoleModuleSettings[Module][SWITCHSTART])
     c78:	c8 2f       	mov	r28, r24
     c7a:	d0 e0       	ldi	r29, 0x00	; 0
     c7c:	8d e1       	ldi	r24, 0x1D	; 29
     c7e:	18 9f       	mul	r17, r24
     c80:	f0 01       	movw	r30, r0
     c82:	11 24       	eor	r1, r1
     c84:	e5 5e       	subi	r30, 0xE5	; 229
     c86:	f7 4c       	sbci	r31, 0xC7	; 199
     c88:	84 8d       	ldd	r24, Z+28	; 0x1c
     c8a:	81 11       	cpse	r24, r1
     c8c:	97 c0       	rjmp	.+302    	; 0xdbc <CheckStartCondition+0x14c>
	{
		if  ((ConsoleModuleSettings[Module][STARTON]) && (ConsoleModuleSettings[Module][STARTFADER]))
     c8e:	8d e1       	ldi	r24, 0x1D	; 29
     c90:	8c 9f       	mul	r24, r28
     c92:	f0 01       	movw	r30, r0
     c94:	8d 9f       	mul	r24, r29
     c96:	f0 0d       	add	r31, r0
     c98:	11 24       	eor	r1, r1
     c9a:	e5 5e       	subi	r30, 0xE5	; 229
     c9c:	f7 4c       	sbci	r31, 0xC7	; 199
     c9e:	87 81       	ldd	r24, Z+7	; 0x07
     ca0:	88 23       	and	r24, r24
     ca2:	09 f4       	brne	.+2      	; 0xca6 <CheckStartCondition+0x36>
     ca4:	59 c0       	rjmp	.+178    	; 0xd58 <CheckStartCondition+0xe8>
     ca6:	8d e1       	ldi	r24, 0x1D	; 29
     ca8:	8c 9f       	mul	r24, r28
     caa:	f0 01       	movw	r30, r0
     cac:	8d 9f       	mul	r24, r29
     cae:	f0 0d       	add	r31, r0
     cb0:	11 24       	eor	r1, r1
     cb2:	e5 5e       	subi	r30, 0xE5	; 229
     cb4:	f7 4c       	sbci	r31, 0xC7	; 199
     cb6:	86 81       	ldd	r24, Z+6	; 0x06
     cb8:	88 23       	and	r24, r24
     cba:	69 f1       	breq	.+90     	; 0xd16 <CheckStartCondition+0xa6>
		{
			if (((ModuleData[Module][FADERON]&0x80)) && (ConsoleFunctionData[Module]&ON_LED))
     cbc:	fe 01       	movw	r30, r28
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	e5 5f       	subi	r30, 0xF5	; 245
     ccc:	f4 4d       	sbci	r31, 0xD4	; 212
     cce:	81 81       	ldd	r24, Z+1	; 0x01
     cd0:	88 23       	and	r24, r24
     cd2:	bc f4       	brge	.+46     	; 0xd02 <CheckStartCondition+0x92>
     cd4:	fe 01       	movw	r30, r28
     cd6:	e0 56       	subi	r30, 0x60	; 96
     cd8:	fd 4d       	sbci	r31, 0xDD	; 221
     cda:	80 81       	ld	r24, Z
     cdc:	85 ff       	sbrs	r24, 5
     cde:	11 c0       	rjmp	.+34     	; 0xd02 <CheckStartCondition+0x92>
			{	 //!JB
				if (!StartActive[Module])
     ce0:	fe 01       	movw	r30, r28
     ce2:	ec 56       	subi	r30, 0x6C	; 108
     ce4:	f4 4d       	sbci	r31, 0xD4	; 212
     ce6:	80 81       	ld	r24, Z
     ce8:	81 11       	cpse	r24, r1
     cea:	6a c0       	rjmp	.+212    	; 0xdc0 <CheckStartCondition+0x150>
				{
					StartControl(Module,1);
     cec:	61 e0       	ldi	r22, 0x01	; 1
     cee:	81 2f       	mov	r24, r17
     cf0:	0e 94 92 05 	call	0xb24	; 0xb24 <StartControl>
					StartActive[Module] = 1;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	fe 01       	movw	r30, r28
     cf8:	ec 56       	subi	r30, 0x6C	; 108
     cfa:	f4 4d       	sbci	r31, 0xD4	; 212
     cfc:	80 83       	st	Z, r24
				}
				StartOn = 1;
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	66 c0       	rjmp	.+204    	; 0xdce <CheckStartCondition+0x15e>
			}
			else
			{
				StartControl(Module,0);
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	81 2f       	mov	r24, r17
     d06:	0e 94 92 05 	call	0xb24	; 0xb24 <StartControl>
				StartActive[Module] = 0;
     d0a:	fe 01       	movw	r30, r28
     d0c:	ec 56       	subi	r30, 0x6C	; 108
     d0e:	f4 4d       	sbci	r31, 0xD4	; 212
     d10:	10 82       	st	Z, r1
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
	unsigned char StartOn = 0;
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	5c c0       	rjmp	.+184    	; 0xdce <CheckStartCondition+0x15e>
				StartActive[Module] = 0;
			}
		}
		else if  ((ConsoleModuleSettings[Module][STARTON]) && (!(ConsoleModuleSettings[Module][STARTFADER])))
		{
			if (ConsoleFunctionData[Module]&ON_LED)
     d16:	fe 01       	movw	r30, r28
     d18:	e0 56       	subi	r30, 0x60	; 96
     d1a:	fd 4d       	sbci	r31, 0xDD	; 221
     d1c:	80 81       	ld	r24, Z
     d1e:	85 ff       	sbrs	r24, 5
     d20:	11 c0       	rjmp	.+34     	; 0xd44 <CheckStartCondition+0xd4>
			{
				if (!StartActive[Module])
     d22:	fe 01       	movw	r30, r28
     d24:	ec 56       	subi	r30, 0x6C	; 108
     d26:	f4 4d       	sbci	r31, 0xD4	; 212
     d28:	80 81       	ld	r24, Z
     d2a:	81 11       	cpse	r24, r1
     d2c:	4b c0       	rjmp	.+150    	; 0xdc4 <CheckStartCondition+0x154>
				{
					StartControl(Module,1);
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	81 2f       	mov	r24, r17
     d32:	0e 94 92 05 	call	0xb24	; 0xb24 <StartControl>
					StartActive[Module] = 1;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	fe 01       	movw	r30, r28
     d3a:	ec 56       	subi	r30, 0x6C	; 108
     d3c:	f4 4d       	sbci	r31, 0xD4	; 212
     d3e:	80 83       	st	Z, r24
				}
				StartOn = 1;
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	45 c0       	rjmp	.+138    	; 0xdce <CheckStartCondition+0x15e>
			}
			else
			{
				StartControl(Module,0);
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	81 2f       	mov	r24, r17
     d48:	0e 94 92 05 	call	0xb24	; 0xb24 <StartControl>
				StartActive[Module] = 0;
     d4c:	fe 01       	movw	r30, r28
     d4e:	ec 56       	subi	r30, 0x6C	; 108
     d50:	f4 4d       	sbci	r31, 0xD4	; 212
     d52:	10 82       	st	Z, r1
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
	unsigned char StartOn = 0;
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	3b c0       	rjmp	.+118    	; 0xdce <CheckStartCondition+0x15e>
			{
				StartControl(Module,0);
				StartActive[Module] = 0;
			}
		}
		else if  ((!ConsoleModuleSettings[Module][STARTON]) && (ConsoleModuleSettings[Module][STARTFADER]))
     d58:	8d e1       	ldi	r24, 0x1D	; 29
     d5a:	8c 9f       	mul	r24, r28
     d5c:	f0 01       	movw	r30, r0
     d5e:	8d 9f       	mul	r24, r29
     d60:	f0 0d       	add	r31, r0
     d62:	11 24       	eor	r1, r1
     d64:	e5 5e       	subi	r30, 0xE5	; 229
     d66:	f7 4c       	sbci	r31, 0xC7	; 199
     d68:	86 81       	ldd	r24, Z+6	; 0x06
     d6a:	88 23       	and	r24, r24
     d6c:	69 f1       	breq	.+90     	; 0xdc8 <CheckStartCondition+0x158>
		{
			if ((ModuleData[Module][FADERON]&0x80))
     d6e:	fe 01       	movw	r30, r28
     d70:	ee 0f       	add	r30, r30
     d72:	ff 1f       	adc	r31, r31
     d74:	ee 0f       	add	r30, r30
     d76:	ff 1f       	adc	r31, r31
     d78:	ee 0f       	add	r30, r30
     d7a:	ff 1f       	adc	r31, r31
     d7c:	e5 5f       	subi	r30, 0xF5	; 245
     d7e:	f4 4d       	sbci	r31, 0xD4	; 212
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	8c f4       	brge	.+34     	; 0xda8 <CheckStartCondition+0x138>
			{	 // !JB
				if (!StartActive[Module])
     d86:	fe 01       	movw	r30, r28
     d88:	ec 56       	subi	r30, 0x6C	; 108
     d8a:	f4 4d       	sbci	r31, 0xD4	; 212
     d8c:	80 81       	ld	r24, Z
     d8e:	81 11       	cpse	r24, r1
     d90:	1d c0       	rjmp	.+58     	; 0xdcc <CheckStartCondition+0x15c>
				{
					StartControl(Module,1);
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	81 2f       	mov	r24, r17
     d96:	0e 94 92 05 	call	0xb24	; 0xb24 <StartControl>
					StartActive[Module] = 1;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	fe 01       	movw	r30, r28
     d9e:	ec 56       	subi	r30, 0x6C	; 108
     da0:	f4 4d       	sbci	r31, 0xD4	; 212
     da2:	80 83       	st	Z, r24
				}
				StartOn = 1;
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	13 c0       	rjmp	.+38     	; 0xdce <CheckStartCondition+0x15e>
			}
			else
			{
				StartControl(Module,0);
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	81 2f       	mov	r24, r17
     dac:	0e 94 92 05 	call	0xb24	; 0xb24 <StartControl>
				StartActive[Module] = 0;
     db0:	fe 01       	movw	r30, r28
     db2:	ec 56       	subi	r30, 0x6C	; 108
     db4:	f4 4d       	sbci	r31, 0xD4	; 212
     db6:	10 82       	st	Z, r1
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
	unsigned char StartOn = 0;
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	09 c0       	rjmp	.+18     	; 0xdce <CheckStartCondition+0x15e>
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	07 c0       	rjmp	.+14     	; 0xdce <CheckStartCondition+0x15e>
				if (!StartActive[Module])
				{
					StartControl(Module,1);
					StartActive[Module] = 1;
				}
				StartOn = 1;
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	05 c0       	rjmp	.+10     	; 0xdce <CheckStartCondition+0x15e>
				if (!StartActive[Module])
				{
					StartControl(Module,1);
					StartActive[Module] = 1;
				}
				StartOn = 1;
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	03 c0       	rjmp	.+6      	; 0xdce <CheckStartCondition+0x15e>
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
	unsigned char StartOn = 0;
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	01 c0       	rjmp	.+2      	; 0xdce <CheckStartCondition+0x15e>
				if (!StartActive[Module])
				{
					StartControl(Module,1);
					StartActive[Module] = 1;
				}
				StartOn = 1;
     dcc:	91 e0       	ldi	r25, 0x01	; 1
				StartControl(Module,0);
				StartActive[Module] = 0;
			}
		}
	}
	if (ConsoleModuleSettings[Module][STARTCUE])
     dce:	8d e1       	ldi	r24, 0x1D	; 29
     dd0:	8c 9f       	mul	r24, r28
     dd2:	f0 01       	movw	r30, r0
     dd4:	8d 9f       	mul	r24, r29
     dd6:	f0 0d       	add	r31, r0
     dd8:	11 24       	eor	r1, r1
     dda:	e5 5e       	subi	r30, 0xE5	; 229
     ddc:	f7 4c       	sbci	r31, 0xC7	; 199
     dde:	80 85       	ldd	r24, Z+8	; 0x08
     de0:	88 23       	and	r24, r24
     de2:	c1 f0       	breq	.+48     	; 0xe14 <CheckStartCondition+0x1a4>
	{
		if (ConsoleFunctionData[Module]&CUE_FUNCTION)
     de4:	fe 01       	movw	r30, r28
     de6:	e0 56       	subi	r30, 0x60	; 96
     de8:	fd 4d       	sbci	r31, 0xDD	; 221
     dea:	80 81       	ld	r24, Z
     dec:	82 ff       	sbrs	r24, 2
     dee:	09 c0       	rjmp	.+18     	; 0xe02 <CheckStartCondition+0x192>
		{
			StartControl(Module,1);
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	81 2f       	mov	r24, r17
     df4:	0e 94 92 05 	call	0xb24	; 0xb24 <StartControl>
			StartActive[Module] = 1;
     df8:	cc 56       	subi	r28, 0x6C	; 108
     dfa:	d4 4d       	sbci	r29, 0xD4	; 212
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	88 83       	st	Y, r24
     e00:	09 c0       	rjmp	.+18     	; 0xe14 <CheckStartCondition+0x1a4>
		}
		else if (!StartOn)
     e02:	91 11       	cpse	r25, r1
     e04:	07 c0       	rjmp	.+14     	; 0xe14 <CheckStartCondition+0x1a4>
		{
			StartControl(Module,0);
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	81 2f       	mov	r24, r17
     e0a:	0e 94 92 05 	call	0xb24	; 0xb24 <StartControl>
			StartActive[Module] = 0;
     e0e:	cc 56       	subi	r28, 0x6C	; 108
     e10:	d4 4d       	sbci	r29, 0xD4	; 212
     e12:	18 82       	st	Y, r1
		}
	}
}
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	08 95       	ret

00000e1c <SetConsoleData>:

/*****************************************************************************************************
* SetConsoleData aansturen van de LEDS en module instellingen audio routing  en REMOTE en START                                             *
******************************************************************************************************/
void SetConsoleData()
{
     e1c:	4f 92       	push	r4
     e1e:	5f 92       	push	r5
     e20:	7f 92       	push	r7
     e22:	8f 92       	push	r8
     e24:	9f 92       	push	r9
     e26:	af 92       	push	r10
     e28:	bf 92       	push	r11
     e2a:	cf 92       	push	r12
     e2c:	df 92       	push	r13
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
	
	// Volgens mij is dit hieronder voor de MASTER MODULE
	for (cntBit=0; cntBit<8; cntBit++)	// 8 bits
	{
		//DATA1 = ConsoleFunctionData[16]&(0x80>>cntBit);   // AND de data met 1000 0000 . Data staat in :   ConsoleFunctionData[16]
		if (ConsoleFunctionData[16]&(0x80>>cntBit))
     e3e:	00 ea       	ldi	r16, 0xA0	; 160
     e40:	12 e2       	ldi	r17, 0x22	; 34
     e42:	68 94       	set
     e44:	ee 24       	eor	r14, r14
     e46:	e7 f8       	bld	r14, 7
     e48:	f1 2c       	mov	r15, r1
			PORTC_OUTSET = DATA1;
		else
			PORTC_OUTCLR = DATA1;
     e4a:	a6 e4       	ldi	r26, 0x46	; 70
     e4c:	b6 e0       	ldi	r27, 0x06	; 6
     e4e:	78 e0       	ldi	r23, 0x08	; 8
	// Volgens mij is dit hieronder voor de MASTER MODULE
	for (cntBit=0; cntBit<8; cntBit++)	// 8 bits
	{
		//DATA1 = ConsoleFunctionData[16]&(0x80>>cntBit);   // AND de data met 1000 0000 . Data staat in :   ConsoleFunctionData[16]
		if (ConsoleFunctionData[16]&(0x80>>cntBit))
			PORTC_OUTSET = DATA1;
     e50:	e5 e4       	ldi	r30, 0x45	; 69
     e52:	f6 e0       	ldi	r31, 0x06	; 6
		else
			PORTC_OUTCLR = DATA1;
		
		PORTC_OUTSET = CLK1;
     e54:	60 e1       	ldi	r22, 0x10	; 16
	
	// Volgens mij is dit hieronder voor de MASTER MODULE
	for (cntBit=0; cntBit<8; cntBit++)	// 8 bits
	{
		//DATA1 = ConsoleFunctionData[16]&(0x80>>cntBit);   // AND de data met 1000 0000 . Data staat in :   ConsoleFunctionData[16]
		if (ConsoleFunctionData[16]&(0x80>>cntBit))
     e56:	e8 01       	movw	r28, r16
     e58:	28 89       	ldd	r18, Y+16	; 0x10
     e5a:	42 2f       	mov	r20, r18
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	97 01       	movw	r18, r14
     e60:	08 2e       	mov	r0, r24
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <SetConsoleData+0x4c>
     e64:	35 95       	asr	r19
     e66:	27 95       	ror	r18
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <SetConsoleData+0x48>
     e6c:	24 23       	and	r18, r20
     e6e:	35 23       	and	r19, r21
     e70:	23 2b       	or	r18, r19
     e72:	11 f0       	breq	.+4      	; 0xe78 <SetConsoleData+0x5c>
			PORTC_OUTSET = DATA1;
     e74:	70 83       	st	Z, r23
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <SetConsoleData+0x5e>
		else
			PORTC_OUTCLR = DATA1;
     e78:	7c 93       	st	X, r23
		
		PORTC_OUTSET = CLK1;
     e7a:	60 83       	st	Z, r22
		//CLK2 = 1;
		for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);		// Wacht
		//CLK1 = 0;
		PORTC_OUTCLR = CLK1;
     e7c:	6c 93       	st	X, r22
     e7e:	01 96       	adiw	r24, 0x01	; 1
void SetConsoleData()
{
	unsigned char cntByte, cntBit;  // byte   bits
	
	// Volgens mij is dit hieronder voor de MASTER MODULE
	for (cntBit=0; cntBit<8; cntBit++)	// 8 bits
     e80:	88 30       	cpi	r24, 0x08	; 8
     e82:	91 05       	cpc	r25, r1
     e84:	41 f7       	brne	.-48     	; 0xe56 <SetConsoleData+0x3a>
     e86:	64 e0       	ldi	r22, 0x04	; 4
     e88:	7a e3       	ldi	r23, 0x3A	; 58
     e8a:	0f 2e       	mov	r0, r31
     e8c:	f0 ea       	ldi	r31, 0xA0	; 160
     e8e:	4f 2e       	mov	r4, r31
     e90:	f2 e2       	ldi	r31, 0x22	; 34
     e92:	5f 2e       	mov	r5, r31
     e94:	f0 2d       	mov	r31, r0
     e96:	0f 2e       	mov	r0, r31
     e98:	fc ef       	ldi	r31, 0xFC	; 252
     e9a:	af 2e       	mov	r10, r31
     e9c:	f9 e3       	ldi	r31, 0x39	; 57
     e9e:	bf 2e       	mov	r11, r31
     ea0:	f0 2d       	mov	r31, r0
				
				//DATA2 = ConsoleFunctionData[15-cntByte]&(0x01<<cntBit);
				if ( ConsoleFunctionData[15-cntByte]&(0x01<<cntBit) )
					PORTC_OUTSET = DATA2;
				else
					PORTC_OUTCLR = DATA2;				
     ea2:	a6 e4       	ldi	r26, 0x46	; 70
     ea4:	b6 e0       	ldi	r27, 0x06	; 6
     ea6:	68 94       	set
     ea8:	ee 24       	eor	r14, r14
     eaa:	e5 f8       	bld	r14, 5
				else
					PORTC_OUTCLR = DATA1;
				
				//DATA2 = ConsoleFunctionData[15-cntByte]&(0x01<<cntBit);
				if ( ConsoleFunctionData[15-cntByte]&(0x01<<cntBit) )
					PORTC_OUTSET = DATA2;
     eac:	e5 e4       	ldi	r30, 0x45	; 69
     eae:	f6 e0       	ldi	r31, 0x06	; 6
			{
				//DATA1 = ConsoleFunctionData[7-cntByte]&(0x01<<cntBit);        // ConsoleFunctionData
				if ( ConsoleFunctionData[7-cntByte]&(0x01<<cntBit) )
					PORTC_OUTSET = DATA1;
				else
					PORTC_OUTCLR = DATA1;
     eb0:	68 94       	set
     eb2:	ff 24       	eor	r15, r15
     eb4:	f3 f8       	bld	r15, 3
	// Overige CONSOLE MODULE 1-16
	for (cntByte=0; cntByte<8; cntByte++)
	{
		for (cntBit=0; cntBit<6; cntBit++)								// 8 * 6 = 48
		{
			if ((OperatingMode==MODULEMODE) && ((0x01<<cntBit)&CUE_LED))   // Als betreffende module AND CUE_LED=1
     eb6:	68 94       	set
     eb8:	cc 24       	eor	r12, r12
     eba:	c3 f8       	bld	r12, 3
     ebc:	d1 2c       	mov	r13, r1
					PORTC_OUTSET = DATA2;
				else
					PORTC_OUTCLR = DATA2;				
			}
			//CLK1 = 1;
			PORTC_OUTSET = CLK1;
     ebe:	00 e1       	ldi	r16, 0x10	; 16
			//CLK2 = 1;
			PORTC_OUTSET = CLK2;
     ec0:	10 e4       	ldi	r17, 0x40	; 64
     ec2:	57 c0       	rjmp	.+174    	; 0xf72 <SetConsoleData+0x156>
	// Overige CONSOLE MODULE 1-16
	for (cntByte=0; cntByte<8; cntByte++)
	{
		for (cntBit=0; cntBit<6; cntBit++)								// 8 * 6 = 48
		{
			if ((OperatingMode==MODULEMODE) && ((0x01<<cntBit)&CUE_LED))   // Als betreffende module AND CUE_LED=1
     ec4:	20 91 23 21 	lds	r18, 0x2123	; 0x802123 <OperatingMode>
     ec8:	21 30       	cpi	r18, 0x01	; 1
     eca:	31 f5       	brne	.+76     	; 0xf18 <SetConsoleData+0xfc>
     ecc:	78 2e       	mov	r7, r24
     ece:	96 01       	movw	r18, r12
     ed0:	08 2e       	mov	r0, r24
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <SetConsoleData+0xbc>
     ed4:	35 95       	asr	r19
     ed6:	27 95       	ror	r18
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <SetConsoleData+0xb8>
     edc:	20 ff       	sbrs	r18, 0
     ede:	1c c0       	rjmp	.+56     	; 0xf18 <SetConsoleData+0xfc>
			{
				//DATA1 = ShowFunctionData[7-cntByte]&(0x01<<cntBit);						// ShowFunctionData
				if ( ShowFunctionData[7-cntByte]&(0x01<<cntBit) )
     ee0:	eb 01       	movw	r28, r22
     ee2:	2f 81       	ldd	r18, Y+7	; 0x07
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	08 2e       	mov	r0, r24
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <SetConsoleData+0xd2>
     eea:	35 95       	asr	r19
     eec:	27 95       	ror	r18
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <SetConsoleData+0xce>
     ef2:	20 ff       	sbrs	r18, 0
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <SetConsoleData+0xde>
					PORTC_OUTSET = DATA1;
     ef6:	f0 82       	st	Z, r15
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <SetConsoleData+0xe0>
				else
					PORTC_OUTCLR = DATA1;
     efa:	fc 92       	st	X, r15
				
				//DATA2 = ShowFunctionData[15-cntByte]&(0x01<<cntBit);
				if ( ShowFunctionData[15-cntByte]&(0x01<<cntBit) )
     efc:	e4 01       	movw	r28, r8
     efe:	2f 85       	ldd	r18, Y+15	; 0x0f
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <SetConsoleData+0xec>
     f04:	35 95       	asr	r19
     f06:	27 95       	ror	r18
     f08:	7a 94       	dec	r7
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <SetConsoleData+0xe8>
     f0c:	20 ff       	sbrs	r18, 0
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <SetConsoleData+0xf8>
					PORTC_OUTSET = DATA2;
     f10:	e0 82       	st	Z, r14
     f12:	1e c0       	rjmp	.+60     	; 0xf50 <SetConsoleData+0x134>
				else
					PORTC_OUTCLR = DATA2;
     f14:	ec 92       	st	X, r14
     f16:	1c c0       	rjmp	.+56     	; 0xf50 <SetConsoleData+0x134>
			}
			else
			{
				//DATA1 = ConsoleFunctionData[7-cntByte]&(0x01<<cntBit);        // ConsoleFunctionData
				if ( ConsoleFunctionData[7-cntByte]&(0x01<<cntBit) )
     f18:	78 2e       	mov	r7, r24
     f1a:	e2 01       	movw	r28, r4
     f1c:	2f 81       	ldd	r18, Y+7	; 0x07
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	08 2e       	mov	r0, r24
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <SetConsoleData+0x10c>
     f24:	35 95       	asr	r19
     f26:	27 95       	ror	r18
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <SetConsoleData+0x108>
     f2c:	20 ff       	sbrs	r18, 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <SetConsoleData+0x118>
					PORTC_OUTSET = DATA1;
     f30:	f0 82       	st	Z, r15
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <SetConsoleData+0x11a>
				else
					PORTC_OUTCLR = DATA1;
     f34:	fc 92       	st	X, r15
				
				//DATA2 = ConsoleFunctionData[15-cntByte]&(0x01<<cntBit);
				if ( ConsoleFunctionData[15-cntByte]&(0x01<<cntBit) )
     f36:	ea 01       	movw	r28, r20
     f38:	2f 85       	ldd	r18, Y+15	; 0x0f
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <SetConsoleData+0x126>
     f3e:	35 95       	asr	r19
     f40:	27 95       	ror	r18
     f42:	7a 94       	dec	r7
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <SetConsoleData+0x122>
     f46:	20 ff       	sbrs	r18, 0
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <SetConsoleData+0x132>
					PORTC_OUTSET = DATA2;
     f4a:	e0 82       	st	Z, r14
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <SetConsoleData+0x134>
				else
					PORTC_OUTCLR = DATA2;				
     f4e:	ec 92       	st	X, r14
			}
			//CLK1 = 1;
			PORTC_OUTSET = CLK1;
     f50:	00 83       	st	Z, r16
			//CLK2 = 1;
			PORTC_OUTSET = CLK2;
     f52:	10 83       	st	Z, r17
			for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);		// Wacht
			//CLK1 = 0;
			PORTC_OUTCLR = CLK1;
     f54:	0c 93       	st	X, r16
			//CLK2 = 0;
			PORTC_OUTCLR = CLK2;
     f56:	1c 93       	st	X, r17
     f58:	01 96       	adiw	r24, 0x01	; 1
	}

	// Overige CONSOLE MODULE 1-16
	for (cntByte=0; cntByte<8; cntByte++)
	{
		for (cntBit=0; cntBit<6; cntBit++)								// 8 * 6 = 48
     f5a:	86 30       	cpi	r24, 0x06	; 6
     f5c:	91 05       	cpc	r25, r1
     f5e:	09 f0       	breq	.+2      	; 0xf62 <SetConsoleData+0x146>
     f60:	b1 cf       	rjmp	.-158    	; 0xec4 <SetConsoleData+0xa8>
     f62:	61 50       	subi	r22, 0x01	; 1
     f64:	71 09       	sbc	r23, r1
     f66:	d1 e0       	ldi	r29, 0x01	; 1
     f68:	4d 1a       	sub	r4, r29
     f6a:	51 08       	sbc	r5, r1
		PORTC_OUTCLR = CLK1;
	
	}

	// Overige CONSOLE MODULE 1-16
	for (cntByte=0; cntByte<8; cntByte++)
     f6c:	a6 16       	cp	r10, r22
     f6e:	b7 06       	cpc	r11, r23
     f70:	29 f0       	breq	.+10     	; 0xf7c <SetConsoleData+0x160>

/*****************************************************************************************************
* SetConsoleData aansturen van de LEDS en module instellingen audio routing  en REMOTE en START                                             *
******************************************************************************************************/
void SetConsoleData()
{
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	a2 01       	movw	r20, r4
     f78:	4b 01       	movw	r8, r22
     f7a:	a4 cf       	rjmp	.-184    	; 0xec4 <SetConsoleData+0xa8>
			PORTC_OUTCLR = CLK1;
			//CLK2 = 0;
			PORTC_OUTCLR = CLK2;
		}
	}
	PORTB_OUTCLR = STRB1;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7de626>
	for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);
	PORTB_OUTSET = STRB1;
     f82:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7de625>
	//STRB2 = 0;
	//for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);
	//STRB2 = 1;
	PORTC_OUTCLR = STRB2;
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
     f8c:	95 e0       	ldi	r25, 0x05	; 5
     f8e:	90 93 09 25 	sts	0x2509, r25	; 0x802509 <Wait>
	for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);
	PORTC_OUTSET = STRB2;	
     f92:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	bf 90       	pop	r11
     fa8:	af 90       	pop	r10
     faa:	9f 90       	pop	r9
     fac:	8f 90       	pop	r8
     fae:	7f 90       	pop	r7
     fb0:	5f 90       	pop	r5
     fb2:	4f 90       	pop	r4
     fb4:	08 95       	ret

00000fb6 <CheckCUEByRemoteMIC>:




void CheckCUEByRemoteMIC(void)
{
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	e0 e7       	ldi	r30, 0x70	; 112
     fbc:	f2 e2       	ldi	r31, 0x22	; 34
     fbe:	a2 e1       	ldi	r26, 0x12	; 18
     fc0:	bb e2       	ldi	r27, 0x2B	; 43
     fc2:	c7 e0       	ldi	r28, 0x07	; 7
     fc4:	d2 e3       	ldi	r29, 0x32	; 50
     fc6:	20 e8       	ldi	r18, 0x80	; 128
     fc8:	32 e2       	ldi	r19, 0x22	; 34
	char Status = 0;
     fca:	90 e0       	ldi	r25, 0x00	; 0
	int cntModule;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		if  (ModuleType[cntModule]==TRIPLE)
     fcc:	81 91       	ld	r24, Z+
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	29 f4       	brne	.+10     	; 0xfdc <CheckCUEByRemoteMIC+0x26>
		{
			if (ModuleData[cntModule][MIC_RING]&0x80)
     fd2:	8c 91       	ld	r24, X
     fd4:	88 23       	and	r24, r24
     fd6:	14 f4       	brge	.+4      	; 0xfdc <CheckCUEByRemoteMIC+0x26>
			{
				Status |= CUEByRemoteMIC[cntModule];
     fd8:	88 81       	ld	r24, Y
     fda:	98 2b       	or	r25, r24
     fdc:	18 96       	adiw	r26, 0x08	; 8
     fde:	21 96       	adiw	r28, 0x01	; 1
void CheckCUEByRemoteMIC(void)
{
	char Status = 0;
	int cntModule;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     fe0:	e2 17       	cp	r30, r18
     fe2:	f3 07       	cpc	r31, r19
     fe4:	99 f7       	brne	.-26     	; 0xfcc <CheckCUEByRemoteMIC+0x16>
				Status |= CUEByRemoteMIC[cntModule];
			}
		}
	}

	SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
     fe6:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     fea:	ae 2f       	mov	r26, r30
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ab 53       	subi	r26, 0x3B	; 59
     ff0:	bc 4d       	sbci	r27, 0xDC	; 220
     ff2:	80 ed       	ldi	r24, 0xD0	; 208
     ff4:	8c 93       	st	X, r24
	SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_CUE_BY_MIC_REMOTE;
     ff6:	a1 e0       	ldi	r26, 0x01	; 1
     ff8:	ae 0f       	add	r26, r30
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ab 53       	subi	r26, 0x3B	; 59
     ffe:	bc 4d       	sbci	r27, 0xDC	; 220
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	8c 93       	st	X, r24
	SerialBufferOut[SerialBufferOutPtrTop++] = Status;
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	8e 0f       	add	r24, r30
    1008:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    100c:	ee 5f       	subi	r30, 0xFE	; 254
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	eb 53       	subi	r30, 0x3B	; 59
    1012:	fc 4d       	sbci	r31, 0xDC	; 220
    1014:	90 83       	st	Z, r25
}
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	08 95       	ret

0000101c <GetModuleNrFromTelcoNr>:
			}
		}
	}

	return ModuleNr;
}
    101c:	8f ef       	ldi	r24, 0xFF	; 255
    101e:	08 95       	ret

00001020 <CueControl>:



void CueControl()
{
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
	unsigned char cntModule;
	unsigned char CueActive=0;

	ConsoleFunctionData[16] &= MASTER_CUE_ON_FUNCTION_LED^0xFF;
    1028:	e0 ea       	ldi	r30, 0xA0	; 160
    102a:	f2 e2       	ldi	r31, 0x22	; 34
    102c:	90 89       	ldd	r25, Z+16	; 0x10
    102e:	9d 7f       	andi	r25, 0xFD	; 253
    1030:	90 8b       	std	Z+16, r25	; 0x10
    1032:	8f 01       	movw	r16, r30
    1034:	a0 e7       	ldi	r26, 0x70	; 112
    1036:	b2 e2       	ldi	r27, 0x22	; 34
    1038:	20 eb       	ldi	r18, 0xB0	; 176
    103a:	32 e2       	ldi	r19, 0x22	; 34


void CueControl()
{
	unsigned char cntModule;
	unsigned char CueActive=0;
    103c:	40 e0       	ldi	r20, 0x00	; 0

	ConsoleFunctionData[16] &= MASTER_CUE_ON_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		if ((ConsoleFunctionData[cntModule]&CUE_FUNCTION) && ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO)))
    103e:	81 91       	ld	r24, Z+
    1040:	82 ff       	sbrs	r24, 2
    1042:	05 c0       	rjmp	.+10     	; 0x104e <CueControl+0x2e>
    1044:	8c 91       	ld	r24, X
    1046:	81 50       	subi	r24, 0x01	; 1
    1048:	82 30       	cpi	r24, 0x02	; 2
    104a:	08 f4       	brcc	.+2      	; 0x104e <CueControl+0x2e>
		CueActive = 1;
    104c:	41 e0       	ldi	r20, 0x01	; 1
    104e:	11 96       	adiw	r26, 0x01	; 1
{
	unsigned char cntModule;
	unsigned char CueActive=0;

	ConsoleFunctionData[16] &= MASTER_CUE_ON_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1050:	e2 17       	cp	r30, r18
    1052:	f3 07       	cpc	r31, r19
    1054:	a1 f7       	brne	.-24     	; 0x103e <CueControl+0x1e>
	{
		if ((ConsoleFunctionData[cntModule]&CUE_FUNCTION) && ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO)))
		CueActive = 1;
	}

	if (DirectorTBCUEBussActive != 0)
    1056:	80 91 17 32 	lds	r24, 0x3217	; 0x803217 <DirectorTBCUEBussActive>
    105a:	81 11       	cpse	r24, r1
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <CueControl+0x42>
	{
		CueActive = 1;
	}

	if ((CueActive) && (ConsoleMasterSettings[CUETOCRM]))
    105e:	44 23       	and	r20, r20
    1060:	39 f0       	breq	.+14     	; 0x1070 <CueControl+0x50>
    1062:	80 91 8f 2b 	lds	r24, 0x2B8F	; 0x802b8f <ConsoleMasterSettings+0x1>
    1066:	88 23       	and	r24, r24
    1068:	19 f0       	breq	.+6      	; 0x1070 <CueControl+0x50>
	ConsoleFunctionData[16] |= MASTER_CUE_ON_FUNCTION_LED;
    106a:	92 60       	ori	r25, 0x02	; 2
    106c:	90 93 b0 22 	sts	0x22B0, r25	; 0x8022b0 <ConsoleFunctionData+0x10>

	//Check auto communication
	ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    1070:	e0 ea       	ldi	r30, 0xA0	; 160
    1072:	f2 e2       	ldi	r31, 0x22	; 34
    1074:	80 89       	ldd	r24, Z+16	; 0x10
    1076:	87 7f       	andi	r24, 0xF7	; 247
    1078:	80 8b       	std	Z+16, r24	; 0x10
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		if (ConsoleFunctionData[cntModule]&CUE_LED)
		{
			if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    107a:	40 91 90 2b 	lds	r20, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    107e:	e2 e1       	ldi	r30, 0x12	; 18
    1080:	fb e2       	ldi	r31, 0x2B	; 43
    1082:	a9 e2       	ldi	r26, 0x29	; 41
    1084:	b8 e3       	ldi	r27, 0x38	; 56
    1086:	22 e9       	ldi	r18, 0x92	; 146
    1088:	3b e2       	ldi	r19, 0x2B	; 43
			{
				ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    108a:	60 ea       	ldi	r22, 0xA0	; 160
    108c:	72 e2       	ldi	r23, 0x22	; 34

	//Check auto communication
	ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		if (ConsoleFunctionData[cntModule]&CUE_LED)
    108e:	e8 01       	movw	r28, r16
    1090:	89 91       	ld	r24, Y+
    1092:	8e 01       	movw	r16, r28
    1094:	83 ff       	sbrs	r24, 3
    1096:	0e c0       	rjmp	.+28     	; 0x10b4 <CueControl+0x94>
		{
			if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    1098:	90 81       	ld	r25, Z
    109a:	99 23       	and	r25, r25
    109c:	5c f4       	brge	.+22     	; 0x10b4 <CueControl+0x94>
    109e:	9c 91       	ld	r25, X
    10a0:	99 23       	and	r25, r25
    10a2:	41 f0       	breq	.+16     	; 0x10b4 <CueControl+0x94>
    10a4:	84 ff       	sbrs	r24, 4
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <CueControl+0x94>
    10a8:	44 23       	and	r20, r20
    10aa:	21 f0       	breq	.+8      	; 0x10b4 <CueControl+0x94>
			{
				ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    10ac:	eb 01       	movw	r28, r22
    10ae:	88 89       	ldd	r24, Y+16	; 0x10
    10b0:	88 60       	ori	r24, 0x08	; 8
    10b2:	88 8b       	std	Y+16, r24	; 0x10
    10b4:	38 96       	adiw	r30, 0x08	; 8
    10b6:	5d 96       	adiw	r26, 0x1d	; 29
	if ((CueActive) && (ConsoleMasterSettings[CUETOCRM]))
	ConsoleFunctionData[16] |= MASTER_CUE_ON_FUNCTION_LED;

	//Check auto communication
	ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    10b8:	e2 17       	cp	r30, r18
    10ba:	f3 07       	cpc	r31, r19
    10bc:	41 f7       	brne	.-48     	; 0x108e <CueControl+0x6e>
			}
		}
	}
	CheckTBMic();

	SendSerialData = 1;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	08 95       	ret

000010ce <Init>:
//########################################################################################################################################
//########################################################################################################################################
//########################################################################################################################################

void Init(void)
{	
    10ce:	5f 92       	push	r5
    10d0:	6f 92       	push	r6
    10d2:	7f 92       	push	r7
    10d4:	8f 92       	push	r8
    10d6:	9f 92       	push	r9
    10d8:	af 92       	push	r10
    10da:	bf 92       	push	r11
    10dc:	cf 92       	push	r12
    10de:	df 92       	push	r13
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ec:	83 ef       	ldi	r24, 0xF3	; 243
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <Init+0x22>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <Init+0x28>
    10f6:	00 00       	nop
	unsigned char ClearMem = 0;
	
	_delay_ms(2);
	//############## PORT DIRECTION REGISTERS ######################
	
	PORTA_DIRSET = 0b01111111;		// Initialise port als uitgang LCD DISPLAY
    10f8:	e1 e0       	ldi	r30, 0x01	; 1
    10fa:	f6 e0       	ldi	r31, 0x06	; 6
    10fc:	8f e7       	ldi	r24, 0x7F	; 127
    10fe:	80 83       	st	Z, r24
	PORTA_DIRSET = 0b10000000;      // RST_CC uitgang even als test pin
    1100:	80 e8       	ldi	r24, 0x80	; 128
    1102:	80 83       	st	Z, r24
	
	
	PORTR_DIRCLR = 0b00000011;		// Initialise port als ingang KNOPJES INLEZEN  ( SW1 t/m SW2   Zie orginele schema muxboard airlb6a )
    1104:	83 e0       	ldi	r24, 0x03	; 3
    1106:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <__TEXT_REGION_LENGTH__+0x7de7e2>
	PORTD_DIRCLR = 0b11111100;		// Initialise port als ingang KNOPJES INLEZEN  ( SW2 t/m SW7   Zie orginele schema muxboard airlb6a )
    110a:	9c ef       	ldi	r25, 0xFC	; 252
    110c:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <__TEXT_REGION_LENGTH__+0x7de662>


	PORTB_DIRSET = 0b00001110;		// Initialise port als uitgang KNOPJES SCANNEN  ( AS3 AS0 en AS1  Zie orginele schema muxboard airlb6a )
    1110:	a1 e2       	ldi	r26, 0x21	; 33
    1112:	b6 e0       	ldi	r27, 0x06	; 6
    1114:	9e e0       	ldi	r25, 0x0E	; 14
    1116:	9c 93       	st	X, r25
	PORTC_DIRSET = 0b00000101;		// Initialise port als uitgang KNOPJES SCANNEN  ( AS4 en AS2      Zie orginele schema muxboard airlb6a )
    1118:	c1 e4       	ldi	r28, 0x41	; 65
    111a:	d6 e0       	ldi	r29, 0x06	; 6
    111c:	95 e0       	ldi	r25, 0x05	; 5
    111e:	98 83       	st	Y, r25

	PORTE_DIRCLR = 0b00000100;      //  Initialise port als ingang   RX RS232
    1120:	e2 e8       	ldi	r30, 0x82	; 130
    1122:	f6 e0       	ldi	r31, 0x06	; 6
    1124:	94 e0       	ldi	r25, 0x04	; 4
    1126:	90 83       	st	Z, r25
	PORTE_DIRSET = 0b00001000;	    //  Initialise port als uitgang  TX RS232
    1128:	98 e0       	ldi	r25, 0x08	; 8
    112a:	90 93 81 06 	sts	0x0681, r25	; 0x800681 <__TEXT_REGION_LENGTH__+0x7de681>

	PORTC_DIRSET = 0b01111010;	    // Initialise port als uitgang LEDJES AANSTUREN  CLK2 DATA2 CLK1 DATA1 en STRB2
    112e:	9a e7       	ldi	r25, 0x7A	; 122
    1130:	98 83       	st	Y, r25
	PORTB_DIRSET = 0b00000001;	    // Initialise port als uitgang LEDJES AANSTUREN  STRB1 
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	9c 93       	st	X, r25
	
		PORTE_DIRCLR = 0b00000011;      //  Initialise port als ingang   IIC
    1136:	80 83       	st	Z, r24
	
	
	
	//##############################################################	
	
	SetupSIO0();  // Setup Serial port	
    1138:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <SetupSIO0>
	SetupLCD();
    113c:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <SetupLCD>
	//////-----------------------------------------------------------------------------------------------


	unsigned char n,s;

	s=SREG;
    1140:	9f b7       	in	r25, 0x3f	; 63


	// Internal 2 MHz RC oscillator initialization
	// Enable the internal 2 MHz RC oscillator
	OSC.CTRL|=OSC_RC2MEN_bm;
    1142:	e0 e5       	ldi	r30, 0x50	; 80
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	81 60       	ori	r24, 0x01	; 1
    114a:	80 83       	st	Z, r24
	// Disable the auto-calibration of the internal 2 MHz RC oscillator
	DFLLRC2M.CTRL&= ~DFLL_ENABLE_bm;
    114c:	e8 e6       	ldi	r30, 0x68	; 104
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8e 7f       	andi	r24, 0xFE	; 254
    1154:	80 83       	st	Z, r24

	// Wait for the internal 2 MHz RC oscillator to stabilize
	while ((OSC.STATUS & OSC_RC2MRDY_bm)==0);
    1156:	e0 e5       	ldi	r30, 0x50	; 80
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	81 81       	ldd	r24, Z+1	; 0x01
    115c:	80 ff       	sbrs	r24, 0
    115e:	fd cf       	rjmp	.-6      	; 0x115a <Init+0x8c>
	// PLL clock source: 2 MHz Internal Osc.
	// PLL multiplication factor: 18
	// PLL output/2: Off
	// PLL frequency: 36,000000 MHz
	// Set the PLL clock source and multiplication factor
	n=(OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLDIV_bm | OSC_PLLFAC_gm))) |
    1160:	e0 e5       	ldi	r30, 0x50	; 80
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	85 81       	ldd	r24, Z+5	; 0x05
	OSC_PLLSRC_RC2M_gc | (0<<OSC_PLLDIV_bp) | 18;
	CCP=CCP_IOREG_gc;
    1166:	28 ed       	ldi	r18, 0xD8	; 216
    1168:	24 bf       	out	0x34, r18	; 52
	OSC.PLLCTRL=n;
    116a:	82 e1       	ldi	r24, 0x12	; 18
    116c:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL|=OSC_PLLEN_bm;
    116e:	80 81       	ld	r24, Z
    1170:	80 61       	ori	r24, 0x10	; 16
    1172:	80 83       	st	Z, r24
	// System Clock prescalers B & C division factors: B:1, C:1
	// ClkPer4: 9000,000 kHz
	// ClkPer2: 9000,000 kHz
	// ClkPer:  9000,000 kHz
	// ClkCPU:  9000,000 kHz
	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
    1174:	e0 e4       	ldi	r30, 0x40	; 64
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	81 81       	ldd	r24, Z+1	; 0x01
    117a:	80 78       	andi	r24, 0x80	; 128
    117c:	8c 60       	ori	r24, 0x0C	; 12
	CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc;
	CCP=CCP_IOREG_gc;
    117e:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
    1180:	81 83       	std	Z+1, r24	; 0x01

	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
    1182:	e0 e5       	ldi	r30, 0x50	; 80
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	81 81       	ldd	r24, Z+1	; 0x01
    1188:	84 ff       	sbrs	r24, 4
    118a:	fd cf       	rjmp	.-6      	; 0x1186 <Init+0xb8>

	// Select the system clock source: Phase Locked Loop
	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
    118c:	e0 e4       	ldi	r30, 0x40	; 64
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	88 7f       	andi	r24, 0xF8	; 248
    1194:	84 60       	ori	r24, 0x04	; 4
	CCP=CCP_IOREG_gc;
    1196:	28 ed       	ldi	r18, 0xD8	; 216
    1198:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
    119a:	80 83       	st	Z, r24

	// Disable the unused oscillators: 32 MHz, internal 32 kHz, external clock/crystal oscillator
	OSC.CTRL&= ~(OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm);
    119c:	e0 e5       	ldi	r30, 0x50	; 80
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	81 7f       	andi	r24, 0xF1	; 241
    11a4:	80 83       	st	Z, r24

	// ClkPer output disabled
	PORTCFG.CLKEVOUT&= ~(PORTCFG_CLKOUTSEL_gm | PORTCFG_CLKOUT_gm);
    11a6:	e0 eb       	ldi	r30, 0xB0	; 176
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	84 81       	ldd	r24, Z+4	; 0x04
    11ac:	80 7f       	andi	r24, 0xF0	; 240
    11ae:	84 83       	std	Z+4, r24	; 0x04
	// Restore interrupts enabled/disabled state
	SREG=s;
    11b0:	9f bf       	out	0x3f, r25	; 63
    11b2:	a3 ef       	ldi	r26, 0xF3	; 243
    11b4:	b1 e0       	ldi	r27, 0x01	; 1
    11b6:	11 97       	sbiw	r26, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <Init+0xe8>
    11ba:	00 c0       	rjmp	.+0      	; 0x11bc <Init+0xee>
    11bc:	00 00       	nop

	_delay_ms(2);	


	
	OperatingMode = NORMALMODE;
    11be:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <OperatingMode>
	//GlobalTimerActive = 1;   // willem
	DirectorTBCUEBussActive = 0;
    11c2:	10 92 17 32 	sts	0x3217, r1	; 0x803217 <DirectorTBCUEBussActive>
    11c6:	0f 2e       	mov	r0, r31
    11c8:	f0 ea       	ldi	r31, 0xA0	; 160
    11ca:	ef 2e       	mov	r14, r31
    11cc:	f2 e2       	ldi	r31, 0x22	; 34
    11ce:	ff 2e       	mov	r15, r31
    11d0:	f0 2d       	mov	r31, r0
    11d2:	a4 e0       	ldi	r26, 0x04	; 4
    11d4:	ba e3       	ldi	r27, 0x3A	; 58
    11d6:	20 eb       	ldi	r18, 0xB0	; 176
    11d8:	32 e2       	ldi	r19, 0x22	; 34
    11da:	f7 01       	movw	r30, r14
	
	//ConsoleFunctionData[0] |= 0x10;  // Even voor de Test : ConsoleFunctionData[module] |= ON_LED   LED wordt op des betreffende module aan of uit gezet plus overige functies mogelijk
	
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		ConsoleFunctionData[cntModule] = MUTE_FUNCTION;
    11dc:	80 e1       	ldi	r24, 0x10	; 16
    11de:	81 93       	st	Z+, r24
		ShowFunctionData[cntModule] = 0x00;
    11e0:	1d 92       	st	X+, r1
	//GlobalTimerActive = 1;   // willem
	DirectorTBCUEBussActive = 0;
	
	//ConsoleFunctionData[0] |= 0x10;  // Even voor de Test : ConsoleFunctionData[module] |= ON_LED   LED wordt op des betreffende module aan of uit gezet plus overige functies mogelijk
	
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    11e2:	e2 17       	cp	r30, r18
    11e4:	f3 07       	cpc	r31, r19
    11e6:	d9 f7       	brne	.-10     	; 0x11de <Init+0x110>
	{
		ConsoleFunctionData[cntModule] = MUTE_FUNCTION;
		ShowFunctionData[cntModule] = 0x00;
	}
	ConsoleFunctionData[16] = NOT_POWER_ON_CC;
    11e8:	80 e4       	ldi	r24, 0x40	; 64
    11ea:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <ConsoleFunctionData+0x10>
	
	SetConsoleData();
    11ee:	0e 94 0e 07 	call	0xe1c	; 0xe1c <SetConsoleData>
	//STRB1 = 1;
	//STRB2 = 1;
	
		
	
	OldTimeAndDate.Hours = 0;
    11f2:	ec e1       	ldi	r30, 0x1C	; 28
    11f4:	fa e3       	ldi	r31, 0x3A	; 58
    11f6:	13 82       	std	Z+3, r1	; 0x03
	OldTimeAndDate.Minutes = 0;
    11f8:	12 82       	std	Z+2, r1	; 0x02
	OldTimeAndDate.Seconds = 0;
    11fa:	11 82       	std	Z+1, r1	; 0x01
	OldTimeAndDate.Frames = 0;
    11fc:	10 82       	st	Z, r1
	TimeAndDate.Hours = 0;
    11fe:	e6 e1       	ldi	r30, 0x16	; 22
    1200:	fa e3       	ldi	r31, 0x3A	; 58
    1202:	13 82       	std	Z+3, r1	; 0x03
	TimeAndDate.Minutes = 0;
    1204:	12 82       	std	Z+2, r1	; 0x02
	TimeAndDate.Seconds = 0;
    1206:	11 82       	std	Z+1, r1	; 0x01
	TimeAndDate.Frames = 0;
    1208:	10 82       	st	Z, r1
    120a:	e6 e3       	ldi	r30, 0x36	; 54
    120c:	f2 e3       	ldi	r31, 0x32	; 50
    120e:	6b ee       	ldi	r22, 0xEB	; 235
    1210:	79 e3       	ldi	r23, 0x39	; 57
    1212:	42 eb       	ldi	r20, 0xB2	; 178
    1214:	52 e2       	ldi	r21, 0x22	; 34
    1216:	23 e1       	ldi	r18, 0x13	; 19
    1218:	31 e2       	ldi	r19, 0x21	; 33
    121a:	81 e9       	ldi	r24, 0x91	; 145
    121c:	9d e2       	ldi	r25, 0x2D	; 45
    121e:	c4 e9       	ldi	r28, 0x94	; 148
    1220:	db e2       	ldi	r29, 0x2B	; 43
    1222:	0f 2e       	mov	r0, r31
    1224:	f7 e0       	ldi	r31, 0x07	; 7
    1226:	cf 2e       	mov	r12, r31
    1228:	f2 e3       	ldi	r31, 0x32	; 50
    122a:	df 2e       	mov	r13, r31
    122c:	f0 2d       	mov	r31, r0
    122e:	06 e4       	ldi	r16, 0x46	; 70
    1230:	12 e3       	ldi	r17, 0x32	; 50
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		TimerActive[cntModule] = 0;
    1232:	11 92       	st	Z+, r1
		cntStartPuls[cntModule] = 0;
    1234:	db 01       	movw	r26, r22
    1236:	1d 92       	st	X+, r1
    1238:	bd 01       	movw	r22, r26
		cntStartFunction[cntModule] = 0;
    123a:	da 01       	movw	r26, r20
    123c:	1d 92       	st	X+, r1
    123e:	ad 01       	movw	r20, r26
		cntCueFunction[cntModule] = 0;
    1240:	d9 01       	movw	r26, r18
    1242:	1d 92       	st	X+, r1
    1244:	9d 01       	movw	r18, r26
		cntMuteFunction[cntModule] = 0;
    1246:	dc 01       	movw	r26, r24
    1248:	1d 92       	st	X+, r1
    124a:	cd 01       	movw	r24, r26
		StartActive[cntModule] = 0;
    124c:	19 92       	st	Y+, r1
		CUEByRemoteMIC[cntModule] = 0;
    124e:	d6 01       	movw	r26, r12
    1250:	1d 92       	st	X+, r1
    1252:	6d 01       	movw	r12, r26
	OldTimeAndDate.Frames = 0;
	TimeAndDate.Hours = 0;
	TimeAndDate.Minutes = 0;
	TimeAndDate.Seconds = 0;
	TimeAndDate.Frames = 0;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1254:	e0 17       	cp	r30, r16
    1256:	f1 07       	cpc	r31, r17
    1258:	61 f7       	brne	.-40     	; 0x1232 <Init+0x164>
		cntCueFunction[cntModule] = 0;
		cntMuteFunction[cntModule] = 0;
		StartActive[cntModule] = 0;
		CUEByRemoteMIC[cntModule] = 0;
	}
	GlobalTimerActive = 0;
    125a:	10 92 1b 3a 	sts	0x3A1B, r1	; 0x803a1b <GlobalTimerActive>
	TextStringPtr = 0;
    125e:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>

	SerialBufferInPtrTop = 0;
    1262:	10 92 15 3a 	sts	0x3A15, r1	; 0x803a15 <SerialBufferInPtrTop>
	SerialBufferInPtrBottom = 0;
    1266:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <SerialBufferInPtrBottom>
	SerialBufferOutPtrTop = 0;
    126a:	10 92 82 22 	sts	0x2282, r1	; 0x802282 <SerialBufferOutPtrTop>
	SerialBufferOutPtrBottom = 0;
    126e:	10 92 93 2b 	sts	0x2B93, r1	; 0x802b93 <SerialBufferOutPtrBottom>
	SerialCnt = 0;
    1272:	10 92 c4 23 	sts	0x23C4, r1	; 0x8023c4 <SerialCnt>
	SerialLength = 0;
    1276:	10 92 6e 22 	sts	0x226E, r1	; 0x80226e <SerialLength>
	SendSerialReady = 1;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	80 93 6a 22 	sts	0x226A, r24	; 0x80226a <SendSerialReady>
	
	

	

	I2CBufferInPtrTop = 0;
    1280:	10 92 80 22 	sts	0x2280, r1	; 0x802280 <I2CBufferInPtrTop>
	I2CBufferInPtrBottom = 0;
    1284:	10 92 18 32 	sts	0x3218, r1	; 0x803218 <I2CBufferInPtrBottom>
	I2CBufferOutPtrTop = 0;
    1288:	10 92 6c 22 	sts	0x226C, r1	; 0x80226c <I2CBufferOutPtrTop>
	I2CBufferOutPtrBottom = 0;
    128c:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <I2CBufferOutPtrBottom>
	I2CSendReady=1;
    1290:	80 93 8d 2b 	sts	0x2B8D, r24	; 0x802b8d <I2CSendReady>
	I2CMasterReciever = 0;
    1294:	10 92 8c 2b 	sts	0x2B8C, r1	; 0x802b8c <I2CMasterReciever>
	I2CError = 0;
    1298:	10 92 6b 22 	sts	0x226B, r1	; 0x80226b <I2CError>
	CardInserted = 0;
    129c:	10 92 6d 22 	sts	0x226D, r1	; 0x80226d <CardInserted>
	
	//SetupSIO1();
			
	SetupTimer0();
    12a0:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <SetupTimer0>


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	// Set display 
	SetLCD(1,"   D&R Airlab   ");
    12a4:	6e e1       	ldi	r22, 0x1E	; 30
    12a6:	70 e2       	ldi	r23, 0x20	; 32
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
	SetLCD(0,"\xC0");
    12b0:	6f e2       	ldi	r22, 0x2F	; 47
    12b2:	70 e2       	ldi	r23, 0x20	; 32
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
	SetLCD(1,"  Initializing  ");	
    12bc:	61 e3       	ldi	r22, 0x31	; 49
    12be:	70 e2       	ldi	r23, 0x20	; 32
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
	
	NrOfTelcos = 0;
    12c8:	10 92 c3 22 	sts	0x22C3, r1	; 0x8022c3 <NrOfTelcos>
	NrOfTriples = 0;
    12cc:	10 92 c2 22 	sts	0x22C2, r1	; 0x8022c2 <NrOfTriples>
	/*
		Initialize the interrupts
			-> Enable low level interrupts
			-> Enable global interrupts
	*/	
	TWIM_InitInterrupt();
    12d0:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <TWIM_InitInterrupt>
	//TWIM_Init();
	PMIC_CTRL |= PMIC_LOLVLEN_bm;
    12d4:	e2 ea       	ldi	r30, 0xA2	; 162
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	81 60       	ori	r24, 0x01	; 1
    12dc:	80 83       	st	Z, r24
	sei();
    12de:	78 94       	sei
//---------------------------------------------------------------------------------------
	
	Address = 0x0000;
	
	// ModuleType
	TWIM_Receive(I2CAddressEEProm, Address, ModuleType, NROFMODULES);
    12e0:	20 e1       	ldi	r18, 0x10	; 16
    12e2:	40 e7       	ldi	r20, 0x70	; 112
    12e4:	52 e2       	ldi	r21, 0x22	; 34
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	80 e7       	ldi	r24, 0x70	; 112
    12ea:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <TWIM_Receive>
	while(!((TWIM_Status() == TWI_MASTER_RECEIVED) || (TWIM_Status() == TWI_MASTER_ERROR)));
    12ee:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    12f2:	85 30       	cpi	r24, 0x05	; 5
    12f4:	21 f0       	breq	.+8      	; 0x12fe <Init+0x230>
    12f6:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    12fa:	8f 3f       	cpi	r24, 0xFF	; 255
    12fc:	c1 f7       	brne	.-16     	; 0x12ee <Init+0x220>
	Address += NROFMODULES;
	
	int t=0;
	
	// ConsoleModuleSettings
	TWIM_Receive(I2CAddressEEProm, Address, EEread, 29);
    12fe:	2d e1       	ldi	r18, 0x1D	; 29
    1300:	46 ef       	ldi	r20, 0xF6	; 246
    1302:	50 e2       	ldi	r21, 0x20	; 32
    1304:	60 e1       	ldi	r22, 0x10	; 16
    1306:	80 e7       	ldi	r24, 0x70	; 112
    1308:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <TWIM_Receive>
	while(!((TWIM_Status() == TWI_MASTER_RECEIVED) || (TWIM_Status() == TWI_MASTER_ERROR)));
    130c:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    1310:	85 30       	cpi	r24, 0x05	; 5
    1312:	09 f4       	brne	.+2      	; 0x1316 <Init+0x248>
    1314:	5d c1       	rjmp	.+698    	; 0x15d0 <Init+0x502>
    1316:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    131a:	8f 3f       	cpi	r24, 0xFF	; 255
    131c:	b9 f7       	brne	.-18     	; 0x130c <Init+0x23e>
    131e:	58 c1       	rjmp	.+688    	; 0x15d0 <Init+0x502>
	
	for (t=0; t<30; t++)
	{
		ConsoleModuleSettings[0][t]=EEread[t];
    1320:	81 91       	ld	r24, Z+
    1322:	8d 93       	st	X+, r24
	
	// ConsoleModuleSettings
	TWIM_Receive(I2CAddressEEProm, Address, EEread, 29);
	while(!((TWIM_Status() == TWI_MASTER_RECEIVED) || (TWIM_Status() == TWI_MASTER_ERROR)));
	
	for (t=0; t<30; t++)
    1324:	2e 17       	cp	r18, r30
    1326:	3f 07       	cpc	r19, r31
    1328:	d9 f7       	brne	.-10     	; 0x1320 <Init+0x252>
	}
		
	Address += 29;
	
	// ConsoleMasterSettings	
	TWIM_Receive(I2CAddressEEProm, Address, ConsoleMasterSettings, 5);
    132a:	25 e0       	ldi	r18, 0x05	; 5
    132c:	4e e8       	ldi	r20, 0x8E	; 142
    132e:	5b e2       	ldi	r21, 0x2B	; 43
    1330:	6d e2       	ldi	r22, 0x2D	; 45
    1332:	80 e7       	ldi	r24, 0x70	; 112
    1334:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <TWIM_Receive>
	while(!((TWIM_Status() == TWI_MASTER_RECEIVED) || (TWIM_Status() == TWI_MASTER_ERROR)));
    1338:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    133c:	85 30       	cpi	r24, 0x05	; 5
    133e:	21 f0       	breq	.+8      	; 0x1348 <Init+0x27a>
    1340:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    1344:	8f 3f       	cpi	r24, 0xFF	; 255
    1346:	c1 f7       	brne	.-16     	; 0x1338 <Init+0x26a>
	
	
//------------------------------------------------------------------------------------------------------------------------------------------------	


	Delay(10);	
    1348:	8a e0       	ldi	r24, 0x0A	; 10
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Delay>
    1350:	0f 2e       	mov	r0, r31
    1352:	fb e0       	ldi	r31, 0x0B	; 11
    1354:	cf 2e       	mov	r12, r31
    1356:	fb e2       	ldi	r31, 0x2B	; 43
    1358:	df 2e       	mov	r13, r31
    135a:	f0 2d       	mov	r31, r0
    135c:	4b e8       	ldi	r20, 0x8B	; 139
    135e:	5b e2       	ldi	r21, 0x2B	; 43
    1360:	f6 01       	movw	r30, r12
	// Clear readbuffers
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		for (cntByte=0; cntByte<8; cntByte++)
		{
			ModuleData[cntModule][cntByte]=ATTACK;
    1362:	21 e0       	ldi	r18, 0x01	; 1
    1364:	08 c0       	rjmp	.+16     	; 0x1376 <Init+0x2a8>
    1366:	21 93       	st	Z+, r18
	Delay(10);	

	// Clear readbuffers
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		for (cntByte=0; cntByte<8; cntByte++)
    1368:	e8 17       	cp	r30, r24
    136a:	f9 07       	cpc	r31, r25
    136c:	e1 f7       	brne	.-8      	; 0x1366 <Init+0x298>
    136e:	fc 01       	movw	r30, r24


	Delay(10);	

	// Clear readbuffers
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1370:	48 17       	cp	r20, r24
    1372:	59 07       	cpc	r21, r25
    1374:	19 f0       	breq	.+6      	; 0x137c <Init+0x2ae>
    1376:	cf 01       	movw	r24, r30
    1378:	08 96       	adiw	r24, 0x08	; 8
    137a:	f5 cf       	rjmp	.-22     	; 0x1366 <Init+0x298>
    137c:	eb ef       	ldi	r30, 0xFB	; 251
    137e:	f9 e3       	ldi	r31, 0x39	; 57
    1380:	23 e0       	ldi	r18, 0x03	; 3
    1382:	3a e3       	ldi	r19, 0x3A	; 58
			ModuleData[cntModule][cntByte]=ATTACK;
		}
	}
	for (cntByte=0; cntByte<8; cntByte++)
	{
		MasterData[cntByte]=ATTACK;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	81 93       	st	Z+, r24
		for (cntByte=0; cntByte<8; cntByte++)
		{
			ModuleData[cntModule][cntByte]=ATTACK;
		}
	}
	for (cntByte=0; cntByte<8; cntByte++)
    1388:	e2 17       	cp	r30, r18
    138a:	f3 07       	cpc	r31, r19
    138c:	e1 f7       	brne	.-8      	; 0x1386 <Init+0x2b8>
	{
		MasterData[cntByte]=ATTACK;
	}
	
	Delay(10);
    138e:	8a e0       	ldi	r24, 0x0A	; 10
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Delay>
    1396:	14 e6       	ldi	r17, 0x64	; 100

	for (cntModule=0; cntModule<100; cntModule++)
	{
		ReadModuleSwitches(MODULE1_8);
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	0e 94 53 22 	call	0x44a6	; 0x44a6 <ReadModuleSwitches>
		ReadModuleSwitches(MODULE9_16);
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	0e 94 53 22 	call	0x44a6	; 0x44a6 <ReadModuleSwitches>
    13a4:	11 50       	subi	r17, 0x01	; 1
		MasterData[cntByte]=ATTACK;
	}
	
	Delay(10);

	for (cntModule=0; cntModule<100; cntModule++)
    13a6:	c1 f7       	brne	.-16     	; 0x1398 <Init+0x2ca>
	{
		ReadModuleSwitches(MODULE1_8);
		ReadModuleSwitches(MODULE9_16);
	}
	EventBufferPtrTop = 0;
    13a8:	10 92 8b 2b 	sts	0x2B8B, r1	; 0x802b8b <EventBufferPtrTop>
	EventBufferPtrBottom = 0;
    13ac:	10 92 f5 20 	sts	0x20F5, r1	; 0x8020f5 <EventBufferPtrBottom>
    13b0:	0f 2e       	mov	r0, r31
    13b2:	f0 e7       	ldi	r31, 0x70	; 112
    13b4:	8f 2e       	mov	r8, r31
    13b6:	f2 e2       	ldi	r31, 0x22	; 34
    13b8:	9f 2e       	mov	r9, r31
    13ba:	f0 2d       	mov	r31, r0
    13bc:	84 01       	movw	r16, r8
	

	
	
	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    13be:	71 2c       	mov	r7, r1
			ModuleType[cntModule] = Type;
			SetLCD(0,"\xC0");
			SetLCD(1,"Config changed");
			Delay(20);

			ConsoleModuleSettings[cntModule][TIMERLINEA] = 0x01;
    13c0:	66 24       	eor	r6, r6
    13c2:	63 94       	inc	r6
	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		unsigned char Type = 0;

		if (ModuleData[cntModule][4]&0x80)
    13c4:	f6 01       	movw	r30, r12
    13c6:	84 81       	ldd	r24, Z+4	; 0x04
		Type = 0x02;
    13c8:	88 1f       	adc	r24, r24
    13ca:	88 27       	eor	r24, r24
    13cc:	88 1f       	adc	r24, r24
    13ce:	88 0f       	add	r24, r24
		if (ModuleData[cntModule][5]&0x80)
    13d0:	95 81       	ldd	r25, Z+5	; 0x05
    13d2:	99 23       	and	r25, r25
    13d4:	0c f4       	brge	.+2      	; 0x13d8 <Init+0x30a>
		Type |= 0x01;
    13d6:	81 60       	ori	r24, 0x01	; 1
    13d8:	58 01       	movw	r10, r16

		if (ModuleType[cntModule] != Type)
    13da:	d8 01       	movw	r26, r16
    13dc:	9c 91       	ld	r25, X
    13de:	89 17       	cp	r24, r25
    13e0:	71 f1       	breq	.+92     	; 0x143e <Init+0x370>
		{
			ModuleType[cntModule] = Type;
    13e2:	8c 93       	st	X, r24
			SetLCD(0,"\xC0");
    13e4:	6f e2       	ldi	r22, 0x2F	; 47
    13e6:	70 e2       	ldi	r23, 0x20	; 32
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
			SetLCD(1,"Config changed");
    13f0:	62 e4       	ldi	r22, 0x42	; 66
    13f2:	70 e2       	ldi	r23, 0x20	; 32
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
			Delay(20);
    13fc:	84 e1       	ldi	r24, 0x14	; 20
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Delay>

			ConsoleModuleSettings[cntModule][TIMERLINEA] = 0x01;
    1404:	68 82       	st	Y, r6
			ConsoleModuleSettings[cntModule][TIMERLINEB] = 0x00;
    1406:	19 82       	std	Y+1, r1	; 0x01
			ConsoleModuleSettings[cntModule][TIMERMIC] = 0x00;
    1408:	1a 82       	std	Y+2, r1	; 0x02
			ConsoleModuleSettings[cntModule][STARTLINEA] = 0x01;			
    140a:	6b 82       	std	Y+3, r6	; 0x03
			ConsoleModuleSettings[cntModule][STARTLINEB] = 0x00;
    140c:	1c 82       	std	Y+4, r1	; 0x04
			ConsoleModuleSettings[cntModule][STARTMIC] = 0x00;
    140e:	1d 82       	std	Y+5, r1	; 0x05
			ConsoleModuleSettings[cntModule][STARTFADER] = 0x01;
    1410:	6e 82       	std	Y+6, r6	; 0x06
			ConsoleModuleSettings[cntModule][STARTON] = 0x00;     //7
    1412:	1f 82       	std	Y+7, r1	; 0x07
			
			
			ConsoleModuleSettings[cntModule][STARTCUE] = 0x00;
    1414:	18 86       	std	Y+8, r1	; 0x08
			ConsoleModuleSettings[cntModule][STARTPULS] = 0x00;
    1416:	19 86       	std	Y+9, r1	; 0x09
			ConsoleModuleSettings[cntModule][REMLINEA] = 0x00;
    1418:	1a 86       	std	Y+10, r1	; 0x0a
			ConsoleModuleSettings[cntModule][REMLINEB] = 0x00;
    141a:	1b 86       	std	Y+11, r1	; 0x0b
			ConsoleModuleSettings[cntModule][REMMIC] = 0x00;
    141c:	1c 86       	std	Y+12, r1	; 0x0c
			ConsoleModuleSettings[cntModule][DJMIC] = 0x00;
    141e:	1d 86       	std	Y+13, r1	; 0x0d
			ConsoleModuleSettings[cntModule][ANNMIC] = 0x00;
    1420:	1e 86       	std	Y+14, r1	; 0x0e
			ConsoleModuleSettings[cntModule][STUDIOMIC] = 0x00;   //15
    1422:	1f 86       	std	Y+15, r1	; 0x0f
			
			ConsoleModuleSettings[cntModule][ONAIR1LINEA] = 0x00;
    1424:	18 8a       	std	Y+16, r1	; 0x10
			ConsoleModuleSettings[cntModule][ONAIR1LINEB] = 0x00;
    1426:	19 8a       	std	Y+17, r1	; 0x11
			ConsoleModuleSettings[cntModule][ONAIR1MIC] = 0x00;
    1428:	1a 8a       	std	Y+18, r1	; 0x12
			ConsoleModuleSettings[cntModule][ONAIR2LINEA] = 0x00;
    142a:	1b 8a       	std	Y+19, r1	; 0x13
			ConsoleModuleSettings[cntModule][ONAIR2LINEB] = 0x00;
    142c:	1c 8a       	std	Y+20, r1	; 0x14
			ConsoleModuleSettings[cntModule][ONAIR2MIC] = 0x00;
    142e:	1d 8a       	std	Y+21, r1	; 0x15
			ConsoleModuleSettings[cntModule][POWERON] = 0x00;
    1430:	1e 8a       	std	Y+22, r1	; 0x16
			ConsoleModuleSettings[cntModule][MICATLINEA] = 0x00;   //23
    1432:	1f 8a       	std	Y+23, r1	; 0x17
			
			ConsoleModuleSettings[cntModule][MICATLINEB] = 0x00;
    1434:	18 8e       	std	Y+24, r1	; 0x18
			ConsoleModuleSettings[cntModule][REMONMIC] = 0x00;
    1436:	19 8e       	std	Y+25, r1	; 0x19
			ConsoleModuleSettings[cntModule][REMONLINEA] = 0x00;
    1438:	1a 8e       	std	Y+26, r1	; 0x1a
			ConsoleModuleSettings[cntModule][REMONLINEB] = 0x00;
    143a:	1b 8e       	std	Y+27, r1	; 0x1b
			ConsoleModuleSettings[cntModule][SWITCHSTART] = 0x00;  //28
    143c:	1c 8e       	std	Y+28, r1	; 0x1c
		}

		if (ModuleType[cntModule] == TELCO)
    143e:	f5 01       	movw	r30, r10
    1440:	80 81       	ld	r24, Z
    1442:	82 30       	cpi	r24, 0x02	; 2
    1444:	91 f4       	brne	.+36     	; 0x146a <Init+0x39c>
		{
			ConsoleModuleSettings[cntModule][TIMERMIC] = 0x00;
    1446:	1a 82       	std	Y+2, r1	; 0x02
			ConsoleModuleSettings[cntModule][STARTLINEA] = 0x01;
    1448:	6b 82       	std	Y+3, r6	; 0x03
			ConsoleModuleSettings[cntModule][STARTLINEB] = 0x01;
    144a:	6c 82       	std	Y+4, r6	; 0x04
			ConsoleModuleSettings[cntModule][STARTMIC] = 0x00;
    144c:	1d 82       	std	Y+5, r1	; 0x05
			ConsoleModuleSettings[cntModule][STARTFADER] = 0x00;
    144e:	1e 82       	std	Y+6, r1	; 0x06
			ConsoleModuleSettings[cntModule][STARTON] = 0x01;
    1450:	6f 82       	std	Y+7, r6	; 0x07
			ConsoleModuleSettings[cntModule][STARTPULS] = 0x00;
    1452:	19 86       	std	Y+9, r1	; 0x09
			ConsoleModuleSettings[cntModule][DJMIC] = 0x00;
    1454:	1d 86       	std	Y+13, r1	; 0x0d
			ConsoleModuleSettings[cntModule][ANNMIC] = 0x00;
    1456:	1e 86       	std	Y+14, r1	; 0x0e
			ConsoleModuleSettings[cntModule][STUDIOMIC] = 0x00;
    1458:	1f 86       	std	Y+15, r1	; 0x0f
			ConsoleModuleSettings[cntModule][ONAIR1MIC] = 0x00;
    145a:	1a 8a       	std	Y+18, r1	; 0x12
			ConsoleModuleSettings[cntModule][ONAIR2MIC] = 0x00;
    145c:	1d 8a       	std	Y+21, r1	; 0x15
			ConsoleModuleSettings[cntModule][MICATLINEA] = 0x00;
    145e:	1f 8a       	std	Y+23, r1	; 0x17
			ConsoleModuleSettings[cntModule][MICATLINEB] = 0x00;
    1460:	18 8e       	std	Y+24, r1	; 0x18
			ConsoleModuleSettings[cntModule][REMONMIC] = 0x00;
    1462:	19 8e       	std	Y+25, r1	; 0x19
			ConsoleModuleSettings[cntModule][REMONLINEA] = 0x00;
    1464:	1a 8e       	std	Y+26, r1	; 0x1a
			ConsoleModuleSettings[cntModule][REMONLINEB] = 0x00;
    1466:	1b 8e       	std	Y+27, r1	; 0x1b
			ConsoleModuleSettings[cntModule][SWITCHSTART] = 0x00;
    1468:	1c 8e       	std	Y+28, r1	; 0x1c
	

	
	
	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    146a:	73 94       	inc	r7
    146c:	f8 e0       	ldi	r31, 0x08	; 8
    146e:	cf 0e       	add	r12, r31
    1470:	d1 1c       	adc	r13, r1
    1472:	0f 5f       	subi	r16, 0xFF	; 255
    1474:	1f 4f       	sbci	r17, 0xFF	; 255
    1476:	6d 96       	adiw	r28, 0x1d	; 29
    1478:	80 e1       	ldi	r24, 0x10	; 16
    147a:	78 12       	cpse	r7, r24
    147c:	a3 cf       	rjmp	.-186    	; 0x13c4 <Init+0x2f6>
    147e:	c1 e2       	ldi	r28, 0x21	; 33
    1480:	d8 e3       	ldi	r29, 0x38	; 56
    1482:	0c e0       	ldi	r16, 0x0C	; 12
    1484:	1b e2       	ldi	r17, 0x2B	; 43
    1486:	71 2c       	mov	r7, r1
				ConsoleFunctionData[cntModule] |= MUTE_FUNCTION;
			}
		}
		else
		{
			ConsoleFunctionData[cntModule] |= MUTE_FUNCTION;
    1488:	68 94       	set
    148a:	55 24       	eor	r5, r5
    148c:	54 f8       	bld	r5, 4
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		ConsoleFunctionData[cntModule] = 0x00;
		if (ConsoleModuleSettings[cntModule][POWERON])
		{
			ConsoleFunctionData[cntModule] |= ON_LED;
    148e:	68 94       	set
    1490:	66 24       	eor	r6, r6
    1492:	65 f8       	bld	r6, 5
    1494:	67 01       	movw	r12, r14
	
	
	// Determine Startup setting
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		ConsoleFunctionData[cntModule] = 0x00;
    1496:	d7 01       	movw	r26, r14
    1498:	1c 92       	st	X, r1
		if (ConsoleModuleSettings[cntModule][POWERON])
    149a:	88 89       	ldd	r24, Y+16	; 0x10
    149c:	88 23       	and	r24, r24
    149e:	21 f1       	breq	.+72     	; 0x14e8 <Init+0x41a>
		{
			ConsoleFunctionData[cntModule] |= ON_LED;
    14a0:	6c 92       	st	X, r6
			if ((ConsoleModuleSettings[cntModule][STARTON]) && (!ConsoleModuleSettings[cntModule][STARTFADER]))
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	88 23       	and	r24, r24
    14a6:	09 f4       	brne	.+2      	; 0x14aa <Init+0x3dc>
    14a8:	a1 c0       	rjmp	.+322    	; 0x15ec <Init+0x51e>
    14aa:	88 81       	ld	r24, Y
    14ac:	81 11       	cpse	r24, r1
    14ae:	98 c0       	rjmp	.+304    	; 0x15e0 <Init+0x512>
			StartControl(cntModule,1);
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	87 2d       	mov	r24, r7
    14b4:	0e 94 92 05 	call	0xb24	; 0xb24 <StartControl>

			if ((ModuleData[cntModule][FADERON]&0x80))
    14b8:	f8 01       	movw	r30, r16
    14ba:	80 81       	ld	r24, Z
    14bc:	88 23       	and	r24, r24
    14be:	7c f4       	brge	.+30     	; 0x14de <Init+0x410>
			{ // !JB
				if  ((ConsoleModuleSettings[cntModule][STARTON]) && (ConsoleModuleSettings[cntModule][STARTFADER]))
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	88 23       	and	r24, r24
    14c4:	39 f0       	breq	.+14     	; 0x14d4 <Init+0x406>
    14c6:	88 81       	ld	r24, Y
    14c8:	88 23       	and	r24, r24
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <Init+0x406>
				StartControl(cntModule,1);
    14cc:	61 e0       	ldi	r22, 0x01	; 1
    14ce:	87 2d       	mov	r24, r7
    14d0:	0e 94 92 05 	call	0xb24	; 0xb24 <StartControl>

				ConsoleFunctionData[cntModule] |= REMOTE_FUNCTION;
    14d4:	d6 01       	movw	r26, r12
    14d6:	8c 91       	ld	r24, X
    14d8:	81 60       	ori	r24, 0x01	; 1
    14da:	8c 93       	st	X, r24
    14dc:	07 c0       	rjmp	.+14     	; 0x14ec <Init+0x41e>
			}
			else
			{
				ConsoleFunctionData[cntModule] |= MUTE_FUNCTION;
    14de:	f6 01       	movw	r30, r12
    14e0:	80 81       	ld	r24, Z
    14e2:	80 61       	ori	r24, 0x10	; 16
    14e4:	80 83       	st	Z, r24
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <Init+0x41e>
			}
		}
		else
		{
			ConsoleFunctionData[cntModule] |= MUTE_FUNCTION;
    14e8:	d7 01       	movw	r26, r14
    14ea:	5c 92       	st	X, r5
	
		 
	
	
	// Determine Startup setting
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    14ec:	73 94       	inc	r7
    14ee:	bf ef       	ldi	r27, 0xFF	; 255
    14f0:	eb 1a       	sub	r14, r27
    14f2:	fb 0a       	sbc	r15, r27
    14f4:	6d 96       	adiw	r28, 0x1d	; 29
    14f6:	08 5f       	subi	r16, 0xF8	; 248
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	e0 e1       	ldi	r30, 0x10	; 16
    14fc:	7e 12       	cpse	r7, r30
    14fe:	ca cf       	rjmp	.-108    	; 0x1494 <Init+0x3c6>
    1500:	7b c0       	rjmp	.+246    	; 0x15f8 <Init+0x52a>


	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		switch (ModuleType[cntModule])
    1502:	d4 01       	movw	r26, r8
    1504:	8d 91       	ld	r24, X+
    1506:	4d 01       	movw	r8, r26
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	19 f0       	breq	.+6      	; 0x1512 <Init+0x444>
    150c:	82 30       	cpi	r24, 0x02	; 2
    150e:	19 f0       	breq	.+6      	; 0x1516 <Init+0x448>
    1510:	03 c0       	rjmp	.+6      	; 0x1518 <Init+0x44a>
		{
			case TRIPLE:
			{
				// Triple Module
				NrOfTriples++;
    1512:	4f 5f       	subi	r20, 0xFF	; 255
			}
			break;
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <Init+0x44a>
			case TELCO:
			{
				// Telco Module
				NrOfTelcos++;
    1516:	9f 5f       	subi	r25, 0xFF	; 255

	SetConsoleData();


	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1518:	82 16       	cp	r8, r18
    151a:	93 06       	cpc	r9, r19
    151c:	91 f7       	brne	.-28     	; 0x1502 <Init+0x434>
    151e:	40 93 c2 22 	sts	0x22C2, r20	; 0x8022c2 <NrOfTriples>
    1522:	90 93 c3 22 	sts	0x22C3, r25	; 0x8022c3 <NrOfTelcos>
		//PCON |= 0x10;
		//T3 = 0;
	}
		
	/* Set display */
	SetLCD(0,"\x80");
    1526:	61 e5       	ldi	r22, 0x51	; 81
    1528:	70 e2       	ldi	r23, 0x20	; 32
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
	SetLCD(1,"   D&R Airlab   ");
    1532:	6e e1       	ldi	r22, 0x1E	; 30
    1534:	70 e2       	ldi	r23, 0x20	; 32
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
	ShowConfig();
    153e:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <ShowConfig>
	
	Delay(1000);
    1542:	88 ee       	ldi	r24, 0xE8	; 232
    1544:	93 e0       	ldi	r25, 0x03	; 3
    1546:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Delay>
	
	
	PORTD_OUTCLR = 0x01;
    154a:	e6 e6       	ldi	r30, 0x66	; 102
    154c:	f6 e0       	ldi	r31, 0x06	; 6
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	80 83       	st	Z, r24
	PORTD_OUTCLR = 0x02;
    1552:	82 e0       	ldi	r24, 0x02	; 2
    1554:	80 83       	st	Z, r24
	PORTD_OUTCLR = 0x04;
    1556:	84 e0       	ldi	r24, 0x04	; 4
    1558:	80 83       	st	Z, r24
	PORTD_OUTCLR = 0x08;
    155a:	88 e0       	ldi	r24, 0x08	; 8
    155c:	80 83       	st	Z, r24
	PORTD_OUTSET = 0x10;
    155e:	80 e1       	ldi	r24, 0x10	; 16
    1560:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>

	if ((PORTC_IN&0x43)==0x00)
    1564:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7de648>
    1568:	83 74       	andi	r24, 0x43	; 67
    156a:	79 f4       	brne	.+30     	; 0x158a <Init+0x4bc>
	{
		ConsoleMasterSettings[4] = 0x01;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	80 93 92 2b 	sts	0x2B92, r24	; 0x802b92 <ConsoleMasterSettings+0x4>
		SetLCD(0,"\xC0");
    1572:	6f e2       	ldi	r22, 0x2F	; 47
    1574:	70 e2       	ldi	r23, 0x20	; 32
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
		SetLCD(1,"Security off    ");
    157e:	63 e5       	ldi	r22, 0x53	; 83
    1580:	70 e2       	ldi	r23, 0x20	; 32
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
	}
	
	Delay(50);
    158a:	82 e3       	ldi	r24, 0x32	; 50
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Delay>
	SetLCD(0,"\x80");
    1592:	61 e5       	ldi	r22, 0x51	; 81
    1594:	70 e2       	ldi	r23, 0x20	; 32
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
	SetLCD(1,"                ");
    159e:	64 e6       	ldi	r22, 0x64	; 100
    15a0:	70 e2       	ldi	r23, 0x20	; 32
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
	SetLCD(0,"\xC0");
    15aa:	6f e2       	ldi	r22, 0x2F	; 47
    15ac:	70 e2       	ldi	r23, 0x20	; 32
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
	SetLCD(1,TextString[TextStringPtr]);
    15b6:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    15ba:	b1 e1       	ldi	r27, 0x11	; 17
    15bc:	6b 9f       	mul	r22, r27
    15be:	b0 01       	movw	r22, r0
    15c0:	11 24       	eor	r1, r1
    15c2:	6a 5d       	subi	r22, 0xDA	; 218
    15c4:	7d 4d       	sbci	r23, 0xDD	; 221
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>





}
    15ce:	28 c0       	rjmp	.+80     	; 0x1620 <Init+0x552>
    15d0:	e6 ef       	ldi	r30, 0xF6	; 246
    15d2:	f0 e2       	ldi	r31, 0x20	; 32
    15d4:	cb e1       	ldi	r28, 0x1B	; 27
    15d6:	d8 e3       	ldi	r29, 0x38	; 56
    15d8:	24 e1       	ldi	r18, 0x14	; 20
    15da:	31 e2       	ldi	r19, 0x21	; 33


	
	OperatingMode = NORMALMODE;
	//GlobalTimerActive = 1;   // willem
	DirectorTBCUEBussActive = 0;
    15dc:	de 01       	movw	r26, r28
    15de:	a0 ce       	rjmp	.-704    	; 0x1320 <Init+0x252>
		{
			ConsoleFunctionData[cntModule] |= ON_LED;
			if ((ConsoleModuleSettings[cntModule][STARTON]) && (!ConsoleModuleSettings[cntModule][STARTFADER]))
			StartControl(cntModule,1);

			if ((ModuleData[cntModule][FADERON]&0x80))
    15e0:	f8 01       	movw	r30, r16
    15e2:	80 81       	ld	r24, Z
    15e4:	88 23       	and	r24, r24
    15e6:	0c f0       	brlt	.+2      	; 0x15ea <Init+0x51c>
    15e8:	7a cf       	rjmp	.-268    	; 0x14de <Init+0x410>
    15ea:	70 cf       	rjmp	.-288    	; 0x14cc <Init+0x3fe>
    15ec:	d8 01       	movw	r26, r16
    15ee:	8c 91       	ld	r24, X
    15f0:	88 23       	and	r24, r24
    15f2:	0c f0       	brlt	.+2      	; 0x15f6 <Init+0x528>
    15f4:	74 cf       	rjmp	.-280    	; 0x14de <Init+0x410>
    15f6:	6e cf       	rjmp	.-292    	; 0x14d4 <Init+0x406>
		// Watchdog
		//PCON |= 0x10;
		//T3 = 0;
	}	
	
	ConsoleFunctionData[16] = NOT_POWER_ON_CC;
    15f8:	80 e4       	ldi	r24, 0x40	; 64
    15fa:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <ConsoleFunctionData+0x10>
		//PCON |= 0x10;
		//T3 = 0;
	}

	//OnAir1/2 Control
	OnAirControl();
    15fe:	0e 94 76 04 	call	0x8ec	; 0x8ec <OnAirControl>

	//DJ-Control
	DJControl();
    1602:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>

	//StudioMic Control
	StudioMicControl();
    1606:	0e 94 5e 03 	call	0x6bc	; 0x6bc <StudioMicControl>

	//Cue Control
	CueControl();
    160a:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>

	SetConsoleData();
    160e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <SetConsoleData>
    1612:	40 91 c2 22 	lds	r20, 0x22C2	; 0x8022c2 <NrOfTriples>
    1616:	90 91 c3 22 	lds	r25, 0x22C3	; 0x8022c3 <NrOfTelcos>
    161a:	20 e8       	ldi	r18, 0x80	; 128
    161c:	32 e2       	ldi	r19, 0x22	; 34
    161e:	71 cf       	rjmp	.-286    	; 0x1502 <Init+0x434>





}
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	bf 90       	pop	r11
    1632:	af 90       	pop	r10
    1634:	9f 90       	pop	r9
    1636:	8f 90       	pop	r8
    1638:	7f 90       	pop	r7
    163a:	6f 90       	pop	r6
    163c:	5f 90       	pop	r5
    163e:	08 95       	ret

00001640 <main>:
//*****************************************************************************************************************************
//*****************************************************************************************************************************
//*****************************************************************************************************************************
//*****************************************************************************************************************************
int	main (void)
{	
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	29 97       	sbiw	r28, 0x09	; 9
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	de bf       	out	0x3e, r29	; 62
	char TextBuffer[9];
	
	Init();
    164e:	0e 94 67 08 	call	0x10ce	; 0x10ce <Init>
				//}
			//}
		//}
	//}

	TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    1652:	e6 e1       	ldi	r30, 0x16	; 22
    1654:	fa e3       	ldi	r31, 0x3A	; 58
    1656:	23 81       	ldd	r18, Z+3	; 0x03
    1658:	8d ec       	ldi	r24, 0xCD	; 205
    165a:	28 9f       	mul	r18, r24
    165c:	91 2d       	mov	r25, r1
    165e:	11 24       	eor	r1, r1
    1660:	96 95       	lsr	r25
    1662:	96 95       	lsr	r25
    1664:	96 95       	lsr	r25
    1666:	30 e3       	ldi	r19, 0x30	; 48
    1668:	39 0f       	add	r19, r25
    166a:	39 83       	std	Y+1, r19	; 0x01
	TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    166c:	99 0f       	add	r25, r25
    166e:	39 2f       	mov	r19, r25
    1670:	33 0f       	add	r19, r19
    1672:	33 0f       	add	r19, r19
    1674:	93 0f       	add	r25, r19
    1676:	29 1b       	sub	r18, r25
    1678:	92 2f       	mov	r25, r18
    167a:	90 5d       	subi	r25, 0xD0	; 208
    167c:	9a 83       	std	Y+2, r25	; 0x02
	TextBuffer[2] = ':';
    167e:	4a e3       	ldi	r20, 0x3A	; 58
    1680:	4b 83       	std	Y+3, r20	; 0x03
	TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    1682:	22 81       	ldd	r18, Z+2	; 0x02
    1684:	28 9f       	mul	r18, r24
    1686:	91 2d       	mov	r25, r1
    1688:	11 24       	eor	r1, r1
    168a:	96 95       	lsr	r25
    168c:	96 95       	lsr	r25
    168e:	96 95       	lsr	r25
    1690:	30 e3       	ldi	r19, 0x30	; 48
    1692:	39 0f       	add	r19, r25
    1694:	3c 83       	std	Y+4, r19	; 0x04
	TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    1696:	99 0f       	add	r25, r25
    1698:	39 2f       	mov	r19, r25
    169a:	33 0f       	add	r19, r19
    169c:	33 0f       	add	r19, r19
    169e:	93 0f       	add	r25, r19
    16a0:	29 1b       	sub	r18, r25
    16a2:	92 2f       	mov	r25, r18
    16a4:	90 5d       	subi	r25, 0xD0	; 208
    16a6:	9d 83       	std	Y+5, r25	; 0x05
	TextBuffer[5] = ':';
    16a8:	4e 83       	std	Y+6, r20	; 0x06
	TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
    16ac:	98 9f       	mul	r25, r24
    16ae:	81 2d       	mov	r24, r1
    16b0:	11 24       	eor	r1, r1
    16b2:	86 95       	lsr	r24
    16b4:	86 95       	lsr	r24
    16b6:	86 95       	lsr	r24
    16b8:	20 e3       	ldi	r18, 0x30	; 48
    16ba:	28 0f       	add	r18, r24
    16bc:	2f 83       	std	Y+7, r18	; 0x07
	TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    16be:	88 0f       	add	r24, r24
    16c0:	28 2f       	mov	r18, r24
    16c2:	22 0f       	add	r18, r18
    16c4:	22 0f       	add	r18, r18
    16c6:	82 0f       	add	r24, r18
    16c8:	98 1b       	sub	r25, r24
    16ca:	89 2f       	mov	r24, r25
    16cc:	80 5d       	subi	r24, 0xD0	; 208
    16ce:	88 87       	std	Y+8, r24	; 0x08

	SetLCD(0,"\x84");
    16d0:	65 e7       	ldi	r22, 0x75	; 117
    16d2:	70 e2       	ldi	r23, 0x20	; 32
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
	TextBuffer[8] = 0;
    16dc:	19 86       	std	Y+9, r1	; 0x09
	SetLCD(1,TextBuffer);
    16de:	be 01       	movw	r22, r28
    16e0:	6f 5f       	subi	r22, 0xFF	; 255
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>

					
	unsigned char cntByte, cntChannel;				
										
	// MASTERSETUPDATA
	SerialBufferInPtrTop = SerialBufferInPtrBottom = SerialBufferOutPtrTop = SerialBufferOutPtrBottom = 0;
    16ec:	10 92 93 2b 	sts	0x2B93, r1	; 0x802b93 <SerialBufferOutPtrBottom>
    16f0:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <SerialBufferInPtrBottom>
    16f4:	10 92 15 3a 	sts	0x3A15, r1	; 0x803a15 <SerialBufferInPtrTop>
														
	SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    16f8:	e5 ec       	ldi	r30, 0xC5	; 197
    16fa:	f3 e2       	ldi	r31, 0x23	; 35
    16fc:	84 e9       	ldi	r24, 0x94	; 148
    16fe:	80 83       	st	Z, r24
	SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    1700:	11 82       	std	Z+1, r1	; 0x01
    1702:	ae e8       	ldi	r26, 0x8E	; 142
    1704:	bb e2       	ldi	r27, 0x2B	; 43
    1706:	82 e0       	ldi	r24, 0x02	; 2
										
	for (cntByte=0; cntByte<5; cntByte++)
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    1708:	9d 91       	ld	r25, X+
    170a:	e8 2f       	mov	r30, r24
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	eb 53       	subi	r30, 0x3B	; 59
    1710:	fc 4d       	sbci	r31, 0xDC	; 220
    1712:	9f 77       	andi	r25, 0x7F	; 127
    1714:	90 83       	st	Z, r25
    1716:	8f 5f       	subi	r24, 0xFF	; 255
	SerialBufferInPtrTop = SerialBufferInPtrBottom = SerialBufferOutPtrTop = SerialBufferOutPtrBottom = 0;
														
	SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
	SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
										
	for (cntByte=0; cntByte<5; cntByte++)
    1718:	87 30       	cpi	r24, 0x07	; 7
    171a:	b1 f7       	brne	.-20     	; 0x1708 <main+0xc8>
    171c:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
	}

	if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
    1720:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    1724:	88 23       	and	r24, r24
    1726:	49 f0       	breq	.+18     	; 0x173a <main+0xfa>
	{
		USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	80 93 93 2b 	sts	0x2B93, r24	; 0x802b93 <SerialBufferOutPtrBottom>
    172e:	80 91 c5 23 	lds	r24, 0x23C5	; 0x8023c5 <SerialBufferOut>
    1732:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
		SendSerialReady = 0;
    1736:	10 92 6a 22 	sts	0x226A, r1	; 0x80226a <SendSerialReady>
	}


					
	Delay(100);
    173a:	84 e6       	ldi	r24, 0x64	; 100
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Delay>
    1742:	2b e1       	ldi	r18, 0x1B	; 27
    1744:	38 e3       	ldi	r19, 0x38	; 56
	//cntChannel=0;
		
	// MODULESETDATA
	for (cntChannel=0; cntChannel<16; cntChannel++)
    1746:	90 e0       	ldi	r25, 0x00	; 0
	{
		//if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
		//{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    1748:	63 e9       	ldi	r22, 0x93	; 147
			SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
		}
		//}
		if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
		{
			USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    174a:	0f 2e       	mov	r0, r31
    174c:	f0 ea       	ldi	r31, 0xA0	; 160
    174e:	ef 2e       	mov	r14, r31
    1750:	fa e0       	ldi	r31, 0x0A	; 10
    1752:	ff 2e       	mov	r15, r31
    1754:	f0 2d       	mov	r31, r0
	// MODULESETDATA
	for (cntChannel=0; cntChannel<16; cntChannel++)
	{
		//if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
		//{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    1756:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    175a:	e8 2f       	mov	r30, r24
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	eb 53       	subi	r30, 0x3B	; 59
    1760:	fc 4d       	sbci	r31, 0xDC	; 220
    1762:	60 83       	st	Z, r22
		SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
    1764:	42 e0       	ldi	r20, 0x02	; 2
    1766:	48 0f       	add	r20, r24
    1768:	e1 e0       	ldi	r30, 0x01	; 1
    176a:	e8 0f       	add	r30, r24
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	eb 53       	subi	r30, 0x3B	; 59
    1770:	fc 4d       	sbci	r31, 0xDC	; 220
    1772:	90 83       	st	Z, r25
    1774:	81 5e       	subi	r24, 0xE1	; 225
    1776:	f9 01       	movw	r30, r18
						
		for (cntByte=0; cntByte<29; cntByte++)
		{
			ConsoleModuleSettings[cntChannel][cntByte]&=0x01;
    1778:	50 81       	ld	r21, Z
    177a:	51 70       	andi	r21, 0x01	; 1
    177c:	51 93       	st	Z+, r21
			SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
    177e:	04 2f       	mov	r16, r20
    1780:	10 e0       	ldi	r17, 0x00	; 0
    1782:	0b 53       	subi	r16, 0x3B	; 59
    1784:	1c 4d       	sbci	r17, 0xDC	; 220
    1786:	d8 01       	movw	r26, r16
    1788:	5c 93       	st	X, r21
    178a:	4f 5f       	subi	r20, 0xFF	; 255
		//if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
		//{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
		SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
						
		for (cntByte=0; cntByte<29; cntByte++)
    178c:	48 13       	cpse	r20, r24
    178e:	f4 cf       	rjmp	.-24     	; 0x1778 <main+0x138>
    1790:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
		{
			ConsoleModuleSettings[cntChannel][cntByte]&=0x01;
			SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
		}
		//}
		if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
    1794:	e0 91 93 2b 	lds	r30, 0x2B93	; 0x802b93 <SerialBufferOutPtrBottom>
    1798:	e8 17       	cp	r30, r24
    179a:	89 f0       	breq	.+34     	; 0x17be <main+0x17e>
    179c:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    17a0:	88 23       	and	r24, r24
    17a2:	89 f0       	breq	.+34     	; 0x17c6 <main+0x186>
		{
			USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	8e 0f       	add	r24, r30
    17a8:	80 93 93 2b 	sts	0x2B93, r24	; 0x802b93 <SerialBufferOutPtrBottom>
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	eb 53       	subi	r30, 0x3B	; 59
    17b0:	fc 4d       	sbci	r31, 0xDC	; 220
    17b2:	80 81       	ld	r24, Z
    17b4:	f7 01       	movw	r30, r14
    17b6:	80 83       	st	Z, r24
			SendSerialReady = 0;
    17b8:	10 92 6a 22 	sts	0x226A, r1	; 0x80226a <SendSerialReady>
    17bc:	04 c0       	rjmp	.+8      	; 0x17c6 <main+0x186>
		}
		while(SendSerialReady);
    17be:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    17c2:	81 11       	cpse	r24, r1
    17c4:	fe cf       	rjmp	.-4      	; 0x17c2 <main+0x182>
					
	Delay(100);
	//cntChannel=0;
		
	// MODULESETDATA
	for (cntChannel=0; cntChannel<16; cntChannel++)
    17c6:	9f 5f       	subi	r25, 0xFF	; 255
    17c8:	23 5e       	subi	r18, 0xE3	; 227
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	90 31       	cpi	r25, 0x10	; 16
    17ce:	19 f6       	brne	.-122    	; 0x1756 <main+0x116>
			SendSerialReady = 0;
		}
		while(SendSerialReady);
	}
									
	Delay(10);
    17d0:	8a e0       	ldi	r24, 0x0A	; 10
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Delay>
// ************** WHILE(1) ************* ************** WHILE(1) ************* ************** WHILE(1) *************

	//SerialBufferOutPtrTop = 1;  // Dit schijnt belangrijk te zijn
	//SerialBufferOutPtrBottom = 2;  // buffers moeten opeen volgend zijn !!!  0-1  1-2  2-3 enz.
	
	SerialBufferInPtrTop = SerialBufferInPtrBottom = SerialBufferOutPtrTop = SerialBufferOutPtrBottom = 0;
    17d8:	10 92 93 2b 	sts	0x2B93, r1	; 0x802b93 <SerialBufferOutPtrBottom>
    17dc:	10 92 82 22 	sts	0x2282, r1	; 0x802282 <SerialBufferOutPtrTop>
    17e0:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <SerialBufferInPtrBottom>
    17e4:	10 92 15 3a 	sts	0x3A15, r1	; 0x803a15 <SerialBufferInPtrTop>
    17e8:	0f 2e       	mov	r0, r31
    17ea:	fb ef       	ldi	r31, 0xFB	; 251
    17ec:	6f 2e       	mov	r6, r31
    17ee:	f9 e3       	ldi	r31, 0x39	; 57
    17f0:	7f 2e       	mov	r7, r31
    17f2:	f0 2d       	mov	r31, r0
			{
				cntStartPuls[cnt]--;
				if (cntStartPuls[cnt]==0)
				{
					ConsoleFunctionData[cnt] &= START_FUNCTION^0xFF;
					SendSerialData = 1;
    17f4:	33 24       	eor	r3, r3
    17f6:	33 94       	inc	r3
			SetConsoleData();
		}
		
		if ((TimeAndDate.Seconds != OldTimeAndDate.Seconds) ) //&& (OperatingMode==NORMALMODE))
		{		
			TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    17f8:	0f 2e       	mov	r0, r31
    17fa:	fd ec       	ldi	r31, 0xCD	; 205
    17fc:	2f 2e       	mov	r2, r31
    17fe:	f0 2d       	mov	r31, r0

			if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom)  && SendSerialReady)
			//if(SendSerialReady)
			{
				
				USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];				
    1800:	0f 2e       	mov	r0, r31
    1802:	f0 ea       	ldi	r31, 0xA0	; 160
    1804:	4f 2e       	mov	r4, r31
    1806:	fa e0       	ldi	r31, 0x0A	; 10
    1808:	5f 2e       	mov	r5, r31
    180a:	f0 2d       	mov	r31, r0
    180c:	0b ee       	ldi	r16, 0xEB	; 235
    180e:	19 e3       	ldi	r17, 0x39	; 57
    1810:	0f 2e       	mov	r0, r31
    1812:	f1 e9       	ldi	r31, 0x91	; 145
    1814:	8f 2e       	mov	r8, r31
    1816:	fd e2       	ldi	r31, 0x2D	; 45
    1818:	9f 2e       	mov	r9, r31
    181a:	f0 2d       	mov	r31, r0
    181c:	0f 2e       	mov	r0, r31
    181e:	f0 ea       	ldi	r31, 0xA0	; 160
    1820:	ef 2e       	mov	r14, r31
    1822:	f2 e2       	ldi	r31, 0x22	; 34
    1824:	ff 2e       	mov	r15, r31
    1826:	f0 2d       	mov	r31, r0
    1828:	0f 2e       	mov	r0, r31
    182a:	f3 e1       	ldi	r31, 0x13	; 19
    182c:	af 2e       	mov	r10, r31
    182e:	f1 e2       	ldi	r31, 0x21	; 33
    1830:	bf 2e       	mov	r11, r31
    1832:	f0 2d       	mov	r31, r0
    1834:	0f 2e       	mov	r0, r31
    1836:	f2 eb       	ldi	r31, 0xB2	; 178
    1838:	cf 2e       	mov	r12, r31
    183a:	f2 e2       	ldi	r31, 0x22	; 34
    183c:	df 2e       	mov	r13, r31
    183e:	f0 2d       	mov	r31, r0
	{
		unsigned char cnt;

		for (cnt=0; cnt<NROFMODULES; cnt++)
		{
			if (cntStartPuls[cnt])
    1840:	d8 01       	movw	r26, r16
    1842:	8c 91       	ld	r24, X
    1844:	88 23       	and	r24, r24
    1846:	51 f0       	breq	.+20     	; 0x185c <main+0x21c>
			{
				cntStartPuls[cnt]--;
    1848:	81 50       	subi	r24, 0x01	; 1
    184a:	8c 93       	st	X, r24
				if (cntStartPuls[cnt]==0)
    184c:	81 11       	cpse	r24, r1
    184e:	06 c0       	rjmp	.+12     	; 0x185c <main+0x21c>
				{
					ConsoleFunctionData[cnt] &= START_FUNCTION^0xFF;
    1850:	f7 01       	movw	r30, r14
    1852:	80 81       	ld	r24, Z
    1854:	8d 7f       	andi	r24, 0xFD	; 253
    1856:	80 83       	st	Z, r24
					SendSerialData = 1;
    1858:	30 92 6f 22 	sts	0x226F, r3	; 0x80226f <SendSerialData>
				}
			}

			if (cntStartFunction[cnt])
    185c:	d6 01       	movw	r26, r12
    185e:	8c 91       	ld	r24, X
    1860:	88 23       	and	r24, r24
    1862:	51 f0       	breq	.+20     	; 0x1878 <main+0x238>
			{
				cntStartFunction[cnt]--;
    1864:	81 50       	subi	r24, 0x01	; 1
    1866:	8c 93       	st	X, r24
				if (cntStartFunction[cnt]==0)
    1868:	81 11       	cpse	r24, r1
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <main+0x238>
				{
					ConsoleFunctionData[cnt] &= START_FUNCTION^0xFF;
    186c:	f7 01       	movw	r30, r14
    186e:	80 81       	ld	r24, Z
    1870:	8d 7f       	andi	r24, 0xFD	; 253
    1872:	80 83       	st	Z, r24
					SendSerialData = 1;
    1874:	30 92 6f 22 	sts	0x226F, r3	; 0x80226f <SendSerialData>
				}
			}
			if (cntCueFunction[cnt])
    1878:	d5 01       	movw	r26, r10
    187a:	8c 91       	ld	r24, X
    187c:	88 23       	and	r24, r24
    187e:	61 f0       	breq	.+24     	; 0x1898 <main+0x258>
			{
				cntCueFunction[cnt]--;
    1880:	81 50       	subi	r24, 0x01	; 1
    1882:	8c 93       	st	X, r24
				if (cntCueFunction[cnt]==0)
    1884:	81 11       	cpse	r24, r1
    1886:	08 c0       	rjmp	.+16     	; 0x1898 <main+0x258>
				{
					ConsoleFunctionData[cnt] |= CUE_FUNCTION;
    1888:	f7 01       	movw	r30, r14
    188a:	80 81       	ld	r24, Z
    188c:	84 60       	ori	r24, 0x04	; 4
    188e:	80 83       	st	Z, r24
					CueControl();
    1890:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>
					SendSerialData = 1;
    1894:	30 92 6f 22 	sts	0x226F, r3	; 0x80226f <SendSerialData>
				}
			}
			if (cntMuteFunction[cnt])
    1898:	d4 01       	movw	r26, r8
    189a:	8c 91       	ld	r24, X
    189c:	88 23       	and	r24, r24
    189e:	51 f0       	breq	.+20     	; 0x18b4 <main+0x274>
			{
				cntMuteFunction[cnt]--;
    18a0:	81 50       	subi	r24, 0x01	; 1
    18a2:	8c 93       	st	X, r24
				if (cntMuteFunction[cnt]==0)
    18a4:	81 11       	cpse	r24, r1
    18a6:	06 c0       	rjmp	.+12     	; 0x18b4 <main+0x274>
				{
					char TelcoNr = GetTelcoNrFromModuleNr(cnt);

					ConsoleFunctionData[cnt] &= MUTE_FUNCTION^0xFF;
    18a8:	f7 01       	movw	r30, r14
    18aa:	80 81       	ld	r24, Z
    18ac:	8f 7e       	andi	r24, 0xEF	; 239
    18ae:	80 83       	st	Z, r24
						SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_MUTE;
						SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
						SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
					}

					SendSerialData = 1;
    18b0:	30 92 6f 22 	sts	0x226F, r3	; 0x80226f <SendSerialData>
    18b4:	0f 5f       	subi	r16, 0xFF	; 255
    18b6:	1f 4f       	sbci	r17, 0xFF	; 255
    18b8:	ff ef       	ldi	r31, 0xFF	; 255
    18ba:	8f 1a       	sub	r8, r31
    18bc:	9f 0a       	sbc	r9, r31
    18be:	8f ef       	ldi	r24, 0xFF	; 255
    18c0:	e8 1a       	sub	r14, r24
    18c2:	f8 0a       	sbc	r15, r24
    18c4:	9f ef       	ldi	r25, 0xFF	; 255
    18c6:	a9 1a       	sub	r10, r25
    18c8:	b9 0a       	sbc	r11, r25
    18ca:	af ef       	ldi	r26, 0xFF	; 255
    18cc:	ca 1a       	sub	r12, r26
    18ce:	da 0a       	sbc	r13, r26
	
	while(1)
	{
		unsigned char cnt;

		for (cnt=0; cnt<NROFMODULES; cnt++)
    18d0:	06 15       	cp	r16, r6
    18d2:	17 05       	cpc	r17, r7
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <main+0x298>
    18d6:	b4 cf       	rjmp	.-152    	; 0x1840 <main+0x200>
					SendSerialData = 1;
				}
			}
		}
				
		if (SendSerialData)
    18d8:	80 91 6f 22 	lds	r24, 0x226F	; 0x80226f <SendSerialData>
    18dc:	88 23       	and	r24, r24
    18de:	21 f0       	breq	.+8      	; 0x18e8 <main+0x2a8>
		{
			SendSerialData = 0;
    18e0:	10 92 6f 22 	sts	0x226F, r1	; 0x80226f <SendSerialData>
			SetConsoleData();
    18e4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <SetConsoleData>
		}
		
		if ((TimeAndDate.Seconds != OldTimeAndDate.Seconds) ) //&& (OperatingMode==NORMALMODE))
    18e8:	80 91 17 3a 	lds	r24, 0x3A17	; 0x803a17 <TimeAndDate+0x1>
    18ec:	90 91 1d 3a 	lds	r25, 0x3A1D	; 0x803a1d <OldTimeAndDate+0x1>
    18f0:	89 17       	cp	r24, r25
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <main+0x2b6>
    18f4:	4c c0       	rjmp	.+152    	; 0x198e <main+0x34e>
		{		
			TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    18f6:	20 91 19 3a 	lds	r18, 0x3A19	; 0x803a19 <TimeAndDate+0x3>
    18fa:	22 9d       	mul	r18, r2
    18fc:	91 2d       	mov	r25, r1
    18fe:	11 24       	eor	r1, r1
    1900:	96 95       	lsr	r25
    1902:	96 95       	lsr	r25
    1904:	96 95       	lsr	r25
    1906:	30 e3       	ldi	r19, 0x30	; 48
    1908:	39 0f       	add	r19, r25
    190a:	39 83       	std	Y+1, r19	; 0x01
			TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    190c:	99 0f       	add	r25, r25
    190e:	39 2f       	mov	r19, r25
    1910:	33 0f       	add	r19, r19
    1912:	33 0f       	add	r19, r19
    1914:	93 0f       	add	r25, r19
    1916:	29 1b       	sub	r18, r25
    1918:	20 5d       	subi	r18, 0xD0	; 208
    191a:	2a 83       	std	Y+2, r18	; 0x02
			TextBuffer[2] = ':';
    191c:	ba e3       	ldi	r27, 0x3A	; 58
    191e:	bb 83       	std	Y+3, r27	; 0x03
			TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    1920:	20 91 18 3a 	lds	r18, 0x3A18	; 0x803a18 <TimeAndDate+0x2>
    1924:	22 9d       	mul	r18, r2
    1926:	91 2d       	mov	r25, r1
    1928:	11 24       	eor	r1, r1
    192a:	96 95       	lsr	r25
    192c:	96 95       	lsr	r25
    192e:	96 95       	lsr	r25
    1930:	30 e3       	ldi	r19, 0x30	; 48
    1932:	39 0f       	add	r19, r25
    1934:	3c 83       	std	Y+4, r19	; 0x04
			TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    1936:	99 0f       	add	r25, r25
    1938:	39 2f       	mov	r19, r25
    193a:	33 0f       	add	r19, r19
    193c:	33 0f       	add	r19, r19
    193e:	93 0f       	add	r25, r19
    1940:	29 1b       	sub	r18, r25
    1942:	20 5d       	subi	r18, 0xD0	; 208
    1944:	2d 83       	std	Y+5, r18	; 0x05
			TextBuffer[5] = ':';
    1946:	be 83       	std	Y+6, r27	; 0x06
			TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    1948:	82 9d       	mul	r24, r2
    194a:	91 2d       	mov	r25, r1
    194c:	11 24       	eor	r1, r1
    194e:	96 95       	lsr	r25
    1950:	96 95       	lsr	r25
    1952:	96 95       	lsr	r25
    1954:	20 e3       	ldi	r18, 0x30	; 48
    1956:	29 0f       	add	r18, r25
    1958:	2f 83       	std	Y+7, r18	; 0x07
			TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    195a:	99 0f       	add	r25, r25
    195c:	29 2f       	mov	r18, r25
    195e:	22 0f       	add	r18, r18
    1960:	22 0f       	add	r18, r18
    1962:	92 0f       	add	r25, r18
    1964:	89 1b       	sub	r24, r25
    1966:	80 5d       	subi	r24, 0xD0	; 208
    1968:	88 87       	std	Y+8, r24	; 0x08
			TextBuffer[8] = 0;
    196a:	19 86       	std	Y+9, r1	; 0x09
			
			SetLCD(0,"\x84");
    196c:	65 e7       	ldi	r22, 0x75	; 117
    196e:	70 e2       	ldi	r23, 0x20	; 32
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
			SetLCD(1,TextBuffer);
    1978:	be 01       	movw	r22, r28
    197a:	6f 5f       	subi	r22, 0xFF	; 255
    197c:	7f 4f       	sbci	r23, 0xFF	; 255
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
			OldTimeAndDate.Seconds = TimeAndDate.Seconds;		
    1986:	80 91 17 3a 	lds	r24, 0x3A17	; 0x803a17 <TimeAndDate+0x1>
    198a:	80 93 1d 3a 	sts	0x3A1D, r24	; 0x803a1d <OldTimeAndDate+0x1>
		}
		
		ReadConsole();
    198e:	0e 94 db 23 	call	0x47b6	; 0x47b6 <ReadConsole>
		
		if (EventBufferPtrTop != EventBufferPtrBottom)
    1992:	e0 91 f5 20 	lds	r30, 0x20F5	; 0x8020f5 <EventBufferPtrBottom>
    1996:	80 91 8b 2b 	lds	r24, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    199a:	8e 17       	cp	r24, r30
    199c:	69 f0       	breq	.+26     	; 0x19b8 <main+0x378>
		{
			//USARTE0_DATA = EventBuffer[EventBufferPtrBottom];    // Aha hier weet je nu welke schakelaar er is ingedrukt
			DoEvent(EventBuffer[EventBufferPtrBottom++]);			
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	8e 0f       	add	r24, r30
    19a2:	80 93 f5 20 	sts	0x20F5, r24	; 0x8020f5 <EventBufferPtrBottom>
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	ee 0f       	add	r30, r30
    19aa:	ff 1f       	adc	r31, r31
    19ac:	e6 5f       	subi	r30, 0xF6	; 246
    19ae:	fa 4d       	sbci	r31, 0xDA	; 218
    19b0:	80 81       	ld	r24, Z
    19b2:	91 81       	ldd	r25, Z+1	; 0x01
    19b4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DoEvent>
			//USARTE0_DATA =EventBufferPtrBottom;
			//EventBufferPtrBottom++;			
		}

		
		ConsoleMasterSettings[3]=1;  // is nodig zodat RS232 communicatie altijd mogelijk is
    19b8:	e1 e0       	ldi	r30, 0x01	; 1
    19ba:	e0 93 91 2b 	sts	0x2B91, r30	; 0x802b91 <ConsoleMasterSettings+0x3>

		if (ConsoleMasterSettings[3])
		{
			if (SerialBufferInPtrTop != SerialBufferInPtrBottom)
    19be:	90 91 15 3a 	lds	r25, 0x3A15	; 0x803a15 <SerialBufferInPtrTop>
    19c2:	80 91 24 21 	lds	r24, 0x2124	; 0x802124 <SerialBufferInPtrBottom>
    19c6:	98 13       	cpse	r25, r24
						
			DoSerial();
    19c8:	0e 94 ac 24 	call	0x4958	; 0x4958 <DoSerial>

			if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom)  && SendSerialReady)
    19cc:	e0 91 93 2b 	lds	r30, 0x2B93	; 0x802b93 <SerialBufferOutPtrBottom>
    19d0:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    19d4:	8e 17       	cp	r24, r30
    19d6:	09 f4       	brne	.+2      	; 0x19da <main+0x39a>
    19d8:	19 cf       	rjmp	.-462    	; 0x180c <main+0x1cc>
    19da:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    19de:	88 23       	and	r24, r24
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <main+0x3a4>
    19e2:	14 cf       	rjmp	.-472    	; 0x180c <main+0x1cc>
			//if(SendSerialReady)
			{
				
				USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];				
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	8e 0f       	add	r24, r30
    19e8:	80 93 93 2b 	sts	0x2B93, r24	; 0x802b93 <SerialBufferOutPtrBottom>
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	eb 53       	subi	r30, 0x3B	; 59
    19f0:	fc 4d       	sbci	r31, 0xDC	; 220
    19f2:	80 81       	ld	r24, Z
    19f4:	d2 01       	movw	r26, r4
    19f6:	8c 93       	st	X, r24
				SendSerialReady = 0;
    19f8:	10 92 6a 22 	sts	0x226A, r1	; 0x80226a <SendSerialReady>
				while ( !( USARTE0.STATUS & USART_DREIF_bm) );
    19fc:	f2 01       	movw	r30, r4
    19fe:	81 81       	ldd	r24, Z+1	; 0x01
    1a00:	85 ff       	sbrs	r24, 5
    1a02:	fc cf       	rjmp	.-8      	; 0x19fc <main+0x3bc>
    1a04:	03 cf       	rjmp	.-506    	; 0x180c <main+0x1cc>

00001a06 <SetupTimer0>:
struct TimeAndDateStruct OldTimeAndDate, TimeAndDate;


void SetupTimer0()
{	
	cli();
    1a06:	f8 94       	cli

	// Clock source: ClkPer/4
	TCC0_CTRLA=TC_CLKSEL_DIV4_gc;
    1a08:	83 e0       	ldi	r24, 0x03	; 3
    1a0a:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x7de800>
	//TCC0_CTRLA = 0x02;


	// Overflow interrupt: Low Level
	// Error interrupt: Disabled
	TCC0_INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_MED_gc;
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x7de806>
	//TCC0_INTCTRLA = 0x02;
	
	
	// Set Period register
	TCC0_PER=0x5A5D;
    1a14:	8d e5       	ldi	r24, 0x5D	; 93
    1a16:	9a e5       	ldi	r25, 0x5A	; 90
    1a18:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7de826>
    1a1c:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x7de827>

	PMIC_CTRL |= 0x02;
    1a20:	e2 ea       	ldi	r30, 0xA2	; 162
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	82 60       	ori	r24, 0x02	; 2
    1a28:	80 83       	st	Z, r24
	
	sei();	
    1a2a:	78 94       	sei
    1a2c:	08 95       	ret

00001a2e <__vector_14>:
}

ISR(TCC0_OVF_vect) 
{
    1a2e:	1f 92       	push	r1
    1a30:	0f 92       	push	r0
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	0f 92       	push	r0
    1a36:	11 24       	eor	r1, r1
    1a38:	08 b6       	in	r0, 0x38	; 56
    1a3a:	0f 92       	push	r0
    1a3c:	18 be       	out	0x38, r1	; 56
    1a3e:	0b b6       	in	r0, 0x3b	; 59
    1a40:	0f 92       	push	r0
    1a42:	1b be       	out	0x3b, r1	; 59
    1a44:	8f 93       	push	r24
    1a46:	ef 93       	push	r30
    1a48:	ff 93       	push	r31

	//GlobalTimerActive=1;     // willem
	 Count++;
    1a4a:	80 91 1a 3a 	lds	r24, 0x3A1A	; 0x803a1a <Count>
    1a4e:	8f 5f       	subi	r24, 0xFF	; 255
    1a50:	80 93 1a 3a 	sts	0x3A1A, r24	; 0x803a1a <Count>
	 if (Count>9) //Was before 10.
    1a54:	8a 30       	cpi	r24, 0x0A	; 10
    1a56:	18 f0       	brcs	.+6      	; 0x1a5e <__vector_14+0x30>
		 Count = 0;
    1a58:	10 92 1a 3a 	sts	0x3A1A, r1	; 0x803a1a <Count>
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <__vector_14+0x34>

	 if ((Count==0x00) && (GlobalTimerActive))
    1a5e:	81 11       	cpse	r24, r1
    1a60:	2c c0       	rjmp	.+88     	; 0x1aba <__vector_14+0x8c>
    1a62:	80 91 1b 3a 	lds	r24, 0x3A1B	; 0x803a1b <GlobalTimerActive>
    1a66:	88 23       	and	r24, r24
    1a68:	41 f1       	breq	.+80     	; 0x1aba <__vector_14+0x8c>
	 {
		 	//PORTA_OUTTGL |= (1<<0);    // ----------------------------------------------------------------
		 	//PORTA_OUTTGL |= 0x80;
			TimeAndDate.Frames+=10;
    1a6a:	80 91 16 3a 	lds	r24, 0x3A16	; 0x803a16 <TimeAndDate>
    1a6e:	86 5f       	subi	r24, 0xF6	; 246
			
			if (TimeAndDate.Frames>90)
    1a70:	8b 35       	cpi	r24, 0x5B	; 91
    1a72:	18 f4       	brcc	.+6      	; 0x1a7a <__vector_14+0x4c>

	 if ((Count==0x00) && (GlobalTimerActive))
	 {
		 	//PORTA_OUTTGL |= (1<<0);    // ----------------------------------------------------------------
		 	//PORTA_OUTTGL |= 0x80;
			TimeAndDate.Frames+=10;
    1a74:	80 93 16 3a 	sts	0x3A16, r24	; 0x803a16 <TimeAndDate>
    1a78:	20 c0       	rjmp	.+64     	; 0x1aba <__vector_14+0x8c>
			
			if (TimeAndDate.Frames>90)
			{


				TimeAndDate.Frames = 0;
    1a7a:	e6 e1       	ldi	r30, 0x16	; 22
    1a7c:	fa e3       	ldi	r31, 0x3A	; 58
    1a7e:	10 82       	st	Z, r1
				TimeAndDate.Seconds++;
    1a80:	81 81       	ldd	r24, Z+1	; 0x01
    1a82:	8f 5f       	subi	r24, 0xFF	; 255
				if (TimeAndDate.Seconds>59)
    1a84:	8c 33       	cpi	r24, 0x3C	; 60
    1a86:	18 f4       	brcc	.+6      	; 0x1a8e <__vector_14+0x60>
			if (TimeAndDate.Frames>90)
			{


				TimeAndDate.Frames = 0;
				TimeAndDate.Seconds++;
    1a88:	80 93 17 3a 	sts	0x3A17, r24	; 0x803a17 <TimeAndDate+0x1>
    1a8c:	16 c0       	rjmp	.+44     	; 0x1aba <__vector_14+0x8c>
				if (TimeAndDate.Seconds>59)
				{
					
					TimeAndDate.Seconds = 0;
    1a8e:	e6 e1       	ldi	r30, 0x16	; 22
    1a90:	fa e3       	ldi	r31, 0x3A	; 58
    1a92:	11 82       	std	Z+1, r1	; 0x01
					TimeAndDate.Minutes++;
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	8f 5f       	subi	r24, 0xFF	; 255
					if (TimeAndDate.Minutes>59)
    1a98:	8c 33       	cpi	r24, 0x3C	; 60
    1a9a:	18 f4       	brcc	.+6      	; 0x1aa2 <__vector_14+0x74>
				TimeAndDate.Seconds++;
				if (TimeAndDate.Seconds>59)
				{
					
					TimeAndDate.Seconds = 0;
					TimeAndDate.Minutes++;
    1a9c:	80 93 18 3a 	sts	0x3A18, r24	; 0x803a18 <TimeAndDate+0x2>
    1aa0:	0c c0       	rjmp	.+24     	; 0x1aba <__vector_14+0x8c>
					if (TimeAndDate.Minutes>59)
					{
						TimeAndDate.Minutes = 0;
    1aa2:	e6 e1       	ldi	r30, 0x16	; 22
    1aa4:	fa e3       	ldi	r31, 0x3A	; 58
    1aa6:	12 82       	std	Z+2, r1	; 0x02
						TimeAndDate.Hours++;
    1aa8:	83 81       	ldd	r24, Z+3	; 0x03
    1aaa:	8f 5f       	subi	r24, 0xFF	; 255
						if (TimeAndDate.Hours>23)
    1aac:	88 31       	cpi	r24, 0x18	; 24
    1aae:	18 f4       	brcc	.+6      	; 0x1ab6 <__vector_14+0x88>
					TimeAndDate.Seconds = 0;
					TimeAndDate.Minutes++;
					if (TimeAndDate.Minutes>59)
					{
						TimeAndDate.Minutes = 0;
						TimeAndDate.Hours++;
    1ab0:	80 93 19 3a 	sts	0x3A19, r24	; 0x803a19 <TimeAndDate+0x3>
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <__vector_14+0x8c>
						if (TimeAndDate.Hours>23)
						{
							TimeAndDate.Hours = 0;
    1ab6:	10 92 19 3a 	sts	0x3A19, r1	; 0x803a19 <TimeAndDate+0x3>
					}
				}
		 }
	}

    1aba:	ff 91       	pop	r31
    1abc:	ef 91       	pop	r30
    1abe:	8f 91       	pop	r24
    1ac0:	0f 90       	pop	r0
    1ac2:	0b be       	out	0x3b, r0	; 59
    1ac4:	0f 90       	pop	r0
    1ac6:	08 be       	out	0x38, r0	; 56
    1ac8:	0f 90       	pop	r0
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	0f 90       	pop	r0
    1ace:	1f 90       	pop	r1
    1ad0:	18 95       	reti

00001ad2 <Delay>:
* delay(100) = ca. 1 Sec                                        *
****************************************************************/
void Delay(int tijd)
{
	int x, y;
	for (x = 1; x <= tijd; x++)
    1ad2:	18 16       	cp	r1, r24
    1ad4:	19 06       	cpc	r1, r25
    1ad6:	54 f0       	brlt	.+20     	; 0x1aec <Delay+0x1a>
    1ad8:	08 95       	ret
	{
		for (y = 0; y <= 10000; y++)
		{
			__asm__ volatile("" : "+g" (tijd) : :);
    1ada:	21 50       	subi	r18, 0x01	; 1
    1adc:	31 09       	sbc	r19, r1
void Delay(int tijd)
{
	int x, y;
	for (x = 1; x <= tijd; x++)
	{
		for (y = 0; y <= 10000; y++)
    1ade:	e9 f7       	brne	.-6      	; 0x1ada <Delay+0x8>
* delay(100) = ca. 1 Sec                                        *
****************************************************************/
void Delay(int tijd)
{
	int x, y;
	for (x = 1; x <= tijd; x++)
    1ae0:	4f 5f       	subi	r20, 0xFF	; 255
    1ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae4:	84 17       	cp	r24, r20
    1ae6:	95 07       	cpc	r25, r21
    1ae8:	1c f4       	brge	.+6      	; 0x1af0 <Delay+0x1e>
    1aea:	08 95       	ret
    1aec:	41 e0       	ldi	r20, 0x01	; 1
    1aee:	50 e0       	ldi	r21, 0x00	; 0

/****************************************************************
* delay(100) = ca. 1 Sec                                        *
****************************************************************/
void Delay(int tijd)
{
    1af0:	21 e1       	ldi	r18, 0x11	; 17
    1af2:	37 e2       	ldi	r19, 0x27	; 39
    1af4:	f2 cf       	rjmp	.-28     	; 0x1ada <Delay+0x8>

00001af6 <Delay_ms>:
		}
	}
}

void Delay_ms(int tijd)
{
    1af6:	29 ec       	ldi	r18, 0xC9	; 201
    1af8:	30 e0       	ldi	r19, 0x00	; 0
	int y;
	//for (x = 1; x <= tijd; x++)
	//{
		for (y = 0; y <= 200; y++)
		{
			__asm__ volatile("" : "+g" (tijd) : :);
    1afa:	21 50       	subi	r18, 0x01	; 1
    1afc:	31 09       	sbc	r19, r1
void Delay_ms(int tijd)
{
	int y;
	//for (x = 1; x <= tijd; x++)
	//{
		for (y = 0; y <= 200; y++)
    1afe:	e9 f7       	brne	.-6      	; 0x1afa <Delay_ms+0x4>
			//PCON |= 0x10;
			//T3 = 0;
			;
		}
	//}
    1b00:	08 95       	ret

00001b02 <DoEvent>:


//unsigned char  CS_CC;

void DoEvent(unsigned int Event)
{
    1b02:	cf 92       	push	r12
    1b04:	df 92       	push	r13
    1b06:	ef 92       	push	r14
    1b08:	ff 92       	push	r15
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	61 97       	sbiw	r28, 0x11	; 17
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	de bf       	out	0x3e, r29	; 62
	unsigned char EventType = (Event&0x87);
	unsigned char Module = (Event>>3)&0x0F;
    1b1c:	9c 01       	movw	r18, r24
    1b1e:	36 95       	lsr	r19
    1b20:	27 95       	ror	r18
    1b22:	36 95       	lsr	r19
    1b24:	27 95       	ror	r18
    1b26:	36 95       	lsr	r19
    1b28:	27 95       	ror	r18
    1b2a:	42 2f       	mov	r20, r18
    1b2c:	4f 70       	andi	r20, 0x0F	; 15
    1b2e:	e4 2e       	mov	r14, r20
	unsigned char EventOn = !(Event&0x100);
    1b30:	8c 01       	movw	r16, r24
    1b32:	00 27       	eor	r16, r16
    1b34:	11 70       	andi	r17, 0x01	; 1
	
	if ((Event&0x287) == EXT_MUTE)
    1b36:	9c 01       	movw	r18, r24
    1b38:	27 78       	andi	r18, 0x87	; 135
    1b3a:	32 70       	andi	r19, 0x02	; 2
    1b3c:	27 38       	cpi	r18, 0x87	; 135
    1b3e:	32 40       	sbci	r19, 0x02	; 2
    1b40:	11 f4       	brne	.+4      	; 0x1b46 <DoEvent+0x44>
    1b42:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <__DATA_REGION_LENGTH__+0x1de4>
	{
		EventType = MUTE;
	}

	switch (EventType)
    1b46:	87 78       	andi	r24, 0x87	; 135
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	88 27       	eor	r24, r24
    1b4e:	e2 50       	subi	r30, 0x02	; 2
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	8f 4f       	sbci	r24, 0xFF	; 255
    1b54:	0c 94 98 28 	jmp	0x5130	; 0x5130 <__tablejump2__>
	{
		case EXTERNREMOTEIN:
		{
			if (OperatingMode != MODULEMODE)
    1b58:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    1b5c:	81 30       	cpi	r24, 0x01	; 1
    1b5e:	11 f4       	brne	.+4      	; 0x1b64 <DoEvent+0x62>
    1b60:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			{
				switch (ModuleType[Module])
    1b64:	e4 2e       	mov	r14, r20
    1b66:	f1 2c       	mov	r15, r1
    1b68:	f7 01       	movw	r30, r14
    1b6a:	e0 59       	subi	r30, 0x90	; 144
    1b6c:	fd 4d       	sbci	r31, 0xDD	; 221
    1b6e:	80 81       	ld	r24, Z
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	29 f0       	breq	.+10     	; 0x1b7e <DoEvent+0x7c>
    1b74:	82 30       	cpi	r24, 0x02	; 2
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <DoEvent+0x78>
    1b78:	4e c2       	rjmp	.+1180   	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
    1b7a:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
				{
					case TRIPLE:
					{ // TRIPLE
						if (EventOn)
    1b7e:	01 2b       	or	r16, r17
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <DoEvent+0x82>
    1b82:	aa c1       	rjmp	.+852    	; 0x1ed8 <DoEvent+0x3d6>
						{
							if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMMIC]))
    1b84:	f7 01       	movw	r30, r14
    1b86:	ee 0f       	add	r30, r30
    1b88:	ff 1f       	adc	r31, r31
    1b8a:	ee 0f       	add	r30, r30
    1b8c:	ff 1f       	adc	r31, r31
    1b8e:	ee 0f       	add	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	e5 5f       	subi	r30, 0xF5	; 245
    1b94:	f4 4d       	sbci	r31, 0xD4	; 212
    1b96:	87 81       	ldd	r24, Z+7	; 0x07
    1b98:	88 23       	and	r24, r24
    1b9a:	0c f0       	brlt	.+2      	; 0x1b9e <DoEvent+0x9c>
    1b9c:	56 c0       	rjmp	.+172    	; 0x1c4a <DoEvent+0x148>
    1b9e:	8d e1       	ldi	r24, 0x1D	; 29
    1ba0:	8e 9d       	mul	r24, r14
    1ba2:	f0 01       	movw	r30, r0
    1ba4:	8f 9d       	mul	r24, r15
    1ba6:	f0 0d       	add	r31, r0
    1ba8:	11 24       	eor	r1, r1
    1baa:	e5 5e       	subi	r30, 0xE5	; 229
    1bac:	f7 4c       	sbci	r31, 0xC7	; 199
    1bae:	84 85       	ldd	r24, Z+12	; 0x0c
    1bb0:	88 23       	and	r24, r24
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <DoEvent+0xb4>
    1bb4:	4a c0       	rjmp	.+148    	; 0x1c4a <DoEvent+0x148>
							{
								ConsoleFunctionData[Module] |= CUE_LED;
								ConsoleFunctionData[Module] |= CUE_FUNCTION;
    1bb6:	0f 2e       	mov	r0, r31
    1bb8:	f0 ea       	ldi	r31, 0xA0	; 160
    1bba:	cf 2e       	mov	r12, r31
    1bbc:	f2 e2       	ldi	r31, 0x22	; 34
    1bbe:	df 2e       	mov	r13, r31
    1bc0:	f0 2d       	mov	r31, r0
    1bc2:	87 01       	movw	r16, r14
    1bc4:	00 56       	subi	r16, 0x60	; 96
    1bc6:	1d 4d       	sbci	r17, 0xDD	; 221
    1bc8:	f8 01       	movw	r30, r16
    1bca:	80 81       	ld	r24, Z
    1bcc:	8c 60       	ori	r24, 0x0C	; 12
    1bce:	80 83       	st	Z, r24
	
								//DJ-Control
								DJControl();
    1bd0:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>
	
								ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    1bd4:	d6 01       	movw	r26, r12
    1bd6:	50 96       	adiw	r26, 0x10	; 16
    1bd8:	8c 91       	ld	r24, X
    1bda:	50 97       	sbiw	r26, 0x10	; 16
    1bdc:	87 7f       	andi	r24, 0xF7	; 247
    1bde:	50 96       	adiw	r26, 0x10	; 16
    1be0:	8c 93       	st	X, r24
								if (ConsoleFunctionData[Module]&REMOTE_FUNCTION)
    1be2:	f8 01       	movw	r30, r16
    1be4:	90 81       	ld	r25, Z
    1be6:	90 ff       	sbrs	r25, 0
    1be8:	04 c0       	rjmp	.+8      	; 0x1bf2 <DoEvent+0xf0>
									ConsoleFunctionData[Module]|=MUTE_FUNCTION;
    1bea:	f8 01       	movw	r30, r16
    1bec:	90 61       	ori	r25, 0x10	; 16
    1bee:	90 83       	st	Z, r25
    1bf0:	20 c0       	rjmp	.+64     	; 0x1c32 <DoEvent+0x130>
								else if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][ANNMIC]) && (ConsoleFunctionData[Module]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    1bf2:	f7 01       	movw	r30, r14
    1bf4:	ee 0f       	add	r30, r30
    1bf6:	ff 1f       	adc	r31, r31
    1bf8:	ee 0f       	add	r30, r30
    1bfa:	ff 1f       	adc	r31, r31
    1bfc:	ee 0f       	add	r30, r30
    1bfe:	ff 1f       	adc	r31, r31
    1c00:	e5 5f       	subi	r30, 0xF5	; 245
    1c02:	f4 4d       	sbci	r31, 0xD4	; 212
    1c04:	27 81       	ldd	r18, Z+7	; 0x07
    1c06:	22 23       	and	r18, r18
    1c08:	a4 f4       	brge	.+40     	; 0x1c32 <DoEvent+0x130>
    1c0a:	2d e1       	ldi	r18, 0x1D	; 29
    1c0c:	2e 9d       	mul	r18, r14
    1c0e:	f0 01       	movw	r30, r0
    1c10:	2f 9d       	mul	r18, r15
    1c12:	f0 0d       	add	r31, r0
    1c14:	11 24       	eor	r1, r1
    1c16:	e5 5e       	subi	r30, 0xE5	; 229
    1c18:	f7 4c       	sbci	r31, 0xC7	; 199
    1c1a:	26 85       	ldd	r18, Z+14	; 0x0e
    1c1c:	22 23       	and	r18, r18
    1c1e:	49 f0       	breq	.+18     	; 0x1c32 <DoEvent+0x130>
    1c20:	94 ff       	sbrs	r25, 4
    1c22:	07 c0       	rjmp	.+14     	; 0x1c32 <DoEvent+0x130>
    1c24:	90 91 90 2b 	lds	r25, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    1c28:	99 23       	and	r25, r25
    1c2a:	19 f0       	breq	.+6      	; 0x1c32 <DoEvent+0x130>
								{
									ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    1c2c:	88 60       	ori	r24, 0x08	; 8
    1c2e:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <ConsoleFunctionData+0x10>
								}

								CUEByRemoteMIC[Module] = 1;
    1c32:	11 e0       	ldi	r17, 0x01	; 1
    1c34:	f7 01       	movw	r30, r14
    1c36:	e9 5f       	subi	r30, 0xF9	; 249
    1c38:	fd 4c       	sbci	r31, 0xCD	; 205
    1c3a:	10 83       	st	Z, r17
								CheckCUEByRemoteMIC();
    1c3c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <CheckCUEByRemoteMIC>
								CheckTBMic();
    1c40:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CheckTBMic>
								SendSerialData = 1;
    1c44:	10 93 6f 22 	sts	0x226F, r17	; 0x80226f <SendSerialData>
    1c48:	c5 c0       	rjmp	.+394    	; 0x1dd4 <DoEvent+0x2d2>
							}
							else if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][REMLINEA]))
    1c4a:	f7 01       	movw	r30, r14
    1c4c:	ee 0f       	add	r30, r30
    1c4e:	ff 1f       	adc	r31, r31
    1c50:	ee 0f       	add	r30, r30
    1c52:	ff 1f       	adc	r31, r31
    1c54:	ee 0f       	add	r30, r30
    1c56:	ff 1f       	adc	r31, r31
    1c58:	e5 5f       	subi	r30, 0xF5	; 245
    1c5a:	f4 4d       	sbci	r31, 0xD4	; 212
    1c5c:	86 81       	ldd	r24, Z+6	; 0x06
    1c5e:	88 23       	and	r24, r24
    1c60:	0c f4       	brge	.+2      	; 0x1c64 <DoEvent+0x162>
    1c62:	5d c0       	rjmp	.+186    	; 0x1d1e <DoEvent+0x21c>
    1c64:	8d e1       	ldi	r24, 0x1D	; 29
    1c66:	8e 9d       	mul	r24, r14
    1c68:	f0 01       	movw	r30, r0
    1c6a:	8f 9d       	mul	r24, r15
    1c6c:	f0 0d       	add	r31, r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	e5 5e       	subi	r30, 0xE5	; 229
    1c72:	f7 4c       	sbci	r31, 0xC7	; 199
    1c74:	82 85       	ldd	r24, Z+10	; 0x0a
    1c76:	88 23       	and	r24, r24
    1c78:	11 f4       	brne	.+4      	; 0x1c7e <DoEvent+0x17c>
    1c7a:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__DATA_REGION_LENGTH__+0x1eb6>
							{
								ConsoleFunctionData[Module] |= CUE_LED;
								ConsoleFunctionData[Module] |= CUE_FUNCTION;
    1c7e:	f7 01       	movw	r30, r14
    1c80:	e0 56       	subi	r30, 0x60	; 96
    1c82:	fd 4d       	sbci	r31, 0xDD	; 221
    1c84:	80 81       	ld	r24, Z
    1c86:	8c 60       	ori	r24, 0x0C	; 12
    1c88:	80 83       	st	Z, r24

								//DJ-Control
								DJControl();
    1c8a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>

								if (ConsoleModuleSettings[Module][MICATLINEA])
    1c8e:	8d e1       	ldi	r24, 0x1D	; 29
    1c90:	8e 9d       	mul	r24, r14
    1c92:	f0 01       	movw	r30, r0
    1c94:	8f 9d       	mul	r24, r15
    1c96:	f0 0d       	add	r31, r0
    1c98:	11 24       	eor	r1, r1
    1c9a:	e5 5e       	subi	r30, 0xE5	; 229
    1c9c:	f7 4c       	sbci	r31, 0xC7	; 199
    1c9e:	87 89       	ldd	r24, Z+23	; 0x17
    1ca0:	88 23       	and	r24, r24
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <DoEvent+0x1a4>
    1ca4:	97 c0       	rjmp	.+302    	; 0x1dd4 <DoEvent+0x2d2>
								{
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    1ca6:	e0 ea       	ldi	r30, 0xA0	; 160
    1ca8:	f2 e2       	ldi	r31, 0x22	; 34
    1caa:	80 89       	ldd	r24, Z+16	; 0x10
    1cac:	87 7f       	andi	r24, 0xF7	; 247
    1cae:	80 8b       	std	Z+16, r24	; 0x10
									if (ConsoleFunctionData[Module]&REMOTE_FUNCTION)
    1cb0:	f7 01       	movw	r30, r14
    1cb2:	e0 56       	subi	r30, 0x60	; 96
    1cb4:	fd 4d       	sbci	r31, 0xDD	; 221
    1cb6:	80 81       	ld	r24, Z
    1cb8:	80 ff       	sbrs	r24, 0
    1cba:	05 c0       	rjmp	.+10     	; 0x1cc6 <DoEvent+0x1c4>
										ConsoleFunctionData[Module]|=MUTE_FUNCTION;
    1cbc:	f7 01       	movw	r30, r14
    1cbe:	e0 56       	subi	r30, 0x60	; 96
    1cc0:	fd 4d       	sbci	r31, 0xDD	; 221
    1cc2:	80 61       	ori	r24, 0x10	; 16
    1cc4:	80 83       	st	Z, r24
									if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][ANNMIC]) && (ConsoleFunctionData[Module]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    1cc6:	f7 01       	movw	r30, r14
    1cc8:	ee 0f       	add	r30, r30
    1cca:	ff 1f       	adc	r31, r31
    1ccc:	ee 0f       	add	r30, r30
    1cce:	ff 1f       	adc	r31, r31
    1cd0:	ee 0f       	add	r30, r30
    1cd2:	ff 1f       	adc	r31, r31
    1cd4:	e5 5f       	subi	r30, 0xF5	; 245
    1cd6:	f4 4d       	sbci	r31, 0xD4	; 212
    1cd8:	86 81       	ldd	r24, Z+6	; 0x06
    1cda:	88 23       	and	r24, r24
    1cdc:	d4 f0       	brlt	.+52     	; 0x1d12 <DoEvent+0x210>
    1cde:	8d e1       	ldi	r24, 0x1D	; 29
    1ce0:	8e 9d       	mul	r24, r14
    1ce2:	f0 01       	movw	r30, r0
    1ce4:	8f 9d       	mul	r24, r15
    1ce6:	f0 0d       	add	r31, r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	e5 5e       	subi	r30, 0xE5	; 229
    1cec:	f7 4c       	sbci	r31, 0xC7	; 199
    1cee:	86 85       	ldd	r24, Z+14	; 0x0e
    1cf0:	88 23       	and	r24, r24
    1cf2:	79 f0       	breq	.+30     	; 0x1d12 <DoEvent+0x210>
    1cf4:	f7 01       	movw	r30, r14
    1cf6:	e0 56       	subi	r30, 0x60	; 96
    1cf8:	fd 4d       	sbci	r31, 0xDD	; 221
    1cfa:	80 81       	ld	r24, Z
    1cfc:	84 ff       	sbrs	r24, 4
    1cfe:	09 c0       	rjmp	.+18     	; 0x1d12 <DoEvent+0x210>
    1d00:	80 91 90 2b 	lds	r24, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    1d04:	88 23       	and	r24, r24
    1d06:	29 f0       	breq	.+10     	; 0x1d12 <DoEvent+0x210>
									{
											ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    1d08:	e0 ea       	ldi	r30, 0xA0	; 160
    1d0a:	f2 e2       	ldi	r31, 0x22	; 34
    1d0c:	80 89       	ldd	r24, Z+16	; 0x10
    1d0e:	88 60       	ori	r24, 0x08	; 8
    1d10:	80 8b       	std	Z+16, r24	; 0x10
									}
									CheckTBMic();
    1d12:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CheckTBMic>
									SendSerialData = 1;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    1d1c:	5b c0       	rjmp	.+182    	; 0x1dd4 <DoEvent+0x2d2>
								}
							}
							else if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][REMLINEB]))
    1d1e:	8d e1       	ldi	r24, 0x1D	; 29
    1d20:	8e 9d       	mul	r24, r14
    1d22:	f0 01       	movw	r30, r0
    1d24:	8f 9d       	mul	r24, r15
    1d26:	f0 0d       	add	r31, r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	e5 5e       	subi	r30, 0xE5	; 229
    1d2c:	f7 4c       	sbci	r31, 0xC7	; 199
    1d2e:	83 85       	ldd	r24, Z+11	; 0x0b
    1d30:	88 23       	and	r24, r24
    1d32:	11 f4       	brne	.+4      	; 0x1d38 <DoEvent+0x236>
    1d34:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__DATA_REGION_LENGTH__+0x1ed6>
							{
								ConsoleFunctionData[Module] |= CUE_LED;
								ConsoleFunctionData[Module] |= CUE_FUNCTION;
    1d38:	f7 01       	movw	r30, r14
    1d3a:	e0 56       	subi	r30, 0x60	; 96
    1d3c:	fd 4d       	sbci	r31, 0xDD	; 221
    1d3e:	80 81       	ld	r24, Z
    1d40:	8c 60       	ori	r24, 0x0C	; 12
    1d42:	80 83       	st	Z, r24

								//DJ-Control
								DJControl();
    1d44:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>

								if (ConsoleModuleSettings[Module][MICATLINEB])
    1d48:	8d e1       	ldi	r24, 0x1D	; 29
    1d4a:	8e 9d       	mul	r24, r14
    1d4c:	f0 01       	movw	r30, r0
    1d4e:	8f 9d       	mul	r24, r15
    1d50:	f0 0d       	add	r31, r0
    1d52:	11 24       	eor	r1, r1
    1d54:	e5 5e       	subi	r30, 0xE5	; 229
    1d56:	f7 4c       	sbci	r31, 0xC7	; 199
    1d58:	80 8d       	ldd	r24, Z+24	; 0x18
    1d5a:	88 23       	and	r24, r24
    1d5c:	d9 f1       	breq	.+118    	; 0x1dd4 <DoEvent+0x2d2>
								{
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    1d5e:	e0 ea       	ldi	r30, 0xA0	; 160
    1d60:	f2 e2       	ldi	r31, 0x22	; 34
    1d62:	80 89       	ldd	r24, Z+16	; 0x10
    1d64:	87 7f       	andi	r24, 0xF7	; 247
    1d66:	80 8b       	std	Z+16, r24	; 0x10
									if (ConsoleFunctionData[Module]&REMOTE_FUNCTION)
    1d68:	f7 01       	movw	r30, r14
    1d6a:	e0 56       	subi	r30, 0x60	; 96
    1d6c:	fd 4d       	sbci	r31, 0xDD	; 221
    1d6e:	80 81       	ld	r24, Z
    1d70:	80 ff       	sbrs	r24, 0
    1d72:	05 c0       	rjmp	.+10     	; 0x1d7e <DoEvent+0x27c>
										ConsoleFunctionData[Module]|=MUTE_FUNCTION;
    1d74:	f7 01       	movw	r30, r14
    1d76:	e0 56       	subi	r30, 0x60	; 96
    1d78:	fd 4d       	sbci	r31, 0xDD	; 221
    1d7a:	80 61       	ori	r24, 0x10	; 16
    1d7c:	80 83       	st	Z, r24
									if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][ANNMIC]) && (ConsoleFunctionData[Module]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    1d7e:	f7 01       	movw	r30, r14
    1d80:	ee 0f       	add	r30, r30
    1d82:	ff 1f       	adc	r31, r31
    1d84:	ee 0f       	add	r30, r30
    1d86:	ff 1f       	adc	r31, r31
    1d88:	ee 0f       	add	r30, r30
    1d8a:	ff 1f       	adc	r31, r31
    1d8c:	e5 5f       	subi	r30, 0xF5	; 245
    1d8e:	f4 4d       	sbci	r31, 0xD4	; 212
    1d90:	86 81       	ldd	r24, Z+6	; 0x06
    1d92:	88 23       	and	r24, r24
    1d94:	d4 f4       	brge	.+52     	; 0x1dca <DoEvent+0x2c8>
    1d96:	8d e1       	ldi	r24, 0x1D	; 29
    1d98:	8e 9d       	mul	r24, r14
    1d9a:	f0 01       	movw	r30, r0
    1d9c:	8f 9d       	mul	r24, r15
    1d9e:	f0 0d       	add	r31, r0
    1da0:	11 24       	eor	r1, r1
    1da2:	e5 5e       	subi	r30, 0xE5	; 229
    1da4:	f7 4c       	sbci	r31, 0xC7	; 199
    1da6:	86 85       	ldd	r24, Z+14	; 0x0e
    1da8:	88 23       	and	r24, r24
    1daa:	79 f0       	breq	.+30     	; 0x1dca <DoEvent+0x2c8>
    1dac:	f7 01       	movw	r30, r14
    1dae:	e0 56       	subi	r30, 0x60	; 96
    1db0:	fd 4d       	sbci	r31, 0xDD	; 221
    1db2:	80 81       	ld	r24, Z
    1db4:	84 ff       	sbrs	r24, 4
    1db6:	09 c0       	rjmp	.+18     	; 0x1dca <DoEvent+0x2c8>
    1db8:	80 91 90 2b 	lds	r24, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	29 f0       	breq	.+10     	; 0x1dca <DoEvent+0x2c8>
									{
											ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    1dc0:	e0 ea       	ldi	r30, 0xA0	; 160
    1dc2:	f2 e2       	ldi	r31, 0x22	; 34
    1dc4:	80 89       	ldd	r24, Z+16	; 0x10
    1dc6:	88 60       	ori	r24, 0x08	; 8
    1dc8:	80 8b       	std	Z+16, r24	; 0x10
									}
  								CheckTBMic();
    1dca:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CheckTBMic>
									SendSerialData = 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
								}
							}

							// REMOTE ON
							if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMONMIC]))
    1dd4:	f7 01       	movw	r30, r14
    1dd6:	ee 0f       	add	r30, r30
    1dd8:	ff 1f       	adc	r31, r31
    1dda:	ee 0f       	add	r30, r30
    1ddc:	ff 1f       	adc	r31, r31
    1dde:	ee 0f       	add	r30, r30
    1de0:	ff 1f       	adc	r31, r31
    1de2:	e5 5f       	subi	r30, 0xF5	; 245
    1de4:	f4 4d       	sbci	r31, 0xD4	; 212
    1de6:	87 81       	ldd	r24, Z+7	; 0x07
    1de8:	88 23       	and	r24, r24
    1dea:	0c f5       	brge	.+66     	; 0x1e2e <DoEvent+0x32c>
    1dec:	9d e1       	ldi	r25, 0x1D	; 29
    1dee:	9e 9d       	mul	r25, r14
    1df0:	f0 01       	movw	r30, r0
    1df2:	9f 9d       	mul	r25, r15
    1df4:	f0 0d       	add	r31, r0
    1df6:	11 24       	eor	r1, r1
    1df8:	e5 5e       	subi	r30, 0xE5	; 229
    1dfa:	f7 4c       	sbci	r31, 0xC7	; 199
    1dfc:	91 8d       	ldd	r25, Z+25	; 0x19
    1dfe:	99 23       	and	r25, r25
    1e00:	b1 f0       	breq	.+44     	; 0x1e2e <DoEvent+0x32c>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | ON;
    1e02:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	8e 0f       	add	r24, r30
    1e0a:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	ee 0f       	add	r30, r30
    1e12:	ff 1f       	adc	r31, r31
    1e14:	e6 5f       	subi	r30, 0xF6	; 246
    1e16:	fa 4d       	sbci	r31, 0xDA	; 218
    1e18:	c7 01       	movw	r24, r14
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	83 60       	ori	r24, 0x03	; 3
    1e28:	80 83       	st	Z, r24
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	51 c0       	rjmp	.+162    	; 0x1ed0 <DoEvent+0x3ce>
							}
							else if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][REMONLINEA]) && (!(ModuleData[Module][MIC_RING]&0x80)))
    1e2e:	f7 01       	movw	r30, r14
    1e30:	ee 0f       	add	r30, r30
    1e32:	ff 1f       	adc	r31, r31
    1e34:	ee 0f       	add	r30, r30
    1e36:	ff 1f       	adc	r31, r31
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	e5 5f       	subi	r30, 0xF5	; 245
    1e3e:	f4 4d       	sbci	r31, 0xD4	; 212
    1e40:	96 81       	ldd	r25, Z+6	; 0x06
    1e42:	99 23       	and	r25, r25
    1e44:	1c f1       	brlt	.+70     	; 0x1e8c <DoEvent+0x38a>
    1e46:	9d e1       	ldi	r25, 0x1D	; 29
    1e48:	9e 9d       	mul	r25, r14
    1e4a:	f0 01       	movw	r30, r0
    1e4c:	9f 9d       	mul	r25, r15
    1e4e:	f0 0d       	add	r31, r0
    1e50:	11 24       	eor	r1, r1
    1e52:	e5 5e       	subi	r30, 0xE5	; 229
    1e54:	f7 4c       	sbci	r31, 0xC7	; 199
    1e56:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e58:	99 23       	and	r25, r25
    1e5a:	d1 f1       	breq	.+116    	; 0x1ed0 <DoEvent+0x3ce>
    1e5c:	88 23       	and	r24, r24
    1e5e:	c4 f1       	brlt	.+112    	; 0x1ed0 <DoEvent+0x3ce>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | ON;
    1e60:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	8e 0f       	add	r24, r30
    1e68:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	ee 0f       	add	r30, r30
    1e70:	ff 1f       	adc	r31, r31
    1e72:	e6 5f       	subi	r30, 0xF6	; 246
    1e74:	fa 4d       	sbci	r31, 0xDA	; 218
    1e76:	c7 01       	movw	r24, r14
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	83 60       	ori	r24, 0x03	; 3
    1e86:	80 83       	st	Z, r24
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	22 c0       	rjmp	.+68     	; 0x1ed0 <DoEvent+0x3ce>
							}
							else if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][REMONLINEB]) && (!(ModuleData[Module][MIC_RING]&0x80)))
    1e8c:	9d e1       	ldi	r25, 0x1D	; 29
    1e8e:	9e 9d       	mul	r25, r14
    1e90:	f0 01       	movw	r30, r0
    1e92:	9f 9d       	mul	r25, r15
    1e94:	f0 0d       	add	r31, r0
    1e96:	11 24       	eor	r1, r1
    1e98:	e5 5e       	subi	r30, 0xE5	; 229
    1e9a:	f7 4c       	sbci	r31, 0xC7	; 199
    1e9c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1e9e:	99 23       	and	r25, r25
    1ea0:	b9 f0       	breq	.+46     	; 0x1ed0 <DoEvent+0x3ce>
    1ea2:	88 23       	and	r24, r24
    1ea4:	ac f0       	brlt	.+42     	; 0x1ed0 <DoEvent+0x3ce>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | ON;
    1ea6:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	8e 0f       	add	r24, r30
    1eae:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	ee 0f       	add	r30, r30
    1eb6:	ff 1f       	adc	r31, r31
    1eb8:	e6 5f       	subi	r30, 0xF6	; 246
    1eba:	fa 4d       	sbci	r31, 0xDA	; 218
    1ebc:	c7 01       	movw	r24, r14
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	83 60       	ori	r24, 0x03	; 3
    1ecc:	80 83       	st	Z, r24
    1ece:	91 83       	std	Z+1, r25	; 0x01
							}

							//Cue-Control
							CueControl();
    1ed0:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>
    1ed4:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						}
						else
						{
							if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMMIC]))
    1ed8:	f7 01       	movw	r30, r14
    1eda:	ee 0f       	add	r30, r30
    1edc:	ff 1f       	adc	r31, r31
    1ede:	ee 0f       	add	r30, r30
    1ee0:	ff 1f       	adc	r31, r31
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	e5 5f       	subi	r30, 0xF5	; 245
    1ee8:	f4 4d       	sbci	r31, 0xD4	; 212
    1eea:	87 81       	ldd	r24, Z+7	; 0x07
    1eec:	88 23       	and	r24, r24
    1eee:	7c f5       	brge	.+94     	; 0x1f4e <DoEvent+0x44c>
    1ef0:	8d e1       	ldi	r24, 0x1D	; 29
    1ef2:	8e 9d       	mul	r24, r14
    1ef4:	f0 01       	movw	r30, r0
    1ef6:	8f 9d       	mul	r24, r15
    1ef8:	f0 0d       	add	r31, r0
    1efa:	11 24       	eor	r1, r1
    1efc:	e5 5e       	subi	r30, 0xE5	; 229
    1efe:	f7 4c       	sbci	r31, 0xC7	; 199
    1f00:	84 85       	ldd	r24, Z+12	; 0x0c
    1f02:	88 23       	and	r24, r24
    1f04:	21 f1       	breq	.+72     	; 0x1f4e <DoEvent+0x44c>
							{
								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    1f06:	f7 01       	movw	r30, r14
    1f08:	e0 56       	subi	r30, 0x60	; 96
    1f0a:	fd 4d       	sbci	r31, 0xDD	; 221
    1f0c:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    1f0e:	98 2f       	mov	r25, r24
    1f10:	93 7f       	andi	r25, 0xF3	; 243
    1f12:	90 83       	st	Z, r25
								if ((ConsoleFunctionData[Module]&ON_LED) && ((ModuleData[Module][FADERON]&0x80)))
    1f14:	85 ff       	sbrs	r24, 5
    1f16:	11 c0       	rjmp	.+34     	; 0x1f3a <DoEvent+0x438>
    1f18:	f7 01       	movw	r30, r14
    1f1a:	ee 0f       	add	r30, r30
    1f1c:	ff 1f       	adc	r31, r31
    1f1e:	ee 0f       	add	r30, r30
    1f20:	ff 1f       	adc	r31, r31
    1f22:	ee 0f       	add	r30, r30
    1f24:	ff 1f       	adc	r31, r31
    1f26:	e5 5f       	subi	r30, 0xF5	; 245
    1f28:	f4 4d       	sbci	r31, 0xD4	; 212
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	99 23       	and	r25, r25
    1f2e:	2c f4       	brge	.+10     	; 0x1f3a <DoEvent+0x438>
									ConsoleFunctionData[Module]&=MUTE_FUNCTION^0xFF;	// !JB
    1f30:	f7 01       	movw	r30, r14
    1f32:	e0 56       	subi	r30, 0x60	; 96
    1f34:	fd 4d       	sbci	r31, 0xDD	; 221
    1f36:	83 7e       	andi	r24, 0xE3	; 227
    1f38:	80 83       	st	Z, r24

								CUEByRemoteMIC[Module] = 0;
    1f3a:	f7 01       	movw	r30, r14
    1f3c:	e9 5f       	subi	r30, 0xF9	; 249
    1f3e:	fd 4c       	sbci	r31, 0xCD	; 205
    1f40:	10 82       	st	Z, r1
								CheckCUEByRemoteMIC();
    1f42:	0e 94 db 07 	call	0xfb6	; 0xfb6 <CheckCUEByRemoteMIC>

								SendSerialData = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    1f4c:	5e c0       	rjmp	.+188    	; 0x200a <__DATA_REGION_LENGTH__+0xa>

							}
							else if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][REMLINEA]))
    1f4e:	f7 01       	movw	r30, r14
    1f50:	ee 0f       	add	r30, r30
    1f52:	ff 1f       	adc	r31, r31
    1f54:	ee 0f       	add	r30, r30
    1f56:	ff 1f       	adc	r31, r31
    1f58:	ee 0f       	add	r30, r30
    1f5a:	ff 1f       	adc	r31, r31
    1f5c:	e5 5f       	subi	r30, 0xF5	; 245
    1f5e:	f4 4d       	sbci	r31, 0xD4	; 212
    1f60:	86 81       	ldd	r24, Z+6	; 0x06
    1f62:	88 23       	and	r24, r24
    1f64:	54 f1       	brlt	.+84     	; 0x1fba <DoEvent+0x4b8>
    1f66:	8d e1       	ldi	r24, 0x1D	; 29
    1f68:	8e 9d       	mul	r24, r14
    1f6a:	f0 01       	movw	r30, r0
    1f6c:	8f 9d       	mul	r24, r15
    1f6e:	f0 0d       	add	r31, r0
    1f70:	11 24       	eor	r1, r1
    1f72:	e5 5e       	subi	r30, 0xE5	; 229
    1f74:	f7 4c       	sbci	r31, 0xC7	; 199
    1f76:	82 85       	ldd	r24, Z+10	; 0x0a
    1f78:	88 23       	and	r24, r24
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <DoEvent+0x47c>
    1f7c:	46 c0       	rjmp	.+140    	; 0x200a <__DATA_REGION_LENGTH__+0xa>
							{
								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    1f7e:	f7 01       	movw	r30, r14
    1f80:	e0 56       	subi	r30, 0x60	; 96
    1f82:	fd 4d       	sbci	r31, 0xDD	; 221
    1f84:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    1f86:	98 2f       	mov	r25, r24
    1f88:	93 7f       	andi	r25, 0xF3	; 243
    1f8a:	90 83       	st	Z, r25
								if ((ConsoleFunctionData[Module]&ON_LED) && ((ModuleData[Module][FADERON]&0x80)))
    1f8c:	85 ff       	sbrs	r24, 5
    1f8e:	11 c0       	rjmp	.+34     	; 0x1fb2 <DoEvent+0x4b0>
    1f90:	f7 01       	movw	r30, r14
    1f92:	ee 0f       	add	r30, r30
    1f94:	ff 1f       	adc	r31, r31
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	ee 0f       	add	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	e5 5f       	subi	r30, 0xF5	; 245
    1fa0:	f4 4d       	sbci	r31, 0xD4	; 212
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	99 23       	and	r25, r25
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <DoEvent+0x4b0>
									ConsoleFunctionData[Module]&=MUTE_FUNCTION^0xFF;	// !JB
    1fa8:	f7 01       	movw	r30, r14
    1faa:	e0 56       	subi	r30, 0x60	; 96
    1fac:	fd 4d       	sbci	r31, 0xDD	; 221
    1fae:	83 7e       	andi	r24, 0xE3	; 227
    1fb0:	80 83       	st	Z, r24

								SendSerialData = 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    1fb8:	28 c0       	rjmp	.+80     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
							}
							else if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][REMLINEB]))
    1fba:	8d e1       	ldi	r24, 0x1D	; 29
    1fbc:	8e 9d       	mul	r24, r14
    1fbe:	f0 01       	movw	r30, r0
    1fc0:	8f 9d       	mul	r24, r15
    1fc2:	f0 0d       	add	r31, r0
    1fc4:	11 24       	eor	r1, r1
    1fc6:	e5 5e       	subi	r30, 0xE5	; 229
    1fc8:	f7 4c       	sbci	r31, 0xC7	; 199
    1fca:	83 85       	ldd	r24, Z+11	; 0x0b
    1fcc:	88 23       	and	r24, r24
    1fce:	e9 f0       	breq	.+58     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
							{
								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    1fd0:	f7 01       	movw	r30, r14
    1fd2:	e0 56       	subi	r30, 0x60	; 96
    1fd4:	fd 4d       	sbci	r31, 0xDD	; 221
    1fd6:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    1fd8:	98 2f       	mov	r25, r24
    1fda:	93 7f       	andi	r25, 0xF3	; 243
    1fdc:	90 83       	st	Z, r25
								if ((ConsoleFunctionData[Module]&ON_LED) && ((ModuleData[Module][FADERON]&0x80)))
    1fde:	85 ff       	sbrs	r24, 5
    1fe0:	11 c0       	rjmp	.+34     	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
    1fe2:	f7 01       	movw	r30, r14
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	e5 5f       	subi	r30, 0xF5	; 245
    1ff2:	f4 4d       	sbci	r31, 0xD4	; 212
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	99 23       	and	r25, r25
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
									ConsoleFunctionData[Module]&=MUTE_FUNCTION^0xFF;	// !JB
    1ffa:	f7 01       	movw	r30, r14
    1ffc:	e0 56       	subi	r30, 0x60	; 96
    1ffe:	fd 4d       	sbci	r31, 0xDD	; 221
    2000:	83 7e       	andi	r24, 0xE3	; 227
    2002:	80 83       	st	Z, r24

								SendSerialData = 1;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
							}

							//DJ-Control
							DJControl();
    200a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>

							//Cue-Control
							CueControl();
    200e:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>
    2012:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						}
					}
					break;
					case TELCO:
					{ // TELCO
						if (EventOn)
    2016:	01 2b       	or	r16, r17
    2018:	09 f0       	breq	.+2      	; 0x201c <__DATA_REGION_LENGTH__+0x1c>
    201a:	7d c0       	rjmp	.+250    	; 0x2116 <__DATA_REGION_LENGTH__+0x116>
						{
							if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][REMLINEA]))
    201c:	f7 01       	movw	r30, r14
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	ee 0f       	add	r30, r30
    2024:	ff 1f       	adc	r31, r31
    2026:	ee 0f       	add	r30, r30
    2028:	ff 1f       	adc	r31, r31
    202a:	e5 5f       	subi	r30, 0xF5	; 245
    202c:	f4 4d       	sbci	r31, 0xD4	; 212
    202e:	86 81       	ldd	r24, Z+6	; 0x06
    2030:	88 23       	and	r24, r24
    2032:	0c f1       	brlt	.+66     	; 0x2076 <__DATA_REGION_LENGTH__+0x76>
    2034:	8d e1       	ldi	r24, 0x1D	; 29
    2036:	8e 9d       	mul	r24, r14
    2038:	f0 01       	movw	r30, r0
    203a:	8f 9d       	mul	r24, r15
    203c:	f0 0d       	add	r31, r0
    203e:	11 24       	eor	r1, r1
    2040:	e5 5e       	subi	r30, 0xE5	; 229
    2042:	f7 4c       	sbci	r31, 0xC7	; 199
    2044:	82 85       	ldd	r24, Z+10	; 0x0a
    2046:	88 23       	and	r24, r24
    2048:	b9 f1       	breq	.+110    	; 0x20b8 <__DATA_REGION_LENGTH__+0xb8>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | PFL;
    204a:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	8e 0f       	add	r24, r30
    2052:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	ee 0f       	add	r30, r30
    205a:	ff 1f       	adc	r31, r31
    205c:	e6 5f       	subi	r30, 0xF6	; 246
    205e:	fa 4d       	sbci	r31, 0xDA	; 218
    2060:	c7 01       	movw	r24, r14
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	82 60       	ori	r24, 0x02	; 2
    2070:	80 83       	st	Z, r24
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	4c c0       	rjmp	.+152    	; 0x210e <__DATA_REGION_LENGTH__+0x10e>
							}
							else if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][REMLINEB]))
    2076:	8d e1       	ldi	r24, 0x1D	; 29
    2078:	8e 9d       	mul	r24, r14
    207a:	f0 01       	movw	r30, r0
    207c:	8f 9d       	mul	r24, r15
    207e:	f0 0d       	add	r31, r0
    2080:	11 24       	eor	r1, r1
    2082:	e5 5e       	subi	r30, 0xE5	; 229
    2084:	f7 4c       	sbci	r31, 0xC7	; 199
    2086:	83 85       	ldd	r24, Z+11	; 0x0b
    2088:	88 23       	and	r24, r24
    208a:	b1 f0       	breq	.+44     	; 0x20b8 <__DATA_REGION_LENGTH__+0xb8>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | PFL;
    208c:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	8e 0f       	add	r24, r30
    2094:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	ee 0f       	add	r30, r30
    209c:	ff 1f       	adc	r31, r31
    209e:	e6 5f       	subi	r30, 0xF6	; 246
    20a0:	fa 4d       	sbci	r31, 0xDA	; 218
    20a2:	c7 01       	movw	r24, r14
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	82 60       	ori	r24, 0x02	; 2
    20b2:	80 83       	st	Z, r24
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	2b c0       	rjmp	.+86     	; 0x210e <__DATA_REGION_LENGTH__+0x10e>
							}
							else if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMMIC]))
    20b8:	f7 01       	movw	r30, r14
    20ba:	ee 0f       	add	r30, r30
    20bc:	ff 1f       	adc	r31, r31
    20be:	ee 0f       	add	r30, r30
    20c0:	ff 1f       	adc	r31, r31
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	e5 5f       	subi	r30, 0xF5	; 245
    20c8:	f4 4d       	sbci	r31, 0xD4	; 212
    20ca:	87 81       	ldd	r24, Z+7	; 0x07
    20cc:	88 23       	and	r24, r24
    20ce:	fc f4       	brge	.+62     	; 0x210e <__DATA_REGION_LENGTH__+0x10e>
    20d0:	8d e1       	ldi	r24, 0x1D	; 29
    20d2:	8e 9d       	mul	r24, r14
    20d4:	f0 01       	movw	r30, r0
    20d6:	8f 9d       	mul	r24, r15
    20d8:	f0 0d       	add	r31, r0
    20da:	11 24       	eor	r1, r1
    20dc:	e5 5e       	subi	r30, 0xE5	; 229
    20de:	f7 4c       	sbci	r31, 0xC7	; 199
    20e0:	84 85       	ldd	r24, Z+12	; 0x0c
    20e2:	88 23       	and	r24, r24
    20e4:	a1 f0       	breq	.+40     	; 0x210e <__DATA_REGION_LENGTH__+0x10e>
							{
								ConsoleFunctionData[Module] |= CUE_LED;
    20e6:	f7 01       	movw	r30, r14
    20e8:	e0 56       	subi	r30, 0x60	; 96
    20ea:	fd 4d       	sbci	r31, 0xDD	; 221
    20ec:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] |= CUE_FUNCTION;
								if (!(ConsoleFunctionData[Module]&REMOTE_FUNCTION))
    20ee:	80 ff       	sbrs	r24, 0
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <__DATA_REGION_LENGTH__+0xfe>
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | PFL;
							}
							else if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMMIC]))
							{
								ConsoleFunctionData[Module] |= CUE_LED;
								ConsoleFunctionData[Module] |= CUE_FUNCTION;
    20f2:	f7 01       	movw	r30, r14
    20f4:	e0 56       	subi	r30, 0x60	; 96
    20f6:	fd 4d       	sbci	r31, 0xDD	; 221
    20f8:	8c 60       	ori	r24, 0x0C	; 12
    20fa:	80 83       	st	Z, r24
    20fc:	05 c0       	rjmp	.+10     	; 0x2108 <__DATA_REGION_LENGTH__+0x108>
								if (!(ConsoleFunctionData[Module]&REMOTE_FUNCTION))
									ConsoleFunctionData[Module]|=MUTE_FUNCTION;
    20fe:	f7 01       	movw	r30, r14
    2100:	e0 56       	subi	r30, 0x60	; 96
    2102:	fd 4d       	sbci	r31, 0xDD	; 221
    2104:	8c 61       	ori	r24, 0x1C	; 28
    2106:	80 83       	st	Z, r24
								SendSerialData = 1;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
							}
							//Cue-Control
							CueControl();
    210e:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>
    2112:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						}
						else
						{
							if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMMIC]) && (ConsoleFunctionData[Module]&REMOTE_FUNCTION))
    2116:	f7 01       	movw	r30, r14
    2118:	ee 0f       	add	r30, r30
    211a:	ff 1f       	adc	r31, r31
    211c:	ee 0f       	add	r30, r30
    211e:	ff 1f       	adc	r31, r31
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	e5 5f       	subi	r30, 0xF5	; 245
    2126:	f4 4d       	sbci	r31, 0xD4	; 212
    2128:	87 81       	ldd	r24, Z+7	; 0x07
    212a:	88 23       	and	r24, r24
    212c:	cc f4       	brge	.+50     	; 0x2160 <__DATA_REGION_LENGTH__+0x160>
    212e:	8d e1       	ldi	r24, 0x1D	; 29
    2130:	8e 9d       	mul	r24, r14
    2132:	f0 01       	movw	r30, r0
    2134:	8f 9d       	mul	r24, r15
    2136:	f0 0d       	add	r31, r0
    2138:	11 24       	eor	r1, r1
    213a:	e5 5e       	subi	r30, 0xE5	; 229
    213c:	f7 4c       	sbci	r31, 0xC7	; 199
    213e:	84 85       	ldd	r24, Z+12	; 0x0c
    2140:	88 23       	and	r24, r24
    2142:	71 f0       	breq	.+28     	; 0x2160 <__DATA_REGION_LENGTH__+0x160>
    2144:	f7 01       	movw	r30, r14
    2146:	e0 56       	subi	r30, 0x60	; 96
    2148:	fd 4d       	sbci	r31, 0xDD	; 221
    214a:	80 81       	ld	r24, Z
    214c:	80 ff       	sbrs	r24, 0
    214e:	08 c0       	rjmp	.+16     	; 0x2160 <__DATA_REGION_LENGTH__+0x160>
							{
								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
								ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    2150:	f7 01       	movw	r30, r14
    2152:	e0 56       	subi	r30, 0x60	; 96
    2154:	fd 4d       	sbci	r31, 0xDD	; 221
    2156:	83 7e       	andi	r24, 0xE3	; 227
    2158:	80 83       	st	Z, r24
								SendSerialData = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
							}
							//Cue-Control
							CueControl();
    2160:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>
    2164:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			}
		}
		break;
		case FADERON:
		{
			switch (ModuleType[Module])
    2168:	c4 2e       	mov	r12, r20
    216a:	d1 2c       	mov	r13, r1
    216c:	f6 01       	movw	r30, r12
    216e:	e0 59       	subi	r30, 0x90	; 144
    2170:	fd 4d       	sbci	r31, 0xDD	; 221
    2172:	80 81       	ld	r24, Z
    2174:	81 30       	cpi	r24, 0x01	; 1
    2176:	29 f0       	breq	.+10     	; 0x2182 <__DATA_REGION_LENGTH__+0x182>
    2178:	82 30       	cpi	r24, 0x02	; 2
    217a:	09 f4       	brne	.+2      	; 0x217e <__DATA_REGION_LENGTH__+0x17e>
    217c:	ab c0       	rjmp	.+342    	; 0x22d4 <__DATA_REGION_LENGTH__+0x2d4>
    217e:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			{
				case TRIPLE:
				{ //Triple
					if (EventOn)
    2182:	01 2b       	or	r16, r17
    2184:	09 f0       	breq	.+2      	; 0x2188 <__DATA_REGION_LENGTH__+0x188>
    2186:	61 c0       	rjmp	.+194    	; 0x224a <__DATA_REGION_LENGTH__+0x24a>
					{		// Was eerst het OfEvent JB
							// Inverse reaction bij op P-print by Jan Betten!! 
							// dus onevent is fader uit bij P-print!!!!

						if (ConsoleFunctionData[Module]&ON_LED)
    2188:	f6 01       	movw	r30, r12
    218a:	e0 56       	subi	r30, 0x60	; 96
    218c:	fd 4d       	sbci	r31, 0xDD	; 221
    218e:	80 81       	ld	r24, Z
    2190:	85 ff       	sbrs	r24, 5
    2192:	3d c0       	rjmp	.+122    	; 0x220e <__DATA_REGION_LENGTH__+0x20e>
						{
							ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    2194:	8f 01       	movw	r16, r30
    2196:	81 60       	ori	r24, 0x01	; 1
    2198:	80 83       	st	Z, r24

							//OnAir1/2 Control
							OnAirControl();
    219a:	0e 94 76 04 	call	0x8ec	; 0x8ec <OnAirControl>

							TimerControl(Module);
    219e:	8e 2d       	mov	r24, r14
    21a0:	0e 94 c4 02 	call	0x588	; 0x588 <TimerControl>

							ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    21a4:	f8 01       	movw	r30, r16
    21a6:	80 81       	ld	r24, Z
							ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    21a8:	98 2f       	mov	r25, r24
    21aa:	93 7f       	andi	r25, 0xF3	; 243
    21ac:	90 83       	st	Z, r25

							//Cue-Control
							if (ConsoleMasterSettings[AUTOCUERESET])
    21ae:	90 91 8e 2b 	lds	r25, 0x2B8E	; 0x802b8e <ConsoleMasterSettings>
    21b2:	99 23       	and	r25, r25
    21b4:	c1 f0       	breq	.+48     	; 0x21e6 <__DATA_REGION_LENGTH__+0x1e6>
							{
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    21b6:	f6 01       	movw	r30, r12
    21b8:	ee 0f       	add	r30, r30
    21ba:	ff 1f       	adc	r31, r31
    21bc:	ee 0f       	add	r30, r30
    21be:	ff 1f       	adc	r31, r31
    21c0:	ee 0f       	add	r30, r30
    21c2:	ff 1f       	adc	r31, r31
    21c4:	e5 5f       	subi	r30, 0xF5	; 245
    21c6:	f4 4d       	sbci	r31, 0xD4	; 212
    21c8:	91 81       	ldd	r25, Z+1	; 0x01
    21ca:	99 23       	and	r25, r25
    21cc:	64 f4       	brge	.+24     	; 0x21e6 <__DATA_REGION_LENGTH__+0x1e6>
    21ce:	85 ff       	sbrs	r24, 5
    21d0:	0a c0       	rjmp	.+20     	; 0x21e6 <__DATA_REGION_LENGTH__+0x1e6>
    21d2:	e0 ea       	ldi	r30, 0xA0	; 160
    21d4:	f2 e2       	ldi	r31, 0x22	; 34
    21d6:	20 eb       	ldi	r18, 0xB0	; 176
    21d8:	32 e2       	ldi	r19, 0x22	; 34
								{	 // !JB
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
										ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    21da:	80 81       	ld	r24, Z
    21dc:	83 7f       	andi	r24, 0xF3	; 243
    21de:	81 93       	st	Z+, r24
							if (ConsoleMasterSettings[AUTOCUERESET])
							{
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
								{	 // !JB
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    21e0:	e2 17       	cp	r30, r18
    21e2:	f3 07       	cpc	r31, r19
    21e4:	d1 f7       	brne	.-12     	; 0x21da <__DATA_REGION_LENGTH__+0x1da>
										ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
										ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
									}
								}
							}
							CueControl();
    21e6:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>

							//DJ-Control
							DJControl();
    21ea:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>
							//StudioMic Control
							StudioMicControl();
    21ee:	0e 94 5e 03 	call	0x6bc	; 0x6bc <StudioMicControl>

							CheckStartCondition(Module);
    21f2:	8e 2d       	mov	r24, r14
    21f4:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>

							ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    21f8:	f6 01       	movw	r30, r12
    21fa:	e0 56       	subi	r30, 0x60	; 96
    21fc:	fd 4d       	sbci	r31, 0xDD	; 221
    21fe:	80 81       	ld	r24, Z
    2200:	8f 7e       	andi	r24, 0xEF	; 239
    2202:	80 83       	st	Z, r24
							SendSerialData = 1;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    220a:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						}
						else
						{
							if ((ConsoleModuleSettings[Module][STARTFADER]) && (!ConsoleModuleSettings[Module][STARTON]))
    220e:	8d e1       	ldi	r24, 0x1D	; 29
    2210:	8c 9d       	mul	r24, r12
    2212:	f0 01       	movw	r30, r0
    2214:	8d 9d       	mul	r24, r13
    2216:	f0 0d       	add	r31, r0
    2218:	11 24       	eor	r1, r1
    221a:	e5 5e       	subi	r30, 0xE5	; 229
    221c:	f7 4c       	sbci	r31, 0xC7	; 199
    221e:	86 81       	ldd	r24, Z+6	; 0x06
    2220:	88 23       	and	r24, r24
    2222:	71 f0       	breq	.+28     	; 0x2240 <__DATA_REGION_LENGTH__+0x240>
    2224:	8d e1       	ldi	r24, 0x1D	; 29
    2226:	8c 9d       	mul	r24, r12
    2228:	f0 01       	movw	r30, r0
    222a:	8d 9d       	mul	r24, r13
    222c:	f0 0d       	add	r31, r0
    222e:	11 24       	eor	r1, r1
    2230:	e5 5e       	subi	r30, 0xE5	; 229
    2232:	f7 4c       	sbci	r31, 0xC7	; 199
    2234:	87 81       	ldd	r24, Z+7	; 0x07
    2236:	81 11       	cpse	r24, r1
    2238:	03 c0       	rjmp	.+6      	; 0x2240 <__DATA_REGION_LENGTH__+0x240>
							{
								CheckStartCondition(Module);
    223a:	84 2f       	mov	r24, r20
    223c:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>
							}
							TimerControl(Module);
    2240:	8e 2d       	mov	r24, r14
    2242:	0e 94 c4 02 	call	0x588	; 0x588 <TimerControl>
    2246:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						}
					}
					else
					{
						ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    224a:	f6 01       	movw	r30, r12
    224c:	e0 56       	subi	r30, 0x60	; 96
    224e:	fd 4d       	sbci	r31, 0xDD	; 221
    2250:	80 81       	ld	r24, Z
    2252:	98 2f       	mov	r25, r24
    2254:	90 61       	ori	r25, 0x10	; 16
    2256:	90 83       	st	Z, r25
						if (ConsoleFunctionData[Module]&ON_LED)
    2258:	85 ff       	sbrs	r24, 5
    225a:	18 c0       	rjmp	.+48     	; 0x228c <__DATA_REGION_LENGTH__+0x28c>
						{
							if (ConsoleModuleSettings[Module][STARTFADER]) 
    225c:	8d e1       	ldi	r24, 0x1D	; 29
    225e:	8c 9d       	mul	r24, r12
    2260:	f0 01       	movw	r30, r0
    2262:	8d 9d       	mul	r24, r13
    2264:	f0 0d       	add	r31, r0
    2266:	11 24       	eor	r1, r1
    2268:	e5 5e       	subi	r30, 0xE5	; 229
    226a:	f7 4c       	sbci	r31, 0xC7	; 199
    226c:	86 81       	ldd	r24, Z+6	; 0x06
    226e:	88 23       	and	r24, r24
    2270:	19 f0       	breq	.+6      	; 0x2278 <__DATA_REGION_LENGTH__+0x278>
							{
									CheckStartCondition(Module);
    2272:	84 2f       	mov	r24, r20
    2274:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>
							}
							//OnAir1/2 Control
							OnAirControl();
    2278:	0e 94 76 04 	call	0x8ec	; 0x8ec <OnAirControl>

							TimerControl(Module);
    227c:	8e 2d       	mov	r24, r14
    227e:	0e 94 c4 02 	call	0x588	; 0x588 <TimerControl>

							//DJ-Control
							DJControl();
    2282:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>

							//StudioMic Control
							StudioMicControl();
    2286:	0e 94 5e 03 	call	0x6bc	; 0x6bc <StudioMicControl>
    228a:	19 c0       	rjmp	.+50     	; 0x22be <__DATA_REGION_LENGTH__+0x2be>
						}
						else
						{
							if ((ConsoleModuleSettings[Module][STARTFADER]) && (!ConsoleModuleSettings[Module][STARTON]))
    228c:	8d e1       	ldi	r24, 0x1D	; 29
    228e:	8c 9d       	mul	r24, r12
    2290:	f0 01       	movw	r30, r0
    2292:	8d 9d       	mul	r24, r13
    2294:	f0 0d       	add	r31, r0
    2296:	11 24       	eor	r1, r1
    2298:	e5 5e       	subi	r30, 0xE5	; 229
    229a:	f7 4c       	sbci	r31, 0xC7	; 199
    229c:	86 81       	ldd	r24, Z+6	; 0x06
    229e:	88 23       	and	r24, r24
    22a0:	71 f0       	breq	.+28     	; 0x22be <__DATA_REGION_LENGTH__+0x2be>
    22a2:	8d e1       	ldi	r24, 0x1D	; 29
    22a4:	8c 9d       	mul	r24, r12
    22a6:	f0 01       	movw	r30, r0
    22a8:	8d 9d       	mul	r24, r13
    22aa:	f0 0d       	add	r31, r0
    22ac:	11 24       	eor	r1, r1
    22ae:	e5 5e       	subi	r30, 0xE5	; 229
    22b0:	f7 4c       	sbci	r31, 0xC7	; 199
    22b2:	87 81       	ldd	r24, Z+7	; 0x07
    22b4:	81 11       	cpse	r24, r1
    22b6:	03 c0       	rjmp	.+6      	; 0x22be <__DATA_REGION_LENGTH__+0x2be>
							{
								CheckStartCondition(Module);
    22b8:	84 2f       	mov	r24, r20
    22ba:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>
							}
						}
						ConsoleFunctionData[Module] &= REMOTE_FUNCTION^0xFF;
    22be:	f6 01       	movw	r30, r12
    22c0:	e0 56       	subi	r30, 0x60	; 96
    22c2:	fd 4d       	sbci	r31, 0xDD	; 221
    22c4:	80 81       	ld	r24, Z
    22c6:	8e 7f       	andi	r24, 0xFE	; 254
    22c8:	80 83       	st	Z, r24
						SendSerialData = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    22d0:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
// was eerst het OnEvent JB
				}
				break;
				case TELCO:
				{ // Telco
					if (EventOn)
    22d4:	01 2b       	or	r16, r17
    22d6:	09 f0       	breq	.+2      	; 0x22da <__DATA_REGION_LENGTH__+0x2da>
    22d8:	7c c0       	rjmp	.+248    	; 0x23d2 <__DATA_REGION_LENGTH__+0x3d2>
					{// JB was else
						if (ConsoleFunctionData[Module]&ON_LED)
    22da:	f6 01       	movw	r30, r12
    22dc:	e0 56       	subi	r30, 0x60	; 96
    22de:	fd 4d       	sbci	r31, 0xDD	; 221
    22e0:	80 81       	ld	r24, Z
    22e2:	85 fd       	sbrc	r24, 5
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <__DATA_REGION_LENGTH__+0x2ea>
    22e6:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						{
							char TelcoNr = GetTelcoNrFromModuleNr(Module);
    22ea:	84 2f       	mov	r24, r20
    22ec:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <GetTelcoNrFromModuleNr>
							if ((TelcoNr>=0) && (TelcoNr<4))
    22f0:	84 30       	cpi	r24, 0x04	; 4
    22f2:	c0 f4       	brcc	.+48     	; 0x2324 <__DATA_REGION_LENGTH__+0x324>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    22f4:	90 91 82 22 	lds	r25, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    22f8:	e9 2f       	mov	r30, r25
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	eb 53       	subi	r30, 0x3B	; 59
    22fe:	fc 4d       	sbci	r31, 0xDC	; 220
    2300:	22 ec       	ldi	r18, 0xC2	; 194
    2302:	20 83       	st	Z, r18
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2304:	e1 e0       	ldi	r30, 0x01	; 1
    2306:	e9 0f       	add	r30, r25
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	eb 53       	subi	r30, 0x3B	; 59
    230c:	fc 4d       	sbci	r31, 0xDC	; 220
    230e:	80 83       	st	Z, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2310:	83 e0       	ldi	r24, 0x03	; 3
    2312:	89 0f       	add	r24, r25
    2314:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2318:	e2 e0       	ldi	r30, 0x02	; 2
    231a:	e9 0f       	add	r30, r25
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	eb 53       	subi	r30, 0x3B	; 59
    2320:	fc 4d       	sbci	r31, 0xDC	; 220
    2322:	10 82       	st	Z, r1
							}

							//OnAir1/2 Control
							OnAirControl();
    2324:	0e 94 76 04 	call	0x8ec	; 0x8ec <OnAirControl>
							TimerControl(Module);
    2328:	8e 2d       	mov	r24, r14
    232a:	0e 94 c4 02 	call	0x588	; 0x588 <TimerControl>
							
							ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    232e:	f6 01       	movw	r30, r12
    2330:	e0 56       	subi	r30, 0x60	; 96
    2332:	fd 4d       	sbci	r31, 0xDD	; 221
    2334:	80 81       	ld	r24, Z
							ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2336:	98 2f       	mov	r25, r24
    2338:	93 7f       	andi	r25, 0xF3	; 243
    233a:	90 83       	st	Z, r25

							//Cue-Control
							if (ConsoleMasterSettings[AUTOCUERESET])
    233c:	90 91 8e 2b 	lds	r25, 0x2B8E	; 0x802b8e <ConsoleMasterSettings>
    2340:	99 23       	and	r25, r25
    2342:	d1 f1       	breq	.+116    	; 0x23b8 <__DATA_REGION_LENGTH__+0x3b8>
							{
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    2344:	f6 01       	movw	r30, r12
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	e5 5f       	subi	r30, 0xF5	; 245
    2354:	f4 4d       	sbci	r31, 0xD4	; 212
    2356:	91 81       	ldd	r25, Z+1	; 0x01
    2358:	99 23       	and	r25, r25
    235a:	74 f5       	brge	.+92     	; 0x23b8 <__DATA_REGION_LENGTH__+0x3b8>
    235c:	85 ff       	sbrs	r24, 5
    235e:	2c c0       	rjmp	.+88     	; 0x23b8 <__DATA_REGION_LENGTH__+0x3b8>
    2360:	00 ea       	ldi	r16, 0xA0	; 160
    2362:	12 e2       	ldi	r17, 0x22	; 34
    2364:	f1 2c       	mov	r15, r1
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										char TelcoNr = GetTelcoNrFromModuleNr(cntModule);
										if ((TelcoNr>=0) && (TelcoNr<4))
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2366:	0f 2e       	mov	r0, r31
    2368:	f2 ec       	ldi	r31, 0xC2	; 194
    236a:	ef 2e       	mov	r14, r31
    236c:	f0 2d       	mov	r31, r0
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
								{	 // !JB
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										char TelcoNr = GetTelcoNrFromModuleNr(cntModule);
    236e:	8f 2d       	mov	r24, r15
    2370:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <GetTelcoNrFromModuleNr>
										if ((TelcoNr>=0) && (TelcoNr<4))
    2374:	84 30       	cpi	r24, 0x04	; 4
    2376:	b0 f4       	brcc	.+44     	; 0x23a4 <__DATA_REGION_LENGTH__+0x3a4>
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2378:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    237c:	ae 2f       	mov	r26, r30
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	ab 53       	subi	r26, 0x3B	; 59
    2382:	bc 4d       	sbci	r27, 0xDC	; 220
    2384:	ec 92       	st	X, r14
											SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2386:	a1 e0       	ldi	r26, 0x01	; 1
    2388:	ae 0f       	add	r26, r30
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	ab 53       	subi	r26, 0x3B	; 59
    238e:	bc 4d       	sbci	r27, 0xDC	; 220
    2390:	8c 93       	st	X, r24
											SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2392:	83 e0       	ldi	r24, 0x03	; 3
    2394:	8e 0f       	add	r24, r30
    2396:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    239a:	ee 5f       	subi	r30, 0xFE	; 254
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	eb 53       	subi	r30, 0x3B	; 59
    23a0:	fc 4d       	sbci	r31, 0xDC	; 220
    23a2:	10 82       	st	Z, r1
										}

										ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
										ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    23a4:	d8 01       	movw	r26, r16
    23a6:	8c 91       	ld	r24, X
    23a8:	83 7f       	andi	r24, 0xF3	; 243
    23aa:	f8 01       	movw	r30, r16
    23ac:	81 93       	st	Z+, r24
    23ae:	8f 01       	movw	r16, r30
							if (ConsoleMasterSettings[AUTOCUERESET])
							{
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
								{	 // !JB
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    23b0:	f3 94       	inc	r15
    23b2:	f0 e1       	ldi	r31, 0x10	; 16
    23b4:	ff 12       	cpse	r15, r31
    23b6:	db cf       	rjmp	.-74     	; 0x236e <__DATA_REGION_LENGTH__+0x36e>
										ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;

									}
								}
							}
							CueControl();
    23b8:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>

							ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    23bc:	f6 01       	movw	r30, r12
    23be:	e0 56       	subi	r30, 0x60	; 96
    23c0:	fd 4d       	sbci	r31, 0xDD	; 221
    23c2:	80 81       	ld	r24, Z
    23c4:	8f 7e       	andi	r24, 0xEF	; 239
    23c6:	80 83       	st	Z, r24
							SendSerialData = 1;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    23ce:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						}
					}
					else
					{			// JB was if
 						//OnAir1/2 Control
						OnAirControl();
    23d2:	0e 94 76 04 	call	0x8ec	; 0x8ec <OnAirControl>
						TimerControl(Module);
    23d6:	8e 2d       	mov	r24, r14
    23d8:	0e 94 c4 02 	call	0x588	; 0x588 <TimerControl>
						ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    23dc:	f6 01       	movw	r30, r12
    23de:	e0 56       	subi	r30, 0x60	; 96
    23e0:	fd 4d       	sbci	r31, 0xDD	; 221
    23e2:	80 81       	ld	r24, Z
    23e4:	80 61       	ori	r24, 0x10	; 16
    23e6:	80 83       	st	Z, r24
						SendSerialData = 1;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    23ee:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			}
		}
		break;
		case PFL:
		{
			switch (OperatingMode)
    23f2:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	09 f0       	breq	.+2      	; 0x23fc <__DATA_REGION_LENGTH__+0x3fc>
    23fa:	1e c1       	rjmp	.+572    	; 0x2638 <__DATA_REGION_LENGTH__+0x638>
			{
				case MODULEMODE:
				{
					if ((EventOn) && (ConsoleMasterSettings[4]))
    23fc:	01 2b       	or	r16, r17
    23fe:	11 f0       	breq	.+4      	; 0x2404 <__DATA_REGION_LENGTH__+0x404>
    2400:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
    2404:	80 91 92 2b 	lds	r24, 0x2B92	; 0x802b92 <ConsoleMasterSettings+0x4>
    2408:	88 23       	and	r24, r24
    240a:	11 f4       	brne	.+4      	; 0x2410 <__DATA_REGION_LENGTH__+0x410>
    240c:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					{
						unsigned char cntByte;

						char Buffer[] ="Module xx: xxx  ";
    2410:	81 e1       	ldi	r24, 0x11	; 17
    2412:	e6 ed       	ldi	r30, 0xD6	; 214
    2414:	f0 e2       	ldi	r31, 0x20	; 32
    2416:	de 01       	movw	r26, r28
    2418:	11 96       	adiw	r26, 0x01	; 1
    241a:	01 90       	ld	r0, Z+
    241c:	0d 92       	st	X+, r0
    241e:	8a 95       	dec	r24
    2420:	e1 f7       	brne	.-8      	; 0x241a <__DATA_REGION_LENGTH__+0x41a>
						
						if (ConsoleModuleSettings[Module][TextStringPtr])
    2422:	20 91 81 22 	lds	r18, 0x2281	; 0x802281 <TextStringPtr>
    2426:	42 2f       	mov	r20, r18
    2428:	50 e0       	ldi	r21, 0x00	; 0
    242a:	ce 2c       	mov	r12, r14
    242c:	d1 2c       	mov	r13, r1
    242e:	fa 01       	movw	r30, r20
    2430:	8d e1       	ldi	r24, 0x1D	; 29
    2432:	e8 9e       	mul	r14, r24
    2434:	e0 0d       	add	r30, r0
    2436:	f1 1d       	adc	r31, r1
    2438:	11 24       	eor	r1, r1
    243a:	e5 5e       	subi	r30, 0xE5	; 229
    243c:	f7 4c       	sbci	r31, 0xC7	; 199
    243e:	80 81       	ld	r24, Z
    2440:	88 23       	and	r24, r24
    2442:	61 f0       	breq	.+24     	; 0x245c <__DATA_REGION_LENGTH__+0x45c>
							ConsoleModuleSettings[Module][TextStringPtr] = 0;
    2444:	8d e1       	ldi	r24, 0x1D	; 29
    2446:	8c 9d       	mul	r24, r12
    2448:	f0 01       	movw	r30, r0
    244a:	8d 9d       	mul	r24, r13
    244c:	f0 0d       	add	r31, r0
    244e:	11 24       	eor	r1, r1
    2450:	e5 5e       	subi	r30, 0xE5	; 229
    2452:	f7 4c       	sbci	r31, 0xC7	; 199
    2454:	e4 0f       	add	r30, r20
    2456:	f5 1f       	adc	r31, r21
    2458:	10 82       	st	Z, r1
    245a:	0c c0       	rjmp	.+24     	; 0x2474 <__DATA_REGION_LENGTH__+0x474>
						else
							ConsoleModuleSettings[Module][TextStringPtr] = 1;
    245c:	8d e1       	ldi	r24, 0x1D	; 29
    245e:	8c 9d       	mul	r24, r12
    2460:	f0 01       	movw	r30, r0
    2462:	8d 9d       	mul	r24, r13
    2464:	f0 0d       	add	r31, r0
    2466:	11 24       	eor	r1, r1
    2468:	e5 5e       	subi	r30, 0xE5	; 229
    246a:	f7 4c       	sbci	r31, 0xC7	; 199
    246c:	e4 0f       	add	r30, r20
    246e:	f5 1f       	adc	r31, r21
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	80 83       	st	Z, r24

						if (ModuleType[Module]==TELCO)
    2474:	f6 01       	movw	r30, r12
    2476:	e0 59       	subi	r30, 0x90	; 144
    2478:	fd 4d       	sbci	r31, 0xDD	; 221
    247a:	30 81       	ld	r19, Z
    247c:	32 30       	cpi	r19, 0x02	; 2
    247e:	11 f0       	breq	.+4      	; 0x2484 <__DATA_REGION_LENGTH__+0x484>
    2480:	0c 94 4c 1f 	jmp	0x3e98	; 0x3e98 <__DATA_REGION_LENGTH__+0x1e98>
						{
							switch (TextStringPtr)
    2484:	82 2f       	mov	r24, r18
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	fc 01       	movw	r30, r24
    248a:	32 97       	sbiw	r30, 0x02	; 2
    248c:	ea 31       	cpi	r30, 0x1A	; 26
    248e:	f1 05       	cpc	r31, r1
    2490:	08 f5       	brcc	.+66     	; 0x24d4 <__DATA_REGION_LENGTH__+0x4d4>
    2492:	88 27       	eor	r24, r24
    2494:	e9 57       	subi	r30, 0x79	; 121
    2496:	fe 4f       	sbci	r31, 0xFE	; 254
    2498:	8f 4f       	sbci	r24, 0xFF	; 255
    249a:	0c 94 98 28 	jmp	0x5130	; 0x5130 <__tablejump2__>
								case REMONLINEA:
								case REMONLINEB:
								case MICATLINEA:
								case MICATLINEB:
								{
									ConsoleModuleSettings[Module][TextStringPtr]=0x00;
    249e:	8d e1       	ldi	r24, 0x1D	; 29
    24a0:	8c 9d       	mul	r24, r12
    24a2:	f0 01       	movw	r30, r0
    24a4:	8d 9d       	mul	r24, r13
    24a6:	f0 0d       	add	r31, r0
    24a8:	11 24       	eor	r1, r1
    24aa:	e5 5e       	subi	r30, 0xE5	; 229
    24ac:	f7 4c       	sbci	r31, 0xC7	; 199
    24ae:	e4 0f       	add	r30, r20
    24b0:	f5 1f       	adc	r31, r21
    24b2:	10 82       	st	Z, r1
								}
								break;
    24b4:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__DATA_REGION_LENGTH__+0x1ef6>
								case STARTON:
								case STARTLINEA:
								case STARTLINEB:
								case STARTCUE:
								{
									ConsoleModuleSettings[Module][TextStringPtr]=0x01;
    24b8:	8d e1       	ldi	r24, 0x1D	; 29
    24ba:	8c 9d       	mul	r24, r12
    24bc:	f0 01       	movw	r30, r0
    24be:	8d 9d       	mul	r24, r13
    24c0:	f0 0d       	add	r31, r0
    24c2:	11 24       	eor	r1, r1
    24c4:	e5 5e       	subi	r30, 0xE5	; 229
    24c6:	f7 4c       	sbci	r31, 0xC7	; 199
    24c8:	e4 0f       	add	r30, r20
    24ca:	f5 1f       	adc	r31, r21
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	80 83       	st	Z, r24
								}
								break;
    24d0:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__DATA_REGION_LENGTH__+0x1ef6>
							}
						}

						switch (TextStringPtr)
    24d4:	82 2f       	mov	r24, r18
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	fc 01       	movw	r30, r24
    24da:	33 97       	sbiw	r30, 0x03	; 3
    24dc:	e6 31       	cpi	r30, 0x16	; 22
    24de:	f1 05       	cpc	r31, r1
    24e0:	80 f5       	brcc	.+96     	; 0x2542 <__DATA_REGION_LENGTH__+0x542>
    24e2:	88 27       	eor	r24, r24
    24e4:	ef 55       	subi	r30, 0x5F	; 95
    24e6:	fe 4f       	sbci	r31, 0xFE	; 254
    24e8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ea:	0c 94 98 28 	jmp	0x5130	; 0x5130 <__tablejump2__>
							ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;

							//Cue-Control
							if (ConsoleMasterSettings[AUTOCUERESET])
							{
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    24ee:	10 e0       	ldi	r17, 0x00	; 0
							case STARTPULS:
							{
								unsigned char cntModule;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
								{
									StartControl(cntModule, 0);
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	81 2f       	mov	r24, r17
    24f4:	0e 94 92 05 	call	0xb24	; 0xb24 <StartControl>
									TimerControl(cntModule);
    24f8:	81 2f       	mov	r24, r17
    24fa:	0e 94 c4 02 	call	0x588	; 0x588 <TimerControl>
							case STARTON:
							case STARTCUE:
							case STARTPULS:
							{
								unsigned char cntModule;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    24fe:	1f 5f       	subi	r17, 0xFF	; 255
    2500:	10 31       	cpi	r17, 0x10	; 16
    2502:	b1 f7       	brne	.-20     	; 0x24f0 <__DATA_REGION_LENGTH__+0x4f0>
    2504:	1e c0       	rjmp	.+60     	; 0x2542 <__DATA_REGION_LENGTH__+0x542>
								}
							}
							break;
							case DJMIC:
							{
								DJControl();
    2506:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>
							}
							break;
    250a:	1b c0       	rjmp	.+54     	; 0x2542 <__DATA_REGION_LENGTH__+0x542>
							case MICATLINEA:
							case MICATLINEB:
							{
								DJControl();
    250c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>
								StudioMicControl();
    2510:	0e 94 5e 03 	call	0x6bc	; 0x6bc <StudioMicControl>
							}
							break;
    2514:	16 c0       	rjmp	.+44     	; 0x2542 <__DATA_REGION_LENGTH__+0x542>
							case ANNMIC:
							{
								if (ModuleType[Module]==TRIPLE)
    2516:	31 30       	cpi	r19, 0x01	; 1
    2518:	61 f4       	brne	.+24     	; 0x2532 <__DATA_REGION_LENGTH__+0x532>
    251a:	82 2f       	mov	r24, r18
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	fc 01       	movw	r30, r24
    2520:	e5 5e       	subi	r30, 0xE5	; 229
    2522:	f7 4c       	sbci	r31, 0xC7	; 199
    2524:	80 e0       	ldi	r24, 0x00	; 0
								{
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										if (cntModule!=Module)
    2526:	e8 12       	cpse	r14, r24
											ConsoleModuleSettings[cntModule][TextStringPtr] = 0x00;
    2528:	10 82       	st	Z, r1
							case ANNMIC:
							{
								if (ModuleType[Module]==TRIPLE)
								{
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    252a:	8f 5f       	subi	r24, 0xFF	; 255
    252c:	7d 96       	adiw	r30, 0x1d	; 29
    252e:	80 31       	cpi	r24, 0x10	; 16
    2530:	d1 f7       	brne	.-12     	; 0x2526 <__DATA_REGION_LENGTH__+0x526>
									{
										if (cntModule!=Module)
											ConsoleModuleSettings[cntModule][TextStringPtr] = 0x00;
									}
								}
								StudioMicControl();
    2532:	0e 94 5e 03 	call	0x6bc	; 0x6bc <StudioMicControl>
							}
							break;
    2536:	05 c0       	rjmp	.+10     	; 0x2542 <__DATA_REGION_LENGTH__+0x542>
							case STUDIOMIC:
							{
								StudioMicControl();
    2538:	0e 94 5e 03 	call	0x6bc	; 0x6bc <StudioMicControl>
							}
							break;
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <__DATA_REGION_LENGTH__+0x542>
							case ONAIR2LINEA:
							case ONAIR2LINEB:
							case ONAIR2MIC:
							{
								//OnAir1/2 Control
								OnAirControl();
    253e:	0e 94 76 04 	call	0x8ec	; 0x8ec <OnAirControl>
							}
							break;
						}

						Buffer[7] = 0x30+((Module+1)/10);
    2542:	c6 01       	movw	r24, r12
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	6a e0       	ldi	r22, 0x0A	; 10
    2548:	70 e0       	ldi	r23, 0x00	; 0
    254a:	0e 94 84 28 	call	0x5108	; 0x5108 <__divmodhi4>
    254e:	60 5d       	subi	r22, 0xD0	; 208
    2550:	68 87       	std	Y+8, r22	; 0x08
						Buffer[8] = 0x30+((Module+1)%10);
    2552:	80 5d       	subi	r24, 0xD0	; 208
    2554:	89 87       	std	Y+9, r24	; 0x09
						if (TextStringPtr==STARTPULS)
    2556:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    255a:	89 30       	cpi	r24, 0x09	; 9
    255c:	e9 f4       	brne	.+58     	; 0x2598 <__DATA_REGION_LENGTH__+0x598>
						{
							if (ConsoleModuleSettings[Module][TextStringPtr])
    255e:	8d e1       	ldi	r24, 0x1D	; 29
    2560:	8c 9d       	mul	r24, r12
    2562:	f0 01       	movw	r30, r0
    2564:	8d 9d       	mul	r24, r13
    2566:	f0 0d       	add	r31, r0
    2568:	11 24       	eor	r1, r1
    256a:	e5 5e       	subi	r30, 0xE5	; 229
    256c:	f7 4c       	sbci	r31, 0xC7	; 199
    256e:	81 85       	ldd	r24, Z+9	; 0x09
    2570:	88 23       	and	r24, r24
    2572:	49 f0       	breq	.+18     	; 0x2586 <__DATA_REGION_LENGTH__+0x586>
							{
								Buffer[11] = 'P';
    2574:	80 e5       	ldi	r24, 0x50	; 80
    2576:	8c 87       	std	Y+12, r24	; 0x0c
								Buffer[12] = 'u';
    2578:	85 e7       	ldi	r24, 0x75	; 117
    257a:	8d 87       	std	Y+13, r24	; 0x0d
								Buffer[13] = 'l';
    257c:	8c e6       	ldi	r24, 0x6C	; 108
    257e:	8e 87       	std	Y+14, r24	; 0x0e
								Buffer[14] = 's';
    2580:	83 e7       	ldi	r24, 0x73	; 115
    2582:	8f 87       	std	Y+15, r24	; 0x0f
    2584:	23 c0       	rjmp	.+70     	; 0x25cc <__DATA_REGION_LENGTH__+0x5cc>
							}
							else
							{
								Buffer[11] = 'C';
    2586:	83 e4       	ldi	r24, 0x43	; 67
    2588:	8c 87       	std	Y+12, r24	; 0x0c
								Buffer[12] = 'o';
    258a:	8f e6       	ldi	r24, 0x6F	; 111
    258c:	8d 87       	std	Y+13, r24	; 0x0d
								Buffer[13] = 'n';
    258e:	8e e6       	ldi	r24, 0x6E	; 110
    2590:	8e 87       	std	Y+14, r24	; 0x0e
								Buffer[14] = 't';
    2592:	84 e7       	ldi	r24, 0x74	; 116
    2594:	8f 87       	std	Y+15, r24	; 0x0f
    2596:	1a c0       	rjmp	.+52     	; 0x25cc <__DATA_REGION_LENGTH__+0x5cc>
							}
						}
						else
						{
							if (ConsoleModuleSettings[Module][TextStringPtr])
    2598:	9d e1       	ldi	r25, 0x1D	; 29
    259a:	9c 9d       	mul	r25, r12
    259c:	f0 01       	movw	r30, r0
    259e:	9d 9d       	mul	r25, r13
    25a0:	f0 0d       	add	r31, r0
    25a2:	11 24       	eor	r1, r1
    25a4:	e5 5e       	subi	r30, 0xE5	; 229
    25a6:	f7 4c       	sbci	r31, 0xC7	; 199
    25a8:	e8 0f       	add	r30, r24
    25aa:	f1 1d       	adc	r31, r1
    25ac:	80 81       	ld	r24, Z
    25ae:	88 23       	and	r24, r24
    25b0:	39 f0       	breq	.+14     	; 0x25c0 <__DATA_REGION_LENGTH__+0x5c0>
							{
								Buffer[11] = 'Y';
    25b2:	89 e5       	ldi	r24, 0x59	; 89
    25b4:	8c 87       	std	Y+12, r24	; 0x0c
								Buffer[12] = 'e';
    25b6:	85 e6       	ldi	r24, 0x65	; 101
    25b8:	8d 87       	std	Y+13, r24	; 0x0d
								Buffer[13] = 's';
    25ba:	83 e7       	ldi	r24, 0x73	; 115
    25bc:	8e 87       	std	Y+14, r24	; 0x0e
    25be:	06 c0       	rjmp	.+12     	; 0x25cc <__DATA_REGION_LENGTH__+0x5cc>
							}
							else
							{
								Buffer[11] = ' ';
    25c0:	80 e2       	ldi	r24, 0x20	; 32
    25c2:	8c 87       	std	Y+12, r24	; 0x0c
								Buffer[12] = 'N';
    25c4:	8e e4       	ldi	r24, 0x4E	; 78
    25c6:	8d 87       	std	Y+13, r24	; 0x0d
								Buffer[13] = 'o';
    25c8:	8f e6       	ldi	r24, 0x6F	; 111
    25ca:	8e 87       	std	Y+14, r24	; 0x0e
							}
						}
						SetLCD(0,"\xC0");
    25cc:	6f e2       	ldi	r22, 0x2F	; 47
    25ce:	70 e2       	ldi	r23, 0x20	; 32
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(1,Buffer);
    25d8:	be 01       	movw	r22, r28
    25da:	6f 5f       	subi	r22, 0xFF	; 255
    25dc:	7f 4f       	sbci	r23, 0xFF	; 255
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						ShowFunction(TextStringPtr);
    25e6:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    25ea:	0e 94 3d 03 	call	0x67a	; 0x67a <ShowFunction>

			
						SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    25ee:	20 91 82 22 	lds	r18, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    25f2:	e2 2f       	mov	r30, r18
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	eb 53       	subi	r30, 0x3B	; 59
    25f8:	fc 4d       	sbci	r31, 0xDC	; 220
    25fa:	83 e9       	ldi	r24, 0x93	; 147
    25fc:	80 83       	st	Z, r24
						SerialBufferOut[SerialBufferOutPtrTop++] = Module;
    25fe:	82 e0       	ldi	r24, 0x02	; 2
    2600:	82 0f       	add	r24, r18
    2602:	e1 e0       	ldi	r30, 0x01	; 1
    2604:	e2 0f       	add	r30, r18
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	eb 53       	subi	r30, 0x3B	; 59
    260a:	fc 4d       	sbci	r31, 0xDC	; 220
    260c:	e0 82       	st	Z, r14
    260e:	9d e1       	ldi	r25, 0x1D	; 29
    2610:	e9 9e       	mul	r14, r25
    2612:	d0 01       	movw	r26, r0
    2614:	11 24       	eor	r1, r1
    2616:	a5 5e       	subi	r26, 0xE5	; 229
    2618:	b7 4c       	sbci	r27, 0xC7	; 199
    261a:	21 5e       	subi	r18, 0xE1	; 225
						for (cntByte=0; cntByte<29; cntByte++)
						{
							SerialBufferOut[SerialBufferOutPtrTop++] =
							ConsoleModuleSettings[Module][cntByte]&0x7F;
    261c:	9d 91       	ld	r25, X+
			
						SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
						SerialBufferOut[SerialBufferOutPtrTop++] = Module;
						for (cntByte=0; cntByte<29; cntByte++)
						{
							SerialBufferOut[SerialBufferOutPtrTop++] =
    261e:	e8 2f       	mov	r30, r24
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	eb 53       	subi	r30, 0x3B	; 59
    2624:	fc 4d       	sbci	r31, 0xDC	; 220
    2626:	9f 77       	andi	r25, 0x7F	; 127
    2628:	90 83       	st	Z, r25
    262a:	8f 5f       	subi	r24, 0xFF	; 255
						ShowFunction(TextStringPtr);

			
						SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
						SerialBufferOut[SerialBufferOutPtrTop++] = Module;
						for (cntByte=0; cntByte<29; cntByte++)
    262c:	28 13       	cpse	r18, r24
    262e:	f6 cf       	rjmp	.-20     	; 0x261c <__DATA_REGION_LENGTH__+0x61c>
    2630:	20 93 82 22 	sts	0x2282, r18	; 0x802282 <SerialBufferOutPtrTop>
    2634:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					}
				}
				break;
				default:
				{
					switch (ModuleType[Module])
    2638:	c4 2e       	mov	r12, r20
    263a:	d1 2c       	mov	r13, r1
    263c:	f6 01       	movw	r30, r12
    263e:	e0 59       	subi	r30, 0x90	; 144
    2640:	fd 4d       	sbci	r31, 0xDD	; 221
    2642:	80 81       	ld	r24, Z
    2644:	81 30       	cpi	r24, 0x01	; 1
    2646:	29 f0       	breq	.+10     	; 0x2652 <__DATA_REGION_LENGTH__+0x652>
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	09 f4       	brne	.+2      	; 0x264e <__DATA_REGION_LENGTH__+0x64e>
    264c:	97 c0       	rjmp	.+302    	; 0x277c <__DATA_REGION_LENGTH__+0x77c>
    264e:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					{
						case TRIPLE:
						{	// Triple
							if (EventOn)
    2652:	01 2b       	or	r16, r17
    2654:	11 f0       	breq	.+4      	; 0x265a <__DATA_REGION_LENGTH__+0x65a>
    2656:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
							{
								if (ConsoleFunctionData[Module]&CUE_FUNCTION)
    265a:	f6 01       	movw	r30, r12
    265c:	e0 56       	subi	r30, 0x60	; 96
    265e:	fd 4d       	sbci	r31, 0xDD	; 221
    2660:	80 81       	ld	r24, Z
    2662:	82 ff       	sbrs	r24, 2
    2664:	46 c0       	rjmp	.+140    	; 0x26f2 <__DATA_REGION_LENGTH__+0x6f2>
								{
									unsigned char cntModule;

									ConsoleFunctionData[Module] &= CUE_LED^0xFF;
									ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2666:	00 ea       	ldi	r16, 0xA0	; 160
    2668:	12 e2       	ldi	r17, 0x22	; 34
    266a:	f6 01       	movw	r30, r12
    266c:	e0 56       	subi	r30, 0x60	; 96
    266e:	fd 4d       	sbci	r31, 0xDD	; 221
    2670:	83 7f       	andi	r24, 0xF3	; 243
    2672:	80 83       	st	Z, r24

									CheckStartCondition(Module);
    2674:	84 2f       	mov	r24, r20
    2676:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>
									//DJ-Control
									DJControl();
    267a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>

									//Check auto communication
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    267e:	d8 01       	movw	r26, r16
    2680:	50 96       	adiw	r26, 0x10	; 16
    2682:	8c 91       	ld	r24, X
    2684:	50 97       	sbiw	r26, 0x10	; 16
    2686:	87 7f       	andi	r24, 0xF7	; 247
    2688:	50 96       	adiw	r26, 0x10	; 16
    268a:	8c 93       	st	X, r24
    268c:	50 97       	sbiw	r26, 0x10	; 16
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										if (ConsoleFunctionData[cntModule]&CUE_LED)
										{
											if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    268e:	10 91 90 2b 	lds	r17, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    2692:	cd 01       	movw	r24, r26
    2694:	e2 e1       	ldi	r30, 0x12	; 18
    2696:	fb e2       	ldi	r31, 0x2B	; 43
    2698:	0f 2e       	mov	r0, r31
    269a:	f9 e2       	ldi	r31, 0x29	; 41
    269c:	ef 2e       	mov	r14, r31
    269e:	f8 e3       	ldi	r31, 0x38	; 56
    26a0:	ff 2e       	mov	r15, r31
    26a2:	f0 2d       	mov	r31, r0
    26a4:	42 e9       	ldi	r20, 0x92	; 146
    26a6:	5b e2       	ldi	r21, 0x2B	; 43
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    26a8:	bd 01       	movw	r22, r26

									//Check auto communication
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										if (ConsoleFunctionData[cntModule]&CUE_LED)
    26aa:	dc 01       	movw	r26, r24
    26ac:	2d 91       	ld	r18, X+
    26ae:	cd 01       	movw	r24, r26
    26b0:	23 ff       	sbrs	r18, 3
    26b2:	12 c0       	rjmp	.+36     	; 0x26d8 <__DATA_REGION_LENGTH__+0x6d8>
										{
											if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    26b4:	30 81       	ld	r19, Z
    26b6:	33 23       	and	r19, r19
    26b8:	7c f4       	brge	.+30     	; 0x26d8 <__DATA_REGION_LENGTH__+0x6d8>
    26ba:	d7 01       	movw	r26, r14
    26bc:	3c 91       	ld	r19, X
    26be:	33 23       	and	r19, r19
    26c0:	59 f0       	breq	.+22     	; 0x26d8 <__DATA_REGION_LENGTH__+0x6d8>
    26c2:	24 ff       	sbrs	r18, 4
    26c4:	09 c0       	rjmp	.+18     	; 0x26d8 <__DATA_REGION_LENGTH__+0x6d8>
    26c6:	11 23       	and	r17, r17
    26c8:	39 f0       	breq	.+14     	; 0x26d8 <__DATA_REGION_LENGTH__+0x6d8>
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    26ca:	db 01       	movw	r26, r22
    26cc:	50 96       	adiw	r26, 0x10	; 16
    26ce:	2c 91       	ld	r18, X
    26d0:	50 97       	sbiw	r26, 0x10	; 16
    26d2:	28 60       	ori	r18, 0x08	; 8
    26d4:	50 96       	adiw	r26, 0x10	; 16
    26d6:	2c 93       	st	X, r18
    26d8:	38 96       	adiw	r30, 0x08	; 8
    26da:	bd e1       	ldi	r27, 0x1D	; 29
    26dc:	eb 0e       	add	r14, r27
    26de:	f1 1c       	adc	r15, r1
									//DJ-Control
									DJControl();

									//Check auto communication
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    26e0:	4e 17       	cp	r20, r30
    26e2:	5f 07       	cpc	r21, r31
    26e4:	11 f7       	brne	.-60     	; 0x26aa <__DATA_REGION_LENGTH__+0x6aa>
										{
											if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
										}
									}
  								CheckTBMic();
    26e6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CheckTBMic>
									SendSerialData = 1;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    26f0:	41 c0       	rjmp	.+130    	; 0x2774 <__DATA_REGION_LENGTH__+0x774>
								else
								{
									unsigned char cntModule;

									ConsoleFunctionData[Module] |= CUE_LED;
									ConsoleFunctionData[Module] |= CUE_FUNCTION;
    26f2:	00 ea       	ldi	r16, 0xA0	; 160
    26f4:	12 e2       	ldi	r17, 0x22	; 34
    26f6:	f6 01       	movw	r30, r12
    26f8:	e0 56       	subi	r30, 0x60	; 96
    26fa:	fd 4d       	sbci	r31, 0xDD	; 221
    26fc:	8c 60       	ori	r24, 0x0C	; 12
    26fe:	80 83       	st	Z, r24
									CheckStartCondition(Module);									
    2700:	84 2f       	mov	r24, r20
    2702:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>

									//DJ-Control
									DJControl();
    2706:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>

									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    270a:	f8 01       	movw	r30, r16
    270c:	80 89       	ldd	r24, Z+16	; 0x10
    270e:	87 7f       	andi	r24, 0xF7	; 247
    2710:	80 8b       	std	Z+16, r24	; 0x10
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										if (ConsoleFunctionData[cntModule]&CUE_LED)
										{
											if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    2712:	10 91 90 2b 	lds	r17, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    2716:	cf 01       	movw	r24, r30
    2718:	e2 e1       	ldi	r30, 0x12	; 18
    271a:	fb e2       	ldi	r31, 0x2B	; 43
    271c:	0f 2e       	mov	r0, r31
    271e:	f9 e2       	ldi	r31, 0x29	; 41
    2720:	ef 2e       	mov	r14, r31
    2722:	f8 e3       	ldi	r31, 0x38	; 56
    2724:	ff 2e       	mov	r15, r31
    2726:	f0 2d       	mov	r31, r0
    2728:	42 e9       	ldi	r20, 0x92	; 146
    272a:	5b e2       	ldi	r21, 0x2B	; 43
											{
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    272c:	bc 01       	movw	r22, r24
									DJControl();

									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										if (ConsoleFunctionData[cntModule]&CUE_LED)
    272e:	dc 01       	movw	r26, r24
    2730:	2d 91       	ld	r18, X+
    2732:	cd 01       	movw	r24, r26
    2734:	23 ff       	sbrs	r18, 3
    2736:	12 c0       	rjmp	.+36     	; 0x275c <__DATA_REGION_LENGTH__+0x75c>
										{
											if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    2738:	30 81       	ld	r19, Z
    273a:	33 23       	and	r19, r19
    273c:	7c f4       	brge	.+30     	; 0x275c <__DATA_REGION_LENGTH__+0x75c>
    273e:	d7 01       	movw	r26, r14
    2740:	3c 91       	ld	r19, X
    2742:	33 23       	and	r19, r19
    2744:	59 f0       	breq	.+22     	; 0x275c <__DATA_REGION_LENGTH__+0x75c>
    2746:	24 ff       	sbrs	r18, 4
    2748:	09 c0       	rjmp	.+18     	; 0x275c <__DATA_REGION_LENGTH__+0x75c>
    274a:	11 23       	and	r17, r17
    274c:	39 f0       	breq	.+14     	; 0x275c <__DATA_REGION_LENGTH__+0x75c>
											{
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    274e:	db 01       	movw	r26, r22
    2750:	50 96       	adiw	r26, 0x10	; 16
    2752:	2c 91       	ld	r18, X
    2754:	50 97       	sbiw	r26, 0x10	; 16
    2756:	28 60       	ori	r18, 0x08	; 8
    2758:	50 96       	adiw	r26, 0x10	; 16
    275a:	2c 93       	st	X, r18
    275c:	38 96       	adiw	r30, 0x08	; 8
    275e:	bd e1       	ldi	r27, 0x1D	; 29
    2760:	eb 0e       	add	r14, r27
    2762:	f1 1c       	adc	r15, r1

									//DJ-Control
									DJControl();

									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2764:	4e 17       	cp	r20, r30
    2766:	5f 07       	cpc	r21, r31
    2768:	11 f7       	brne	.-60     	; 0x272e <__DATA_REGION_LENGTH__+0x72e>
											{
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
											}
										}
								}
  								CheckTBMic();
    276a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CheckTBMic>
									SendSerialData = 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
								}
								// Cue-Control
								CueControl();
    2774:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>
    2778:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
							}
						}
						break;
						case TELCO:
						{	// Telco
							if ((EventOn) && (!(ModuleData[Module][FADERON]&0x80)))
    277c:	01 2b       	or	r16, r17
    277e:	11 f0       	breq	.+4      	; 0x2784 <__DATA_REGION_LENGTH__+0x784>
    2780:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
    2784:	f6 01       	movw	r30, r12
    2786:	ee 0f       	add	r30, r30
    2788:	ff 1f       	adc	r31, r31
    278a:	ee 0f       	add	r30, r30
    278c:	ff 1f       	adc	r31, r31
    278e:	ee 0f       	add	r30, r30
    2790:	ff 1f       	adc	r31, r31
    2792:	e5 5f       	subi	r30, 0xF5	; 245
    2794:	f4 4d       	sbci	r31, 0xD4	; 212
    2796:	81 81       	ldd	r24, Z+1	; 0x01
    2798:	88 23       	and	r24, r24
    279a:	14 f4       	brge	.+4      	; 0x27a0 <__DATA_REGION_LENGTH__+0x7a0>
    279c:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
							{	 // JB
								char TelcoNr = GetTelcoNrFromModuleNr(Module);
    27a0:	84 2f       	mov	r24, r20
    27a2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <GetTelcoNrFromModuleNr>

								if (ConsoleFunctionData[Module]&CUE_FUNCTION)
    27a6:	f6 01       	movw	r30, r12
    27a8:	e0 56       	subi	r30, 0x60	; 96
    27aa:	fd 4d       	sbci	r31, 0xDD	; 221
    27ac:	90 81       	ld	r25, Z
    27ae:	92 ff       	sbrs	r25, 2
    27b0:	25 c0       	rjmp	.+74     	; 0x27fc <__DATA_REGION_LENGTH__+0x7fc>
								{
									ConsoleFunctionData[Module] &= CUE_LED^0xFF;
									ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    27b2:	f6 01       	movw	r30, r12
    27b4:	e0 56       	subi	r30, 0x60	; 96
    27b6:	fd 4d       	sbci	r31, 0xDD	; 221
    27b8:	93 7f       	andi	r25, 0xF3	; 243
    27ba:	90 83       	st	Z, r25

									if ((TelcoNr>=0) && (TelcoNr<4))
    27bc:	84 30       	cpi	r24, 0x04	; 4
    27be:	c0 f4       	brcc	.+48     	; 0x27f0 <__DATA_REGION_LENGTH__+0x7f0>
									{
										SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    27c0:	90 91 82 22 	lds	r25, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    27c4:	e9 2f       	mov	r30, r25
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	eb 53       	subi	r30, 0x3B	; 59
    27ca:	fc 4d       	sbci	r31, 0xDC	; 220
    27cc:	22 ec       	ldi	r18, 0xC2	; 194
    27ce:	20 83       	st	Z, r18
										SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    27d0:	e1 e0       	ldi	r30, 0x01	; 1
    27d2:	e9 0f       	add	r30, r25
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	eb 53       	subi	r30, 0x3B	; 59
    27d8:	fc 4d       	sbci	r31, 0xDC	; 220
    27da:	80 83       	st	Z, r24
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    27dc:	83 e0       	ldi	r24, 0x03	; 3
    27de:	89 0f       	add	r24, r25
    27e0:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    27e4:	e2 e0       	ldi	r30, 0x02	; 2
    27e6:	e9 0f       	add	r30, r25
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	eb 53       	subi	r30, 0x3B	; 59
    27ec:	fc 4d       	sbci	r31, 0xDC	; 220
    27ee:	10 82       	st	Z, r1
									}
									CheckTBMic();
    27f0:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CheckTBMic>
									SendSerialData = 1;
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    27fa:	53 c0       	rjmp	.+166    	; 0x28a2 <__DATA_REGION_LENGTH__+0x8a2>
								else
								{
									ConsoleFunctionData[Module] |= START_FUNCTION;
									ConsoleFunctionData[Module] |= ON_LED;
									ConsoleFunctionData[Module] |= CUE_LED;
									ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    27fc:	f6 01       	movw	r30, r12
    27fe:	e0 56       	subi	r30, 0x60	; 96
    2800:	fd 4d       	sbci	r31, 0xDD	; 221
    2802:	9b 62       	ori	r25, 0x2B	; 43
    2804:	90 83       	st	Z, r25
//									ConsoleFunctionData[Module] |= CUE_FUNCTION;
									cntCueFunction[Module] = DELAY;
    2806:	f6 01       	movw	r30, r12
    2808:	ed 5e       	subi	r30, 0xED	; 237
    280a:	fe 4d       	sbci	r31, 0xDE	; 222
    280c:	9a e0       	ldi	r25, 0x0A	; 10
    280e:	90 83       	st	Z, r25

									SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_START;
    2810:	90 91 82 22 	lds	r25, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2814:	e9 2f       	mov	r30, r25
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	eb 53       	subi	r30, 0x3B	; 59
    281a:	fc 4d       	sbci	r31, 0xDC	; 220
    281c:	22 e8       	ldi	r18, 0x82	; 130
    281e:	20 83       	st	Z, r18
									SerialBufferOut[SerialBufferOutPtrTop++] = Module;
    2820:	e1 e0       	ldi	r30, 0x01	; 1
    2822:	e9 0f       	add	r30, r25
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	eb 53       	subi	r30, 0x3B	; 59
    2828:	fc 4d       	sbci	r31, 0xDC	; 220
    282a:	e0 82       	st	Z, r14
									SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    282c:	e3 e0       	ldi	r30, 0x03	; 3
    282e:	e9 0f       	add	r30, r25
    2830:	e0 93 82 22 	sts	0x2282, r30	; 0x802282 <SerialBufferOutPtrTop>
    2834:	a2 e0       	ldi	r26, 0x02	; 2
    2836:	a9 0f       	add	r26, r25
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	ab 53       	subi	r26, 0x3B	; 59
    283c:	bc 4d       	sbci	r27, 0xDC	; 220
    283e:	21 e0       	ldi	r18, 0x01	; 1
    2840:	2c 93       	st	X, r18

									if ((TelcoNr>=0) && (TelcoNr<4))
    2842:	84 30       	cpi	r24, 0x04	; 4
    2844:	48 f5       	brcc	.+82     	; 0x2898 <__DATA_REGION_LENGTH__+0x898>
									{
										SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CONNECT;
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	eb 53       	subi	r30, 0x3B	; 59
    284a:	fc 4d       	sbci	r31, 0xDC	; 220
    284c:	20 ec       	ldi	r18, 0xC0	; 192
    284e:	20 83       	st	Z, r18
										SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2850:	e4 e0       	ldi	r30, 0x04	; 4
    2852:	e9 0f       	add	r30, r25
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	eb 53       	subi	r30, 0x3B	; 59
    2858:	fc 4d       	sbci	r31, 0xDC	; 220
    285a:	80 83       	st	Z, r24
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    285c:	e5 e0       	ldi	r30, 0x05	; 5
    285e:	e9 0f       	add	r30, r25
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	eb 53       	subi	r30, 0x3B	; 59
    2864:	fc 4d       	sbci	r31, 0xDC	; 220
    2866:	21 e0       	ldi	r18, 0x01	; 1
    2868:	20 83       	st	Z, r18
									}

									if ((TelcoNr>=0) && (TelcoNr<4))
									{
										SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    286a:	e6 e0       	ldi	r30, 0x06	; 6
    286c:	e9 0f       	add	r30, r25
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	eb 53       	subi	r30, 0x3B	; 59
    2872:	fc 4d       	sbci	r31, 0xDC	; 220
    2874:	32 ec       	ldi	r19, 0xC2	; 194
    2876:	30 83       	st	Z, r19
										SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2878:	e7 e0       	ldi	r30, 0x07	; 7
    287a:	e9 0f       	add	r30, r25
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	eb 53       	subi	r30, 0x3B	; 59
    2880:	fc 4d       	sbci	r31, 0xDC	; 220
    2882:	80 83       	st	Z, r24
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2884:	89 e0       	ldi	r24, 0x09	; 9
    2886:	89 0f       	add	r24, r25
    2888:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    288c:	e8 e0       	ldi	r30, 0x08	; 8
    288e:	e9 0f       	add	r30, r25
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	eb 53       	subi	r30, 0x3B	; 59
    2894:	fc 4d       	sbci	r31, 0xDC	; 220
    2896:	20 83       	st	Z, r18
									}
									CheckTBMic();
    2898:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CheckTBMic>
									SendSerialData = 1;
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
								}
								// Cue-Control
								CueControl();
    28a2:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>
    28a6:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			}
		}
		break;
		case ON:
		{
			switch (ModuleType[Module])
    28aa:	c4 2e       	mov	r12, r20
    28ac:	d1 2c       	mov	r13, r1
    28ae:	f6 01       	movw	r30, r12
    28b0:	e0 59       	subi	r30, 0x90	; 144
    28b2:	fd 4d       	sbci	r31, 0xDD	; 221
    28b4:	80 81       	ld	r24, Z
    28b6:	81 30       	cpi	r24, 0x01	; 1
    28b8:	29 f0       	breq	.+10     	; 0x28c4 <__DATA_REGION_LENGTH__+0x8c4>
    28ba:	82 30       	cpi	r24, 0x02	; 2
    28bc:	09 f4       	brne	.+2      	; 0x28c0 <__DATA_REGION_LENGTH__+0x8c0>
    28be:	c2 c0       	rjmp	.+388    	; 0x2a44 <__DATA_REGION_LENGTH__+0xa44>
    28c0:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			{
				case TRIPLE:
				{	// Triple
					if (ConsoleModuleSettings[Module][SWITCHSTART])
    28c4:	8d e1       	ldi	r24, 0x1D	; 29
    28c6:	8c 9d       	mul	r24, r12
    28c8:	f0 01       	movw	r30, r0
    28ca:	8d 9d       	mul	r24, r13
    28cc:	f0 0d       	add	r31, r0
    28ce:	11 24       	eor	r1, r1
    28d0:	e5 5e       	subi	r30, 0xE5	; 229
    28d2:	f7 4c       	sbci	r31, 0xC7	; 199
    28d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    28d6:	88 23       	and	r24, r24
    28d8:	59 f1       	breq	.+86     	; 0x2930 <__DATA_REGION_LENGTH__+0x930>
					{
						ConsoleFunctionData[Module] |= ON_LED;
						ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
						ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    28da:	f6 01       	movw	r30, r12
    28dc:	e0 56       	subi	r30, 0x60	; 96
    28de:	fd 4d       	sbci	r31, 0xDD	; 221
    28e0:	80 81       	ld	r24, Z
    28e2:	8f 7e       	andi	r24, 0xEF	; 239
    28e4:	81 62       	ori	r24, 0x21	; 33
    28e6:	80 83       	st	Z, r24

						if (EventOn)
    28e8:	01 2b       	or	r16, r17
    28ea:	51 f4       	brne	.+20     	; 0x2900 <__DATA_REGION_LENGTH__+0x900>
						{
							StartControl(Module,1);
    28ec:	61 e0       	ldi	r22, 0x01	; 1
    28ee:	84 2f       	mov	r24, r20
    28f0:	0e 94 92 05 	call	0xb24	; 0xb24 <StartControl>
							StartActive[Module] = 1;
    28f4:	f6 01       	movw	r30, r12
    28f6:	ec 56       	subi	r30, 0x6C	; 108
    28f8:	f4 4d       	sbci	r31, 0xD4	; 212
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	80 83       	st	Z, r24
    28fe:	13 c0       	rjmp	.+38     	; 0x2926 <__DATA_REGION_LENGTH__+0x926>
						}
						else
						{
							if (!ConsoleModuleSettings[Module][STARTPULS])
    2900:	8d e1       	ldi	r24, 0x1D	; 29
    2902:	8c 9d       	mul	r24, r12
    2904:	f0 01       	movw	r30, r0
    2906:	8d 9d       	mul	r24, r13
    2908:	f0 0d       	add	r31, r0
    290a:	11 24       	eor	r1, r1
    290c:	e5 5e       	subi	r30, 0xE5	; 229
    290e:	f7 4c       	sbci	r31, 0xC7	; 199
    2910:	81 85       	ldd	r24, Z+9	; 0x09
    2912:	81 11       	cpse	r24, r1
    2914:	08 c0       	rjmp	.+16     	; 0x2926 <__DATA_REGION_LENGTH__+0x926>
							{
								StartControl(Module,0);
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	84 2f       	mov	r24, r20
    291a:	0e 94 92 05 	call	0xb24	; 0xb24 <StartControl>
								StartActive[Module] = 0;
    291e:	f6 01       	movw	r30, r12
    2920:	ec 56       	subi	r30, 0x6C	; 108
    2922:	f4 4d       	sbci	r31, 0xD4	; 212
    2924:	10 82       	st	Z, r1
							}
						}
						SendSerialData = 1;
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    292c:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					}
					else
					{
						if (EventOn)
    2930:	01 2b       	or	r16, r17
    2932:	11 f0       	breq	.+4      	; 0x2938 <__DATA_REGION_LENGTH__+0x938>
    2934:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						{
							if (ConsoleFunctionData[Module]&ON_LED)
    2938:	f6 01       	movw	r30, r12
    293a:	e0 56       	subi	r30, 0x60	; 96
    293c:	fd 4d       	sbci	r31, 0xDD	; 221
    293e:	80 81       	ld	r24, Z
    2940:	85 ff       	sbrs	r24, 5
    2942:	27 c0       	rjmp	.+78     	; 0x2992 <__DATA_REGION_LENGTH__+0x992>
							{
								ConsoleFunctionData[Module] &= ON_LED^0xFF;
								ConsoleFunctionData[Module] &= REMOTE_FUNCTION^0xFF;
    2944:	8f 01       	movw	r16, r30
    2946:	8e 7d       	andi	r24, 0xDE	; 222
    2948:	80 83       	st	Z, r24
	
								CheckStartCondition(Module);
    294a:	84 2f       	mov	r24, r20
    294c:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>

								ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    2950:	d8 01       	movw	r26, r16
    2952:	8c 91       	ld	r24, X
    2954:	80 61       	ori	r24, 0x10	; 16
    2956:	8c 93       	st	X, r24
				
								if ((ModuleData[Module][FADERON]&0x80))
    2958:	f6 01       	movw	r30, r12
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	ee 0f       	add	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	ee 0f       	add	r30, r30
    2964:	ff 1f       	adc	r31, r31
    2966:	e5 5f       	subi	r30, 0xF5	; 245
    2968:	f4 4d       	sbci	r31, 0xD4	; 212
    296a:	81 81       	ldd	r24, Z+1	; 0x01
    296c:	88 23       	and	r24, r24
    296e:	64 f4       	brge	.+24     	; 0x2988 <__DATA_REGION_LENGTH__+0x988>
								{	 // !JB
									CheckStartCondition(Module);
    2970:	8e 2d       	mov	r24, r14
    2972:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>

									//DJ-Control
									DJControl();
    2976:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>
			
									//Studio-Mic-Control
									StudioMicControl();			
    297a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <StudioMicControl>

									//Timer-Control
									TimerControl(Module);
    297e:	8e 2d       	mov	r24, r14
    2980:	0e 94 c4 02 	call	0x588	; 0x588 <TimerControl>
				
									//OnAir Control
									OnAirControl();
    2984:	0e 94 76 04 	call	0x8ec	; 0x8ec <OnAirControl>
								}
								SendSerialData = 1;
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    298e:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
							}
							else
							{
								ConsoleFunctionData[Module] |= ON_LED;
    2992:	f6 01       	movw	r30, r12
    2994:	e0 56       	subi	r30, 0x60	; 96
    2996:	fd 4d       	sbci	r31, 0xDD	; 221
    2998:	80 62       	ori	r24, 0x20	; 32
    299a:	80 83       	st	Z, r24

								CheckStartCondition(Module);
    299c:	84 2f       	mov	r24, r20
    299e:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>

								if ((ModuleData[Module][FADERON]&0x80))
    29a2:	f6 01       	movw	r30, r12
    29a4:	ee 0f       	add	r30, r30
    29a6:	ff 1f       	adc	r31, r31
    29a8:	ee 0f       	add	r30, r30
    29aa:	ff 1f       	adc	r31, r31
    29ac:	ee 0f       	add	r30, r30
    29ae:	ff 1f       	adc	r31, r31
    29b0:	e5 5f       	subi	r30, 0xF5	; 245
    29b2:	f4 4d       	sbci	r31, 0xD4	; 212
    29b4:	81 81       	ldd	r24, Z+1	; 0x01
    29b6:	88 23       	and	r24, r24
    29b8:	0c f0       	brlt	.+2      	; 0x29bc <__DATA_REGION_LENGTH__+0x9bc>
    29ba:	3f c0       	rjmp	.+126    	; 0x2a3a <__DATA_REGION_LENGTH__+0xa3a>
								{	 // !JB
									ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    29bc:	86 01       	movw	r16, r12
    29be:	00 56       	subi	r16, 0x60	; 96
    29c0:	1d 4d       	sbci	r17, 0xDD	; 221
    29c2:	f8 01       	movw	r30, r16
    29c4:	80 81       	ld	r24, Z
    29c6:	81 60       	ori	r24, 0x01	; 1
    29c8:	80 83       	st	Z, r24

									CheckStartCondition(Module);
    29ca:	8e 2d       	mov	r24, r14
    29cc:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>

									ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    29d0:	d8 01       	movw	r26, r16
    29d2:	8c 91       	ld	r24, X
									ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    29d4:	98 2f       	mov	r25, r24
    29d6:	93 7f       	andi	r25, 0xF3	; 243
    29d8:	9c 93       	st	X, r25
								
									//Cue-Control
									if (ConsoleMasterSettings[AUTOCUERESET])
    29da:	90 91 8e 2b 	lds	r25, 0x2B8E	; 0x802b8e <ConsoleMasterSettings>
    29de:	99 23       	and	r25, r25
    29e0:	c1 f0       	breq	.+48     	; 0x2a12 <__DATA_REGION_LENGTH__+0xa12>
									{
										if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    29e2:	f6 01       	movw	r30, r12
    29e4:	ee 0f       	add	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	ee 0f       	add	r30, r30
    29ea:	ff 1f       	adc	r31, r31
    29ec:	ee 0f       	add	r30, r30
    29ee:	ff 1f       	adc	r31, r31
    29f0:	e5 5f       	subi	r30, 0xF5	; 245
    29f2:	f4 4d       	sbci	r31, 0xD4	; 212
    29f4:	91 81       	ldd	r25, Z+1	; 0x01
    29f6:	99 23       	and	r25, r25
    29f8:	64 f4       	brge	.+24     	; 0x2a12 <__DATA_REGION_LENGTH__+0xa12>
    29fa:	85 ff       	sbrs	r24, 5
    29fc:	0a c0       	rjmp	.+20     	; 0x2a12 <__DATA_REGION_LENGTH__+0xa12>
    29fe:	e0 ea       	ldi	r30, 0xA0	; 160
    2a00:	f2 e2       	ldi	r31, 0x22	; 34
    2a02:	20 eb       	ldi	r18, 0xB0	; 176
    2a04:	32 e2       	ldi	r19, 0x22	; 34
										{	 // !JB
											unsigned char cntModule;
											for (cntModule=0; cntModule<NROFMODULES; cntModule++)
											{
												ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
												ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    2a06:	80 81       	ld	r24, Z
    2a08:	83 7f       	andi	r24, 0xF3	; 243
    2a0a:	81 93       	st	Z+, r24
									if (ConsoleMasterSettings[AUTOCUERESET])
									{
										if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
										{	 // !JB
											unsigned char cntModule;
											for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2a0c:	2e 17       	cp	r18, r30
    2a0e:	3f 07       	cpc	r19, r31
    2a10:	d1 f7       	brne	.-12     	; 0x2a06 <__DATA_REGION_LENGTH__+0xa06>
												ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
												ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
											}
										}
									}
									CueControl();
    2a12:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>
			
									//Timer-Control
									TimerControl(Module);
    2a16:	8e 2d       	mov	r24, r14
    2a18:	0e 94 c4 02 	call	0x588	; 0x588 <TimerControl>
											
									//OnAirControl
									OnAirControl();
    2a1c:	0e 94 76 04 	call	0x8ec	; 0x8ec <OnAirControl>

									//DJ-Control
									DJControl();
    2a20:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>
			
									//Studio-Mic-Control
									StudioMicControl();
    2a24:	0e 94 5e 03 	call	0x6bc	; 0x6bc <StudioMicControl>

									CheckStartCondition(Module);
    2a28:	8e 2d       	mov	r24, r14
    2a2a:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>
														
									ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;					
    2a2e:	f6 01       	movw	r30, r12
    2a30:	e0 56       	subi	r30, 0x60	; 96
    2a32:	fd 4d       	sbci	r31, 0xDD	; 221
    2a34:	80 81       	ld	r24, Z
    2a36:	8f 7e       	andi	r24, 0xEF	; 239
    2a38:	80 83       	st	Z, r24
								}
								SendSerialData = 1;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    2a40:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					}
				}
				break;
				case TELCO:
				{ //Telco
					if (EventOn)
    2a44:	01 2b       	or	r16, r17
    2a46:	11 f0       	breq	.+4      	; 0x2a4c <__DATA_REGION_LENGTH__+0xa4c>
    2a48:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					{
						char TelcoNr = GetTelcoNrFromModuleNr(Module);
    2a4c:	84 2f       	mov	r24, r20
    2a4e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <GetTelcoNrFromModuleNr>
    2a52:	18 2f       	mov	r17, r24

						if (ConsoleFunctionData[Module]&ON_LED)
    2a54:	f6 01       	movw	r30, r12
    2a56:	e0 56       	subi	r30, 0x60	; 96
    2a58:	fd 4d       	sbci	r31, 0xDD	; 221
    2a5a:	80 81       	ld	r24, Z
    2a5c:	85 ff       	sbrs	r24, 5
    2a5e:	88 c0       	rjmp	.+272    	; 0x2b70 <__DATA_REGION_LENGTH__+0xb70>
						{
							char TelcoNr = GetTelcoNrFromModuleNr(Module);
    2a60:	8e 2d       	mov	r24, r14
    2a62:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <GetTelcoNrFromModuleNr>
    2a66:	18 2f       	mov	r17, r24
							if ((TelcoNr>=0) && (TelcoNr<4))
    2a68:	84 30       	cpi	r24, 0x04	; 4
    2a6a:	58 f5       	brcc	.+86     	; 0x2ac2 <__DATA_REGION_LENGTH__+0xac2>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2a6c:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2a70:	e8 2f       	mov	r30, r24
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	eb 53       	subi	r30, 0x3B	; 59
    2a76:	fc 4d       	sbci	r31, 0xDC	; 220
    2a78:	92 ec       	ldi	r25, 0xC2	; 194
    2a7a:	90 83       	st	Z, r25
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2a7c:	e1 e0       	ldi	r30, 0x01	; 1
    2a7e:	e8 0f       	add	r30, r24
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	eb 53       	subi	r30, 0x3B	; 59
    2a84:	fc 4d       	sbci	r31, 0xDC	; 220
    2a86:	10 83       	st	Z, r17
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2a88:	e2 e0       	ldi	r30, 0x02	; 2
    2a8a:	e8 0f       	add	r30, r24
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	eb 53       	subi	r30, 0x3B	; 59
    2a90:	fc 4d       	sbci	r31, 0xDC	; 220
    2a92:	10 82       	st	Z, r1

								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_MUTE;
    2a94:	e3 e0       	ldi	r30, 0x03	; 3
    2a96:	e8 0f       	add	r30, r24
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	eb 53       	subi	r30, 0x3B	; 59
    2a9c:	fc 4d       	sbci	r31, 0xDC	; 220
    2a9e:	93 ec       	ldi	r25, 0xC3	; 195
    2aa0:	90 83       	st	Z, r25
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2aa2:	e4 e0       	ldi	r30, 0x04	; 4
    2aa4:	e8 0f       	add	r30, r24
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	eb 53       	subi	r30, 0x3B	; 59
    2aaa:	fc 4d       	sbci	r31, 0xDC	; 220
    2aac:	10 83       	st	Z, r17
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2aae:	96 e0       	ldi	r25, 0x06	; 6
    2ab0:	98 0f       	add	r25, r24
    2ab2:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    2ab6:	e5 e0       	ldi	r30, 0x05	; 5
    2ab8:	e8 0f       	add	r30, r24
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	eb 53       	subi	r30, 0x3B	; 59
    2abe:	fc 4d       	sbci	r31, 0xDC	; 220
    2ac0:	10 82       	st	Z, r1

							ConsoleFunctionData[Module] &= ON_LED^0xFF;
							ConsoleFunctionData[Module] |= MUTE_FUNCTION;
							ConsoleFunctionData[Module] &= REMOTE_FUNCTION^0xFF;
							ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
							ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    2ac2:	f6 01       	movw	r30, r12
    2ac4:	e0 56       	subi	r30, 0x60	; 96
    2ac6:	fd 4d       	sbci	r31, 0xDD	; 221
    2ac8:	80 81       	ld	r24, Z
    2aca:	82 7d       	andi	r24, 0xD2	; 210
    2acc:	80 61       	ori	r24, 0x10	; 16
    2ace:	80 83       	st	Z, r24
//							ConsoleFunctionData[Module] &= START_FUNCTION^0xFF;			
							cntStartFunction[Module] = DELAY;
    2ad0:	f6 01       	movw	r30, r12
    2ad2:	ee 54       	subi	r30, 0x4E	; 78
    2ad4:	fd 4d       	sbci	r31, 0xDD	; 221
    2ad6:	8a e0       	ldi	r24, 0x0A	; 10
    2ad8:	80 83       	st	Z, r24
				
							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_STOP;
    2ada:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2ade:	e8 2f       	mov	r30, r24
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	eb 53       	subi	r30, 0x3B	; 59
    2ae4:	fc 4d       	sbci	r31, 0xDC	; 220
    2ae6:	93 e8       	ldi	r25, 0x83	; 131
    2ae8:	90 83       	st	Z, r25
							SerialBufferOut[SerialBufferOutPtrTop++] = Module;
    2aea:	e1 e0       	ldi	r30, 0x01	; 1
    2aec:	e8 0f       	add	r30, r24
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	eb 53       	subi	r30, 0x3B	; 59
    2af2:	fc 4d       	sbci	r31, 0xDC	; 220
    2af4:	e0 82       	st	Z, r14
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2af6:	93 e0       	ldi	r25, 0x03	; 3
    2af8:	98 0f       	add	r25, r24
    2afa:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    2afe:	e2 e0       	ldi	r30, 0x02	; 2
    2b00:	e8 0f       	add	r30, r24
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	eb 53       	subi	r30, 0x3B	; 59
    2b06:	fc 4d       	sbci	r31, 0xDC	; 220
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	80 83       	st	Z, r24

							CueControl();
    2b0c:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>

							if ((ModuleData[Module][FADERON]&0x80))
    2b10:	f6 01       	movw	r30, r12
    2b12:	ee 0f       	add	r30, r30
    2b14:	ff 1f       	adc	r31, r31
    2b16:	ee 0f       	add	r30, r30
    2b18:	ff 1f       	adc	r31, r31
    2b1a:	ee 0f       	add	r30, r30
    2b1c:	ff 1f       	adc	r31, r31
    2b1e:	e5 5f       	subi	r30, 0xF5	; 245
    2b20:	f4 4d       	sbci	r31, 0xD4	; 212
    2b22:	81 81       	ldd	r24, Z+1	; 0x01
    2b24:	88 23       	and	r24, r24
    2b26:	2c f4       	brge	.+10     	; 0x2b32 <__DATA_REGION_LENGTH__+0xb32>
							{	 // !JB
								//Timer-Control
								TimerControl(Module);
    2b28:	8e 2d       	mov	r24, r14
    2b2a:	0e 94 c4 02 	call	0x588	; 0x588 <TimerControl>
				
								//OnAir Control
								OnAirControl();
    2b2e:	0e 94 76 04 	call	0x8ec	; 0x8ec <OnAirControl>
							}

							if ((TelcoNr>=0) && (TelcoNr<4))
    2b32:	14 30       	cpi	r17, 0x04	; 4
    2b34:	c0 f4       	brcc	.+48     	; 0x2b66 <__DATA_REGION_LENGTH__+0xb66>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CONNECT;
    2b36:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2b3a:	e8 2f       	mov	r30, r24
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	eb 53       	subi	r30, 0x3B	; 59
    2b40:	fc 4d       	sbci	r31, 0xDC	; 220
    2b42:	90 ec       	ldi	r25, 0xC0	; 192
    2b44:	90 83       	st	Z, r25
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2b46:	e1 e0       	ldi	r30, 0x01	; 1
    2b48:	e8 0f       	add	r30, r24
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	eb 53       	subi	r30, 0x3B	; 59
    2b4e:	fc 4d       	sbci	r31, 0xDC	; 220
    2b50:	10 83       	st	Z, r17
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2b52:	93 e0       	ldi	r25, 0x03	; 3
    2b54:	98 0f       	add	r25, r24
    2b56:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    2b5a:	e2 e0       	ldi	r30, 0x02	; 2
    2b5c:	e8 0f       	add	r30, r24
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	eb 53       	subi	r30, 0x3B	; 59
    2b62:	fc 4d       	sbci	r31, 0xDC	; 220
    2b64:	10 82       	st	Z, r1
							}
							SendSerialData = 1;
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    2b6c:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						}
						else
						{
							ConsoleFunctionData[Module] |= ON_LED;
							ConsoleFunctionData[Module] |= START_FUNCTION;			
							ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    2b70:	f6 01       	movw	r30, r12
    2b72:	e0 56       	subi	r30, 0x60	; 96
    2b74:	fd 4d       	sbci	r31, 0xDD	; 221
    2b76:	83 62       	ori	r24, 0x23	; 35
    2b78:	80 83       	st	Z, r24
				
							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_START;
    2b7a:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2b7e:	ae 2f       	mov	r26, r30
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	ab 53       	subi	r26, 0x3B	; 59
    2b84:	bc 4d       	sbci	r27, 0xDC	; 220
    2b86:	82 e8       	ldi	r24, 0x82	; 130
    2b88:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = Module;
    2b8a:	a1 e0       	ldi	r26, 0x01	; 1
    2b8c:	ae 0f       	add	r26, r30
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	ab 53       	subi	r26, 0x3B	; 59
    2b92:	bc 4d       	sbci	r27, 0xDC	; 220
    2b94:	ec 92       	st	X, r14
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2b96:	83 e0       	ldi	r24, 0x03	; 3
    2b98:	8e 0f       	add	r24, r30
    2b9a:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2b9e:	ee 5f       	subi	r30, 0xFE	; 254
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	eb 53       	subi	r30, 0x3B	; 59
    2ba4:	fc 4d       	sbci	r31, 0xDC	; 220
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	80 83       	st	Z, r24
							
							if ((ModuleData[Module][FADERON]&0x80))
    2baa:	f6 01       	movw	r30, r12
    2bac:	ee 0f       	add	r30, r30
    2bae:	ff 1f       	adc	r31, r31
    2bb0:	ee 0f       	add	r30, r30
    2bb2:	ff 1f       	adc	r31, r31
    2bb4:	ee 0f       	add	r30, r30
    2bb6:	ff 1f       	adc	r31, r31
    2bb8:	e5 5f       	subi	r30, 0xF5	; 245
    2bba:	f4 4d       	sbci	r31, 0xD4	; 212
    2bbc:	81 81       	ldd	r24, Z+1	; 0x01
    2bbe:	88 23       	and	r24, r24
    2bc0:	0c f0       	brlt	.+2      	; 0x2bc4 <__DATA_REGION_LENGTH__+0xbc4>
    2bc2:	72 c0       	rjmp	.+228    	; 0x2ca8 <__DATA_REGION_LENGTH__+0xca8>
							{	// !JB
								char TelcoNr = GetTelcoNrFromModuleNr(Module);
    2bc4:	8e 2d       	mov	r24, r14
    2bc6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <GetTelcoNrFromModuleNr>
								if ((TelcoNr>=0) && (TelcoNr<4))
    2bca:	84 30       	cpi	r24, 0x04	; 4
    2bcc:	c0 f4       	brcc	.+48     	; 0x2bfe <__DATA_REGION_LENGTH__+0xbfe>
								{
									SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2bce:	90 91 82 22 	lds	r25, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2bd2:	e9 2f       	mov	r30, r25
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	eb 53       	subi	r30, 0x3B	; 59
    2bd8:	fc 4d       	sbci	r31, 0xDC	; 220
    2bda:	22 ec       	ldi	r18, 0xC2	; 194
    2bdc:	20 83       	st	Z, r18
									SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2bde:	e1 e0       	ldi	r30, 0x01	; 1
    2be0:	e9 0f       	add	r30, r25
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	eb 53       	subi	r30, 0x3B	; 59
    2be6:	fc 4d       	sbci	r31, 0xDC	; 220
    2be8:	80 83       	st	Z, r24
									SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2bea:	83 e0       	ldi	r24, 0x03	; 3
    2bec:	89 0f       	add	r24, r25
    2bee:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2bf2:	e2 e0       	ldi	r30, 0x02	; 2
    2bf4:	e9 0f       	add	r30, r25
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	eb 53       	subi	r30, 0x3B	; 59
    2bfa:	fc 4d       	sbci	r31, 0xDC	; 220
    2bfc:	10 82       	st	Z, r1
								}

								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    2bfe:	f6 01       	movw	r30, r12
    2c00:	e0 56       	subi	r30, 0x60	; 96
    2c02:	fd 4d       	sbci	r31, 0xDD	; 221
    2c04:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2c06:	98 2f       	mov	r25, r24
    2c08:	93 7f       	andi	r25, 0xF3	; 243
    2c0a:	90 83       	st	Z, r25
//								ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
								cntMuteFunction[Module] = DELAY;
    2c0c:	9a e0       	ldi	r25, 0x0A	; 10
    2c0e:	f6 01       	movw	r30, r12
    2c10:	ef 56       	subi	r30, 0x6F	; 111
    2c12:	f2 4d       	sbci	r31, 0xD2	; 210
    2c14:	90 83       	st	Z, r25

								//Cue-Control
								if (ConsoleMasterSettings[AUTOCUERESET])
    2c16:	90 91 8e 2b 	lds	r25, 0x2B8E	; 0x802b8e <ConsoleMasterSettings>
    2c1a:	99 23       	and	r25, r25
    2c1c:	f1 f1       	breq	.+124    	; 0x2c9a <__DATA_REGION_LENGTH__+0xc9a>
								{
									if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    2c1e:	f6 01       	movw	r30, r12
    2c20:	ee 0f       	add	r30, r30
    2c22:	ff 1f       	adc	r31, r31
    2c24:	ee 0f       	add	r30, r30
    2c26:	ff 1f       	adc	r31, r31
    2c28:	ee 0f       	add	r30, r30
    2c2a:	ff 1f       	adc	r31, r31
    2c2c:	e5 5f       	subi	r30, 0xF5	; 245
    2c2e:	f4 4d       	sbci	r31, 0xD4	; 212
    2c30:	91 81       	ldd	r25, Z+1	; 0x01
    2c32:	99 23       	and	r25, r25
    2c34:	94 f5       	brge	.+100    	; 0x2c9a <__DATA_REGION_LENGTH__+0xc9a>
    2c36:	85 ff       	sbrs	r24, 5
    2c38:	30 c0       	rjmp	.+96     	; 0x2c9a <__DATA_REGION_LENGTH__+0xc9a>
    2c3a:	0f 2e       	mov	r0, r31
    2c3c:	f0 ea       	ldi	r31, 0xA0	; 160
    2c3e:	cf 2e       	mov	r12, r31
    2c40:	f2 e2       	ldi	r31, 0x22	; 34
    2c42:	df 2e       	mov	r13, r31
    2c44:	f0 2d       	mov	r31, r0
    2c46:	00 e0       	ldi	r16, 0x00	; 0
										for (cntModule=0; cntModule<NROFMODULES; cntModule++)
										{
											char TelcoNr = GetTelcoNrFromModuleNr(cntModule);
											if ((TelcoNr>=0) && (TelcoNr<4))
											{
												SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2c48:	0f 2e       	mov	r0, r31
    2c4a:	f2 ec       	ldi	r31, 0xC2	; 194
    2c4c:	ff 2e       	mov	r15, r31
    2c4e:	f0 2d       	mov	r31, r0
									if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
									{		// !JB
										unsigned char cntModule;
										for (cntModule=0; cntModule<NROFMODULES; cntModule++)
										{
											char TelcoNr = GetTelcoNrFromModuleNr(cntModule);
    2c50:	80 2f       	mov	r24, r16
    2c52:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <GetTelcoNrFromModuleNr>
											if ((TelcoNr>=0) && (TelcoNr<4))
    2c56:	84 30       	cpi	r24, 0x04	; 4
    2c58:	b8 f4       	brcc	.+46     	; 0x2c88 <__DATA_REGION_LENGTH__+0xc88>
											{
												SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2c5a:	90 91 82 22 	lds	r25, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2c5e:	e9 2f       	mov	r30, r25
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	eb 53       	subi	r30, 0x3B	; 59
    2c64:	fc 4d       	sbci	r31, 0xDC	; 220
    2c66:	f0 82       	st	Z, r15
												SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2c68:	e1 e0       	ldi	r30, 0x01	; 1
    2c6a:	e9 0f       	add	r30, r25
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	eb 53       	subi	r30, 0x3B	; 59
    2c70:	fc 4d       	sbci	r31, 0xDC	; 220
    2c72:	80 83       	st	Z, r24
												SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2c74:	83 e0       	ldi	r24, 0x03	; 3
    2c76:	89 0f       	add	r24, r25
    2c78:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2c7c:	e2 e0       	ldi	r30, 0x02	; 2
    2c7e:	e9 0f       	add	r30, r25
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	eb 53       	subi	r30, 0x3B	; 59
    2c84:	fc 4d       	sbci	r31, 0xDC	; 220
    2c86:	10 82       	st	Z, r1
											}

											ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
											ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    2c88:	f6 01       	movw	r30, r12
    2c8a:	80 81       	ld	r24, Z
    2c8c:	83 7f       	andi	r24, 0xF3	; 243
    2c8e:	d6 01       	movw	r26, r12
    2c90:	8d 93       	st	X+, r24
    2c92:	6d 01       	movw	r12, r26
								if (ConsoleMasterSettings[AUTOCUERESET])
								{
									if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
									{		// !JB
										unsigned char cntModule;
										for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2c94:	0f 5f       	subi	r16, 0xFF	; 255
    2c96:	00 31       	cpi	r16, 0x10	; 16
    2c98:	d9 f6       	brne	.-74     	; 0x2c50 <__DATA_REGION_LENGTH__+0xc50>
											ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
											ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
										}
									}
								}
								CueControl();
    2c9a:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>
			
								//Timer-Control
								TimerControl(Module);
    2c9e:	8e 2d       	mov	r24, r14
    2ca0:	0e 94 c4 02 	call	0x588	; 0x588 <TimerControl>
			
								//OnAirControl
								OnAirControl();
    2ca4:	0e 94 76 04 	call	0x8ec	; 0x8ec <OnAirControl>
							}

							if ((TelcoNr>=0) && (TelcoNr<4))
    2ca8:	14 30       	cpi	r17, 0x04	; 4
    2caa:	c8 f4       	brcc	.+50     	; 0x2cde <__DATA_REGION_LENGTH__+0xcde>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CONNECT;
    2cac:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2cb0:	e8 2f       	mov	r30, r24
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	eb 53       	subi	r30, 0x3B	; 59
    2cb6:	fc 4d       	sbci	r31, 0xDC	; 220
    2cb8:	90 ec       	ldi	r25, 0xC0	; 192
    2cba:	90 83       	st	Z, r25
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2cbc:	e1 e0       	ldi	r30, 0x01	; 1
    2cbe:	e8 0f       	add	r30, r24
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	eb 53       	subi	r30, 0x3B	; 59
    2cc4:	fc 4d       	sbci	r31, 0xDC	; 220
    2cc6:	10 83       	st	Z, r17
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2cc8:	93 e0       	ldi	r25, 0x03	; 3
    2cca:	98 0f       	add	r25, r24
    2ccc:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    2cd0:	e2 e0       	ldi	r30, 0x02	; 2
    2cd2:	e8 0f       	add	r30, r24
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	eb 53       	subi	r30, 0x3B	; 59
    2cd8:	fc 4d       	sbci	r31, 0xDC	; 220
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	80 83       	st	Z, r24
							}
							SendSerialData = 1;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    2ce4:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			}
		}
		break;
		case LINEB:
		{
			CheckStartCondition(Module);
    2ce8:	84 2f       	mov	r24, r20
    2cea:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>
			TimeAndDate.Hours = 0;
    2cee:	e6 e1       	ldi	r30, 0x16	; 22
    2cf0:	fa e3       	ldi	r31, 0x3A	; 58
    2cf2:	13 82       	std	Z+3, r1	; 0x03
			TimeAndDate.Minutes = 0;
    2cf4:	12 82       	std	Z+2, r1	; 0x02
			TimeAndDate.Seconds = 0;
    2cf6:	11 82       	std	Z+1, r1	; 0x01
			TimeAndDate.Frames = 0;
    2cf8:	10 82       	st	Z, r1
			TimerControl(Module);
    2cfa:	8e 2d       	mov	r24, r14
    2cfc:	0e 94 c4 02 	call	0x588	; 0x588 <TimerControl>
			DJControl();
    2d00:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>
			StudioMicControl();
    2d04:	0e 94 5e 03 	call	0x6bc	; 0x6bc <StudioMicControl>
			OnAirControl();
    2d08:	0e 94 76 04 	call	0x8ec	; 0x8ec <OnAirControl>
		}
		break;
    2d0c:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
		case MIC_RING:
		{
			switch (ModuleType[Module])
    2d10:	c4 2e       	mov	r12, r20
    2d12:	d1 2c       	mov	r13, r1
    2d14:	f6 01       	movw	r30, r12
    2d16:	e0 59       	subi	r30, 0x90	; 144
    2d18:	fd 4d       	sbci	r31, 0xDD	; 221
    2d1a:	80 81       	ld	r24, Z
    2d1c:	81 30       	cpi	r24, 0x01	; 1
    2d1e:	21 f0       	breq	.+8      	; 0x2d28 <__DATA_REGION_LENGTH__+0xd28>
    2d20:	82 30       	cpi	r24, 0x02	; 2
    2d22:	61 f1       	breq	.+88     	; 0x2d7c <__DATA_REGION_LENGTH__+0xd7c>
    2d24:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			{
				case TRIPLE:
				{
					if (!(ModuleData[Module][MIC_RING]&0x80))
    2d28:	f6 01       	movw	r30, r12
    2d2a:	ee 0f       	add	r30, r30
    2d2c:	ff 1f       	adc	r31, r31
    2d2e:	ee 0f       	add	r30, r30
    2d30:	ff 1f       	adc	r31, r31
    2d32:	ee 0f       	add	r30, r30
    2d34:	ff 1f       	adc	r31, r31
    2d36:	e5 5f       	subi	r30, 0xF5	; 245
    2d38:	f4 4d       	sbci	r31, 0xD4	; 212
    2d3a:	87 81       	ldd	r24, Z+7	; 0x07
    2d3c:	88 23       	and	r24, r24
    2d3e:	54 f0       	brlt	.+20     	; 0x2d54 <__DATA_REGION_LENGTH__+0xd54>
					{
						ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    2d40:	e0 ea       	ldi	r30, 0xA0	; 160
    2d42:	f2 e2       	ldi	r31, 0x22	; 34
    2d44:	80 89       	ldd	r24, Z+16	; 0x10
    2d46:	87 7f       	andi	r24, 0xF7	; 247
    2d48:	80 8b       	std	Z+16, r24	; 0x10
						CheckTBMic();
    2d4a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CheckTBMic>
						SendSerialData = 1;
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
					}
		
					CheckStartCondition(Module);
    2d54:	8e 2d       	mov	r24, r14
    2d56:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>
					TimeAndDate.Hours = 0;
    2d5a:	e6 e1       	ldi	r30, 0x16	; 22
    2d5c:	fa e3       	ldi	r31, 0x3A	; 58
    2d5e:	13 82       	std	Z+3, r1	; 0x03
					TimeAndDate.Minutes = 0;
    2d60:	12 82       	std	Z+2, r1	; 0x02
					TimeAndDate.Seconds = 0;
    2d62:	11 82       	std	Z+1, r1	; 0x01
					TimeAndDate.Frames = 0;
    2d64:	10 82       	st	Z, r1
					TimerControl(Module);
    2d66:	8e 2d       	mov	r24, r14
    2d68:	0e 94 c4 02 	call	0x588	; 0x588 <TimerControl>
					DJControl();
    2d6c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>
					StudioMicControl();
    2d70:	0e 94 5e 03 	call	0x6bc	; 0x6bc <StudioMicControl>
					OnAirControl();
    2d74:	0e 94 76 04 	call	0x8ec	; 0x8ec <OnAirControl>
				}
				break;
    2d78:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
				case TELCO:
				{
					char TelcoNr = GetTelcoNrFromModuleNr(Module);
    2d7c:	84 2f       	mov	r24, r20
    2d7e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <GetTelcoNrFromModuleNr>
					
					if (EventOn)
    2d82:	01 2b       	or	r16, r17
    2d84:	09 f5       	brne	.+66     	; 0x2dc8 <__DATA_REGION_LENGTH__+0xdc8>
					{
						ConsoleFunctionData[Module]|=CUE_LED;
						ConsoleFunctionData[Module]|=REMOTE_FUNCTION;
    2d86:	f6 01       	movw	r30, r12
    2d88:	e0 56       	subi	r30, 0x60	; 96
    2d8a:	fd 4d       	sbci	r31, 0xDD	; 221
    2d8c:	90 81       	ld	r25, Z
    2d8e:	99 60       	ori	r25, 0x09	; 9
    2d90:	90 83       	st	Z, r25

						if ((TelcoNr>=0) && (TelcoNr<4))
    2d92:	84 30       	cpi	r24, 0x04	; 4
    2d94:	e8 f5       	brcc	.+122    	; 0x2e10 <__DATA_REGION_LENGTH__+0xe10>
						{
							SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_RING;
    2d96:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2d9a:	ae 2f       	mov	r26, r30
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	ab 53       	subi	r26, 0x3B	; 59
    2da0:	bc 4d       	sbci	r27, 0xDC	; 220
    2da2:	91 ec       	ldi	r25, 0xC1	; 193
    2da4:	9c 93       	st	X, r25
							SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2da6:	a1 e0       	ldi	r26, 0x01	; 1
    2da8:	ae 0f       	add	r26, r30
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	ab 53       	subi	r26, 0x3B	; 59
    2dae:	bc 4d       	sbci	r27, 0xDC	; 220
    2db0:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2db2:	83 e0       	ldi	r24, 0x03	; 3
    2db4:	8e 0f       	add	r24, r30
    2db6:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2dba:	ee 5f       	subi	r30, 0xFE	; 254
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	eb 53       	subi	r30, 0x3B	; 59
    2dc0:	fc 4d       	sbci	r31, 0xDC	; 220
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	80 83       	st	Z, r24
    2dc6:	24 c0       	rjmp	.+72     	; 0x2e10 <__DATA_REGION_LENGTH__+0xe10>
						}
					}
					else
					{
						if (!(ConsoleFunctionData[Module]&START_FUNCTION))
    2dc8:	f6 01       	movw	r30, r12
    2dca:	e0 56       	subi	r30, 0x60	; 96
    2dcc:	fd 4d       	sbci	r31, 0xDD	; 221
    2dce:	90 81       	ld	r25, Z
    2dd0:	91 fd       	sbrc	r25, 1
    2dd2:	05 c0       	rjmp	.+10     	; 0x2dde <__DATA_REGION_LENGTH__+0xdde>
						{
							ConsoleFunctionData[Module]&=CUE_LED^0xFF;
							ConsoleFunctionData[Module]&=REMOTE_FUNCTION^0xFF;
    2dd4:	f6 01       	movw	r30, r12
    2dd6:	e0 56       	subi	r30, 0x60	; 96
    2dd8:	fd 4d       	sbci	r31, 0xDD	; 221
    2dda:	96 7f       	andi	r25, 0xF6	; 246
    2ddc:	90 83       	st	Z, r25
						}

						if ((TelcoNr>=0) && (TelcoNr<4))
    2dde:	84 30       	cpi	r24, 0x04	; 4
    2de0:	b8 f4       	brcc	.+46     	; 0x2e10 <__DATA_REGION_LENGTH__+0xe10>
						{
							SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_RING;
    2de2:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2de6:	ae 2f       	mov	r26, r30
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	ab 53       	subi	r26, 0x3B	; 59
    2dec:	bc 4d       	sbci	r27, 0xDC	; 220
    2dee:	91 ec       	ldi	r25, 0xC1	; 193
    2df0:	9c 93       	st	X, r25
							SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2df2:	a1 e0       	ldi	r26, 0x01	; 1
    2df4:	ae 0f       	add	r26, r30
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	ab 53       	subi	r26, 0x3B	; 59
    2dfa:	bc 4d       	sbci	r27, 0xDC	; 220
    2dfc:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2dfe:	83 e0       	ldi	r24, 0x03	; 3
    2e00:	8e 0f       	add	r24, r30
    2e02:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2e06:	ee 5f       	subi	r30, 0xFE	; 254
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	eb 53       	subi	r30, 0x3B	; 59
    2e0c:	fc 4d       	sbci	r31, 0xDC	; 220
    2e0e:	10 82       	st	Z, r1
						}
					}
					SendSerialData = 1;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
				}
				break;
    2e16:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			}
		}
		break;
		case ESCAPE:
		{
			SetLCD(0,"\xC0");
    2e1a:	6f e2       	ldi	r22, 0x2F	; 47
    2e1c:	70 e2       	ldi	r23, 0x20	; 32
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
			if (EventOn)
    2e26:	01 2b       	or	r16, r17
    2e28:	11 f0       	breq	.+4      	; 0x2e2e <__DATA_REGION_LENGTH__+0xe2e>
    2e2a:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
 			{
				if (OperatingMode != NORMALMODE)
    2e2e:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    2e32:	88 23       	and	r24, r24
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <__DATA_REGION_LENGTH__+0xe38>
    2e36:	95 c0       	rjmp	.+298    	; 0x2f62 <__DATA_REGION_LENGTH__+0xf62>
				{
					char TextBuffer[9];

					if (OperatingMode==MODULEMODE)
    2e38:	81 30       	cpi	r24, 0x01	; 1
    2e3a:	b9 f4       	brne	.+46     	; 0x2e6a <__DATA_REGION_LENGTH__+0xe6a>
    2e3c:	4b e1       	ldi	r20, 0x1B	; 27
    2e3e:	58 e3       	ldi	r21, 0x38	; 56
    2e40:	28 e6       	ldi	r18, 0x68	; 104
    2e42:	36 e3       	ldi	r19, 0x36	; 54
    2e44:	6b ee       	ldi	r22, 0xEB	; 235
    2e46:	79 e3       	ldi	r23, 0x39	; 57
    2e48:	0c c0       	rjmp	.+24     	; 0x2e62 <__DATA_REGION_LENGTH__+0xe62>
						unsigned char cntModule, cntByte;
						for (cntModule=0; cntModule<NROFMODULES; cntModule++)
						{
							for (cntByte=0; cntByte<29; cntByte++)
							{
								ConsoleModuleSettings[cntModule][cntByte] = UndoConsoleModuleSettings[cntModule][cntByte];
    2e4a:	81 91       	ld	r24, Z+
    2e4c:	8d 93       	st	X+, r24
					if (OperatingMode==MODULEMODE)
					{
						unsigned char cntModule, cntByte;
						for (cntModule=0; cntModule<NROFMODULES; cntModule++)
						{
							for (cntByte=0; cntByte<29; cntByte++)
    2e4e:	2e 17       	cp	r18, r30
    2e50:	3f 07       	cpc	r19, r31
    2e52:	d9 f7       	brne	.-10     	; 0x2e4a <__DATA_REGION_LENGTH__+0xe4a>
    2e54:	43 5e       	subi	r20, 0xE3	; 227
    2e56:	5f 4f       	sbci	r21, 0xFF	; 255
    2e58:	23 5e       	subi	r18, 0xE3	; 227
    2e5a:	3f 4f       	sbci	r19, 0xFF	; 255
					char TextBuffer[9];

					if (OperatingMode==MODULEMODE)
					{
						unsigned char cntModule, cntByte;
						for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2e5c:	64 17       	cp	r22, r20
    2e5e:	75 07       	cpc	r23, r21
    2e60:	89 f0       	breq	.+34     	; 0x2e84 <__DATA_REGION_LENGTH__+0xe84>
    2e62:	f9 01       	movw	r30, r18
    2e64:	7d 97       	sbiw	r30, 0x1d	; 29
								cntMuteFunction[Module] = DELAY;

								//Cue-Control
								if (ConsoleMasterSettings[AUTOCUERESET])
								{
									if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    2e66:	da 01       	movw	r26, r20
    2e68:	f0 cf       	rjmp	.-32     	; 0x2e4a <__DATA_REGION_LENGTH__+0xe4a>
							{
								ConsoleModuleSettings[cntModule][cntByte] = UndoConsoleModuleSettings[cntModule][cntByte];
							}
						}
					}
					else if (OperatingMode==MASTERMODE)
    2e6a:	82 30       	cpi	r24, 0x02	; 2
    2e6c:	59 f4       	brne	.+22     	; 0x2e84 <__DATA_REGION_LENGTH__+0xe84>
    2e6e:	e6 e4       	ldi	r30, 0x46	; 70
    2e70:	f6 e3       	ldi	r31, 0x36	; 54
    2e72:	ae e8       	ldi	r26, 0x8E	; 142
    2e74:	bb e2       	ldi	r27, 0x2B	; 43
    2e76:	2b e4       	ldi	r18, 0x4B	; 75
    2e78:	36 e3       	ldi	r19, 0x36	; 54
					{
						unsigned char cntByte;
						for (cntByte=0; cntByte<5; cntByte++)
						{
								ConsoleMasterSettings[cntByte] = UndoConsoleMasterSettings[cntByte];
    2e7a:	81 91       	ld	r24, Z+
    2e7c:	8d 93       	st	X+, r24
						}
					}
					else if (OperatingMode==MASTERMODE)
					{
						unsigned char cntByte;
						for (cntByte=0; cntByte<5; cntByte++)
    2e7e:	2e 17       	cp	r18, r30
    2e80:	3f 07       	cpc	r19, r31
    2e82:	d9 f7       	brne	.-10     	; 0x2e7a <__DATA_REGION_LENGTH__+0xe7a>
						{
								ConsoleMasterSettings[cntByte] = UndoConsoleMasterSettings[cntByte];
						}
					}

					OperatingMode = NORMALMODE;
    2e84:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <OperatingMode>
					TextStringPtr = 0;
    2e88:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>

					SetLCD(0,"\x80");
    2e8c:	61 e5       	ldi	r22, 0x51	; 81
    2e8e:	70 e2       	ldi	r23, 0x20	; 32
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(1,"                ");
    2e98:	64 e6       	ldi	r22, 0x64	; 100
    2e9a:	70 e2       	ldi	r23, 0x20	; 32
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(0,"\xC0");
    2ea4:	6f e2       	ldi	r22, 0x2F	; 47
    2ea6:	70 e2       	ldi	r23, 0x20	; 32
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(1, TextString[TextStringPtr]);
    2eb0:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    2eb4:	b1 e1       	ldi	r27, 0x11	; 17
    2eb6:	6b 9f       	mul	r22, r27
    2eb8:	b0 01       	movw	r22, r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	6a 5d       	subi	r22, 0xDA	; 218
    2ebe:	7d 4d       	sbci	r23, 0xDD	; 221
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>

					TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    2ec8:	e6 e1       	ldi	r30, 0x16	; 22
    2eca:	fa e3       	ldi	r31, 0x3A	; 58
    2ecc:	23 81       	ldd	r18, Z+3	; 0x03
    2ece:	8d ec       	ldi	r24, 0xCD	; 205
    2ed0:	28 9f       	mul	r18, r24
    2ed2:	91 2d       	mov	r25, r1
    2ed4:	11 24       	eor	r1, r1
    2ed6:	96 95       	lsr	r25
    2ed8:	96 95       	lsr	r25
    2eda:	96 95       	lsr	r25
    2edc:	30 e3       	ldi	r19, 0x30	; 48
    2ede:	39 0f       	add	r19, r25
    2ee0:	39 83       	std	Y+1, r19	; 0x01
					TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    2ee2:	99 0f       	add	r25, r25
    2ee4:	39 2f       	mov	r19, r25
    2ee6:	33 0f       	add	r19, r19
    2ee8:	33 0f       	add	r19, r19
    2eea:	93 0f       	add	r25, r19
    2eec:	29 1b       	sub	r18, r25
    2eee:	20 5d       	subi	r18, 0xD0	; 208
    2ef0:	2a 83       	std	Y+2, r18	; 0x02
					TextBuffer[2] = ':';
    2ef2:	4a e3       	ldi	r20, 0x3A	; 58
    2ef4:	4b 83       	std	Y+3, r20	; 0x03
				  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    2ef6:	22 81       	ldd	r18, Z+2	; 0x02
    2ef8:	28 9f       	mul	r18, r24
    2efa:	91 2d       	mov	r25, r1
    2efc:	11 24       	eor	r1, r1
    2efe:	96 95       	lsr	r25
    2f00:	96 95       	lsr	r25
    2f02:	96 95       	lsr	r25
    2f04:	30 e3       	ldi	r19, 0x30	; 48
    2f06:	39 0f       	add	r19, r25
    2f08:	3c 83       	std	Y+4, r19	; 0x04
					TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    2f0a:	99 0f       	add	r25, r25
    2f0c:	39 2f       	mov	r19, r25
    2f0e:	33 0f       	add	r19, r19
    2f10:	33 0f       	add	r19, r19
    2f12:	93 0f       	add	r25, r19
    2f14:	29 1b       	sub	r18, r25
    2f16:	20 5d       	subi	r18, 0xD0	; 208
    2f18:	2d 83       	std	Y+5, r18	; 0x05
					TextBuffer[5] = ':';
    2f1a:	4e 83       	std	Y+6, r20	; 0x06
					TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    2f1c:	91 81       	ldd	r25, Z+1	; 0x01
    2f1e:	98 9f       	mul	r25, r24
    2f20:	81 2d       	mov	r24, r1
    2f22:	11 24       	eor	r1, r1
    2f24:	86 95       	lsr	r24
    2f26:	86 95       	lsr	r24
    2f28:	86 95       	lsr	r24
    2f2a:	20 e3       	ldi	r18, 0x30	; 48
    2f2c:	28 0f       	add	r18, r24
    2f2e:	2f 83       	std	Y+7, r18	; 0x07
					TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    2f30:	88 0f       	add	r24, r24
    2f32:	28 2f       	mov	r18, r24
    2f34:	22 0f       	add	r18, r18
    2f36:	22 0f       	add	r18, r18
    2f38:	82 0f       	add	r24, r18
    2f3a:	98 1b       	sub	r25, r24
    2f3c:	90 5d       	subi	r25, 0xD0	; 208
    2f3e:	98 87       	std	Y+8, r25	; 0x08
/*				TextBuffer[8] = ':';
					TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
					TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
					TextBuffer[11] = 0;*/
					TextBuffer[8] = 0;
    2f40:	19 86       	std	Y+9, r1	; 0x09
					SetLCD(0,"\x84");
    2f42:	65 e7       	ldi	r22, 0x75	; 117
    2f44:	70 e2       	ldi	r23, 0x20	; 32
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(1,TextBuffer);
    2f4e:	be 01       	movw	r22, r28
    2f50:	6f 5f       	subi	r22, 0xFF	; 255
    2f52:	7f 4f       	sbci	r23, 0xFF	; 255
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetConsoleData();
    2f5c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <SetConsoleData>
    2f60:	d9 c7       	rjmp	.+4018   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
				}
				else if (TextStringPtr==0)
    2f62:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    2f66:	81 11       	cpse	r24, r1
    2f68:	07 c0       	rjmp	.+14     	; 0x2f78 <__DATA_REGION_LENGTH__+0xf78>
				{
					TimeAndDate.Hours = 0;
    2f6a:	e6 e1       	ldi	r30, 0x16	; 22
    2f6c:	fa e3       	ldi	r31, 0x3A	; 58
    2f6e:	13 82       	std	Z+3, r1	; 0x03
					TimeAndDate.Minutes = 0;
    2f70:	12 82       	std	Z+2, r1	; 0x02
					TimeAndDate.Seconds = 0;
    2f72:	11 82       	std	Z+1, r1	; 0x01
					TimeAndDate.Frames = 0;
    2f74:	10 82       	st	Z, r1
    2f76:	ce c7       	rjmp	.+3996   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
				}
				else
				{
					char TextBuffer[9];
					//New in v1.12
					SetupLCD();
    2f78:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <SetupLCD>
	 				SetLCD(0,"\xC0");
    2f7c:	6f e2       	ldi	r22, 0x2F	; 47
    2f7e:	70 e2       	ldi	r23, 0x20	; 32
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>

					SetLCD(0,"\x80");
    2f88:	61 e5       	ldi	r22, 0x51	; 81
    2f8a:	70 e2       	ldi	r23, 0x20	; 32
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(1,"                ");
    2f94:	64 e6       	ldi	r22, 0x64	; 100
    2f96:	70 e2       	ldi	r23, 0x20	; 32
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(0,"\xC0");
    2fa0:	6f e2       	ldi	r22, 0x2F	; 47
    2fa2:	70 e2       	ldi	r23, 0x20	; 32
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(1, TextString[TextStringPtr]);
    2fac:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    2fb0:	e1 e1       	ldi	r30, 0x11	; 17
    2fb2:	6e 9f       	mul	r22, r30
    2fb4:	b0 01       	movw	r22, r0
    2fb6:	11 24       	eor	r1, r1
    2fb8:	6a 5d       	subi	r22, 0xDA	; 218
    2fba:	7d 4d       	sbci	r23, 0xDD	; 221
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>

					TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    2fc4:	e6 e1       	ldi	r30, 0x16	; 22
    2fc6:	fa e3       	ldi	r31, 0x3A	; 58
    2fc8:	23 81       	ldd	r18, Z+3	; 0x03
    2fca:	8d ec       	ldi	r24, 0xCD	; 205
    2fcc:	28 9f       	mul	r18, r24
    2fce:	91 2d       	mov	r25, r1
    2fd0:	11 24       	eor	r1, r1
    2fd2:	96 95       	lsr	r25
    2fd4:	96 95       	lsr	r25
    2fd6:	96 95       	lsr	r25
    2fd8:	30 e3       	ldi	r19, 0x30	; 48
    2fda:	39 0f       	add	r19, r25
    2fdc:	39 83       	std	Y+1, r19	; 0x01
					TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    2fde:	99 0f       	add	r25, r25
    2fe0:	39 2f       	mov	r19, r25
    2fe2:	33 0f       	add	r19, r19
    2fe4:	33 0f       	add	r19, r19
    2fe6:	93 0f       	add	r25, r19
    2fe8:	29 1b       	sub	r18, r25
    2fea:	20 5d       	subi	r18, 0xD0	; 208
    2fec:	2a 83       	std	Y+2, r18	; 0x02
					TextBuffer[2] = ':';
    2fee:	4a e3       	ldi	r20, 0x3A	; 58
    2ff0:	4b 83       	std	Y+3, r20	; 0x03
				  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    2ff2:	22 81       	ldd	r18, Z+2	; 0x02
    2ff4:	28 9f       	mul	r18, r24
    2ff6:	91 2d       	mov	r25, r1
    2ff8:	11 24       	eor	r1, r1
    2ffa:	96 95       	lsr	r25
    2ffc:	96 95       	lsr	r25
    2ffe:	96 95       	lsr	r25
    3000:	30 e3       	ldi	r19, 0x30	; 48
    3002:	39 0f       	add	r19, r25
    3004:	3c 83       	std	Y+4, r19	; 0x04
					TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    3006:	99 0f       	add	r25, r25
    3008:	39 2f       	mov	r19, r25
    300a:	33 0f       	add	r19, r19
    300c:	33 0f       	add	r19, r19
    300e:	93 0f       	add	r25, r19
    3010:	29 1b       	sub	r18, r25
    3012:	20 5d       	subi	r18, 0xD0	; 208
    3014:	2d 83       	std	Y+5, r18	; 0x05
					TextBuffer[5] = ':';
    3016:	4e 83       	std	Y+6, r20	; 0x06
					TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    3018:	91 81       	ldd	r25, Z+1	; 0x01
    301a:	98 9f       	mul	r25, r24
    301c:	81 2d       	mov	r24, r1
    301e:	11 24       	eor	r1, r1
    3020:	86 95       	lsr	r24
    3022:	86 95       	lsr	r24
    3024:	86 95       	lsr	r24
    3026:	20 e3       	ldi	r18, 0x30	; 48
    3028:	28 0f       	add	r18, r24
    302a:	2f 83       	std	Y+7, r18	; 0x07
					TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    302c:	88 0f       	add	r24, r24
    302e:	28 2f       	mov	r18, r24
    3030:	22 0f       	add	r18, r18
    3032:	22 0f       	add	r18, r18
    3034:	82 0f       	add	r24, r18
    3036:	98 1b       	sub	r25, r24
    3038:	90 5d       	subi	r25, 0xD0	; 208
    303a:	98 87       	std	Y+8, r25	; 0x08
/*				TextBuffer[8] = ':';
					TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
					TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
					TextBuffer[11] = 0;*/
					TextBuffer[8] = 0;
    303c:	19 86       	std	Y+9, r1	; 0x09
					SetLCD(0,"\x84");
    303e:	65 e7       	ldi	r22, 0x75	; 117
    3040:	70 e2       	ldi	r23, 0x20	; 32
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(1,TextBuffer);
    304a:	be 01       	movw	r22, r28
    304c:	6f 5f       	subi	r22, 0xFF	; 255
    304e:	7f 4f       	sbci	r23, 0xFF	; 255
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetConsoleData();
    3058:	0e 94 0e 07 	call	0xe1c	; 0xe1c <SetConsoleData>
    305c:	5b c7       	rjmp	.+3766   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			}
		}
		break;
		case ENTER:
		{
			if (EventOn)
    305e:	01 2b       	or	r16, r17
    3060:	09 f0       	breq	.+2      	; 0x3064 <__DATA_REGION_LENGTH__+0x1064>
    3062:	58 c7       	rjmp	.+3760   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			{
				switch (OperatingMode)
    3064:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    3068:	88 23       	and	r24, r24
    306a:	21 f0       	breq	.+8      	; 0x3074 <__DATA_REGION_LENGTH__+0x1074>
    306c:	83 30       	cpi	r24, 0x03	; 3
    306e:	09 f4       	brne	.+2      	; 0x3072 <__DATA_REGION_LENGTH__+0x1072>
    3070:	ae c0       	rjmp	.+348    	; 0x31ce <__DATA_REGION_LENGTH__+0x11ce>
    3072:	73 c2       	rjmp	.+1254   	; 0x355a <__DATA_REGION_LENGTH__+0x155a>
				{
					case NORMALMODE:
					{
						switch (TextStringPtr)
    3074:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3078:	81 30       	cpi	r24, 0x01	; 1
    307a:	41 f0       	breq	.+16     	; 0x308c <__DATA_REGION_LENGTH__+0x108c>
    307c:	70 f0       	brcs	.+28     	; 0x309a <__DATA_REGION_LENGTH__+0x109a>
    307e:	82 30       	cpi	r24, 0x02	; 2
    3080:	09 f4       	brne	.+2      	; 0x3084 <__DATA_REGION_LENGTH__+0x1084>
    3082:	4d c0       	rjmp	.+154    	; 0x311e <__DATA_REGION_LENGTH__+0x111e>
    3084:	83 30       	cpi	r24, 0x03	; 3
    3086:	09 f4       	brne	.+2      	; 0x308a <__DATA_REGION_LENGTH__+0x108a>
    3088:	88 c0       	rjmp	.+272    	; 0x319a <__DATA_REGION_LENGTH__+0x119a>
    308a:	44 c7       	rjmp	.+3720   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
    308c:	4b e4       	ldi	r20, 0x4B	; 75
    308e:	56 e3       	ldi	r21, 0x36	; 54
    3090:	28 e3       	ldi	r18, 0x38	; 56
    3092:	38 e3       	ldi	r19, 0x38	; 56
    3094:	6b e1       	ldi	r22, 0x1B	; 27
    3096:	78 e3       	ldi	r23, 0x38	; 56
    3098:	16 c0       	rjmp	.+44     	; 0x30c6 <__DATA_REGION_LENGTH__+0x10c6>
						{
							case 0:
							{
								TimeAndDate.Hours = 0;
    309a:	e6 e1       	ldi	r30, 0x16	; 22
    309c:	fa e3       	ldi	r31, 0x3A	; 58
    309e:	13 82       	std	Z+3, r1	; 0x03
								TimeAndDate.Minutes = 0;
    30a0:	12 82       	std	Z+2, r1	; 0x02
								TimeAndDate.Seconds = 0;
    30a2:	11 82       	std	Z+1, r1	; 0x01
								TimeAndDate.Frames = 0;
    30a4:	10 82       	st	Z, r1
								GlobalTimerActive = 1;
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	80 93 1b 3a 	sts	0x3A1B, r24	; 0x803a1b <GlobalTimerActive>
							}
							break;
    30ac:	33 c7       	rjmp	.+3686   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
								unsigned char cntModule, cntByte;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
								{
									for (cntByte=0; cntByte<29; cntByte++)
									{
										UndoConsoleModuleSettings[cntModule][cntByte] = ConsoleModuleSettings[cntModule][cntByte];
    30ae:	81 91       	ld	r24, Z+
    30b0:	8d 93       	st	X+, r24
							case 1:
							{
								unsigned char cntModule, cntByte;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
								{
									for (cntByte=0; cntByte<29; cntByte++)
    30b2:	2e 17       	cp	r18, r30
    30b4:	3f 07       	cpc	r19, r31
    30b6:	d9 f7       	brne	.-10     	; 0x30ae <__DATA_REGION_LENGTH__+0x10ae>
    30b8:	43 5e       	subi	r20, 0xE3	; 227
    30ba:	5f 4f       	sbci	r21, 0xFF	; 255
    30bc:	23 5e       	subi	r18, 0xE3	; 227
    30be:	3f 4f       	sbci	r19, 0xFF	; 255
							}
							break;
							case 1:
							{
								unsigned char cntModule, cntByte;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    30c0:	64 17       	cp	r22, r20
    30c2:	75 07       	cpc	r23, r21
    30c4:	21 f0       	breq	.+8      	; 0x30ce <__DATA_REGION_LENGTH__+0x10ce>
    30c6:	f9 01       	movw	r30, r18
    30c8:	7d 97       	sbiw	r30, 0x1d	; 29
								cntMuteFunction[Module] = DELAY;

								//Cue-Control
								if (ConsoleMasterSettings[AUTOCUERESET])
								{
									if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    30ca:	da 01       	movw	r26, r20
    30cc:	f0 cf       	rjmp	.-32     	; 0x30ae <__DATA_REGION_LENGTH__+0x10ae>
									for (cntByte=0; cntByte<29; cntByte++)
									{
										UndoConsoleModuleSettings[cntModule][cntByte] = ConsoleModuleSettings[cntModule][cntByte];
									}
								}
								OperatingMode = MODULEMODE;
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <OperatingMode>
								TextStringPtr = 0;
    30d4:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>
								SetLCD(0,"\x80");
    30d8:	61 e5       	ldi	r22, 0x51	; 81
    30da:	70 e2       	ldi	r23, 0x20	; 32
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
								SetLCD(1,ModuleTextString[TextStringPtr]);
    30e4:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    30e8:	f1 e1       	ldi	r31, 0x11	; 17
    30ea:	6f 9f       	mul	r22, r31
    30ec:	b0 01       	movw	r22, r0
    30ee:	11 24       	eor	r1, r1
    30f0:	6c 55       	subi	r22, 0x5C	; 92
    30f2:	74 4d       	sbci	r23, 0xD4	; 212
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
								SetLCD(0,"\xC0");
    30fc:	6f e2       	ldi	r22, 0x2F	; 47
    30fe:	70 e2       	ldi	r23, 0x20	; 32
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
//								SetLCD(1,"Select Module   ");
								SetLCD(1,"Toggle by SELECT");
    3108:	67 e7       	ldi	r22, 0x77	; 119
    310a:	70 e2       	ldi	r23, 0x20	; 32
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
								ShowFunction(TextStringPtr);
    3114:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3118:	0e 94 3d 03 	call	0x67a	; 0x67a <ShowFunction>
							}
							break;
    311c:	fb c6       	rjmp	.+3574   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
    311e:	ee e8       	ldi	r30, 0x8E	; 142
    3120:	fb e2       	ldi	r31, 0x2B	; 43
    3122:	a6 e4       	ldi	r26, 0x46	; 70
    3124:	b6 e3       	ldi	r27, 0x36	; 54
    3126:	23 e9       	ldi	r18, 0x93	; 147
    3128:	3b e2       	ldi	r19, 0x2B	; 43
							case 2:
							{
								unsigned char cntByte;
								for (cntByte=0; cntByte<5; cntByte++)
								{
										UndoConsoleMasterSettings[cntByte] = ConsoleMasterSettings[cntByte];
    312a:	81 91       	ld	r24, Z+
    312c:	8d 93       	st	X+, r24
							}
							break;
							case 2:
							{
								unsigned char cntByte;
								for (cntByte=0; cntByte<5; cntByte++)
    312e:	2e 17       	cp	r18, r30
    3130:	3f 07       	cpc	r19, r31
    3132:	d9 f7       	brne	.-10     	; 0x312a <__DATA_REGION_LENGTH__+0x112a>
								{
										UndoConsoleMasterSettings[cntByte] = ConsoleMasterSettings[cntByte];
								}

								OperatingMode = MASTERMODE;
    3134:	82 e0       	ldi	r24, 0x02	; 2
    3136:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <OperatingMode>
								TextStringPtr = 0;
    313a:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>
								SetLCD(0,"\x80");
    313e:	61 e5       	ldi	r22, 0x51	; 81
    3140:	70 e2       	ldi	r23, 0x20	; 32
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
								SetLCD(1,MasterTextString[TextStringPtr]);
    314a:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    314e:	21 e1       	ldi	r18, 0x11	; 17
    3150:	62 9f       	mul	r22, r18
    3152:	b0 01       	movw	r22, r0
    3154:	11 24       	eor	r1, r1
    3156:	6b 53       	subi	r22, 0x3B	; 59
    3158:	7b 4d       	sbci	r23, 0xDB	; 219
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>

								SetLCD(0,"\xC0");
    3162:	6f e2       	ldi	r22, 0x2F	; 47
    3164:	70 e2       	ldi	r23, 0x20	; 32
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
								if (ConsoleMasterSettings[TextStringPtr])
    316e:	e0 91 81 22 	lds	r30, 0x2281	; 0x802281 <TextStringPtr>
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	e2 57       	subi	r30, 0x72	; 114
    3176:	f4 4d       	sbci	r31, 0xD4	; 212
    3178:	80 81       	ld	r24, Z
    317a:	88 23       	and	r24, r24
    317c:	39 f0       	breq	.+14     	; 0x318c <__DATA_REGION_LENGTH__+0x118c>
								{
									SetLCD(1,"Yes             ");
    317e:	68 e8       	ldi	r22, 0x88	; 136
    3180:	70 e2       	ldi	r23, 0x20	; 32
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
    318a:	c4 c6       	rjmp	.+3464   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
								}
								else
								{
									SetLCD(1," No             ");
    318c:	69 e9       	ldi	r22, 0x99	; 153
    318e:	70 e2       	ldi	r23, 0x20	; 32
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
    3198:	bd c6       	rjmp	.+3450   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
								}
							}
							break;
							case 3:
							{
								OperatingMode = SYSTEMMODE;
    319a:	83 e0       	ldi	r24, 0x03	; 3
    319c:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <OperatingMode>
								TextStringPtr = 0;
    31a0:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>
								SetLCD(0,"\x80");
    31a4:	61 e5       	ldi	r22, 0x51	; 81
    31a6:	70 e2       	ldi	r23, 0x20	; 32
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
								SetLCD(1,SystemTextString[TextStringPtr]);
    31b0:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    31b4:	41 e1       	ldi	r20, 0x11	; 17
    31b6:	64 9f       	mul	r22, r20
    31b8:	b0 01       	movw	r22, r0
    31ba:	11 24       	eor	r1, r1
    31bc:	6f 55       	subi	r22, 0x5F	; 95
    31be:	72 4d       	sbci	r23, 0xD2	; 210
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
								ShowConfig();
    31c8:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <ShowConfig>
							}
							break;
    31cc:	a3 c6       	rjmp	.+3398   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					}
					break;
					case SYSTEMMODE:
					{
						char TextBuffer[9];
						switch (TextStringPtr)
    31ce:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    31d2:	83 30       	cpi	r24, 0x03	; 3
    31d4:	09 f4       	brne	.+2      	; 0x31d8 <__DATA_REGION_LENGTH__+0x11d8>
    31d6:	94 c0       	rjmp	.+296    	; 0x3300 <__DATA_REGION_LENGTH__+0x1300>
    31d8:	84 30       	cpi	r24, 0x04	; 4
    31da:	09 f4       	brne	.+2      	; 0x31de <__DATA_REGION_LENGTH__+0x11de>
    31dc:	45 c1       	rjmp	.+650    	; 0x3468 <__DATA_REGION_LENGTH__+0x1468>
    31de:	81 30       	cpi	r24, 0x01	; 1
    31e0:	09 f0       	breq	.+2      	; 0x31e4 <__DATA_REGION_LENGTH__+0x11e4>
    31e2:	4e c1       	rjmp	.+668    	; 0x3480 <__DATA_REGION_LENGTH__+0x1480>
							{	// EEPROM Load
								unsigned char cntModule;
								unsigned int Address = 0x0000;

								Address = 0x0000;
							  ReadData(I2CAddressEEProm, Address, &(ModuleType[0]), NROFMODULES);
    31e4:	20 e1       	ldi	r18, 0x10	; 16
    31e6:	40 e7       	ldi	r20, 0x70	; 112
    31e8:	52 e2       	ldi	r21, 0x22	; 34
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	80 e7       	ldi	r24, 0x70	; 112
    31f0:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <ReadData>
							  Address += NROFMODULES;
    31f4:	00 e1       	ldi	r16, 0x10	; 16
    31f6:	10 e0       	ldi	r17, 0x00	; 0
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
								{
									ReadData(I2CAddressEEProm, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
    31f8:	a8 01       	movw	r20, r16
    31fa:	45 5f       	subi	r20, 0xF5	; 245
    31fc:	57 4c       	sbci	r21, 0xC7	; 199
    31fe:	2d e1       	ldi	r18, 0x1D	; 29
    3200:	b8 01       	movw	r22, r16
    3202:	80 e7       	ldi	r24, 0x70	; 112
    3204:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <ReadData>
								  Address += 29;
    3208:	03 5e       	subi	r16, 0xE3	; 227
    320a:	1f 4f       	sbci	r17, 0xFF	; 255
								unsigned int Address = 0x0000;

								Address = 0x0000;
							  ReadData(I2CAddressEEProm, Address, &(ModuleType[0]), NROFMODULES);
							  Address += NROFMODULES;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    320c:	00 3e       	cpi	r16, 0xE0	; 224
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	18 07       	cpc	r17, r24
    3212:	91 f7       	brne	.-28     	; 0x31f8 <__DATA_REGION_LENGTH__+0x11f8>
								{
									ReadData(I2CAddressEEProm, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
								  Address += 29;
								}
								ReadData(I2CAddressEEProm, Address, &(ConsoleMasterSettings[0]), 5);
    3214:	25 e0       	ldi	r18, 0x05	; 5
    3216:	4e e8       	ldi	r20, 0x8E	; 142
    3218:	5b e2       	ldi	r21, 0x2B	; 43
    321a:	60 ee       	ldi	r22, 0xE0	; 224
    321c:	71 e0       	ldi	r23, 0x01	; 1
    321e:	80 e7       	ldi	r24, 0x70	; 112
    3220:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <ReadData>
    3224:	60 e7       	ldi	r22, 0x70	; 112
    3226:	72 e2       	ldi	r23, 0x22	; 34
    3228:	4b e1       	ldi	r20, 0x1B	; 27
    322a:	58 e3       	ldi	r21, 0x38	; 56


								{//Reload
									unsigned char cntByte, cntChannel;

									for (cntChannel=0; cntChannel<16; cntChannel++)
    322c:	30 e0       	ldi	r19, 0x00	; 0
									{
										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    322e:	0f 2e       	mov	r0, r31
    3230:	f3 e9       	ldi	r31, 0x93	; 147
    3232:	ff 2e       	mov	r15, r31
    3234:	f0 2d       	mov	r31, r0
												ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
								 		  }
										}
										if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
										{
											USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    3236:	00 ea       	ldi	r16, 0xA0	; 160
    3238:	1a e0       	ldi	r17, 0x0A	; 10
								{//Reload
									unsigned char cntByte, cntChannel;

									for (cntChannel=0; cntChannel<16; cntChannel++)
									{
										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
    323a:	db 01       	movw	r26, r22
    323c:	8d 91       	ld	r24, X+
    323e:	bd 01       	movw	r22, r26
    3240:	81 50       	subi	r24, 0x01	; 1
    3242:	82 30       	cpi	r24, 0x02	; 2
    3244:	e8 f4       	brcc	.+58     	; 0x3280 <__DATA_REGION_LENGTH__+0x1280>
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    3246:	20 91 82 22 	lds	r18, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    324a:	e2 2f       	mov	r30, r18
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	eb 53       	subi	r30, 0x3B	; 59
    3250:	fc 4d       	sbci	r31, 0xDC	; 220
    3252:	f0 82       	st	Z, r15
											SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
    3254:	82 e0       	ldi	r24, 0x02	; 2
    3256:	82 0f       	add	r24, r18
    3258:	e1 e0       	ldi	r30, 0x01	; 1
    325a:	e2 0f       	add	r30, r18
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	eb 53       	subi	r30, 0x3B	; 59
    3260:	fc 4d       	sbci	r31, 0xDC	; 220
    3262:	30 83       	st	Z, r19
    3264:	21 5e       	subi	r18, 0xE1	; 225
    3266:	da 01       	movw	r26, r20
											for (cntByte=0; cntByte<29; cntByte++)
											{
												SerialBufferOut[SerialBufferOutPtrTop++] =
												ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
    3268:	9d 91       	ld	r25, X+
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
											SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
											for (cntByte=0; cntByte<29; cntByte++)
											{
												SerialBufferOut[SerialBufferOutPtrTop++] =
    326a:	e8 2f       	mov	r30, r24
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	eb 53       	subi	r30, 0x3B	; 59
    3270:	fc 4d       	sbci	r31, 0xDC	; 220
    3272:	9f 77       	andi	r25, 0x7F	; 127
    3274:	90 83       	st	Z, r25
    3276:	8f 5f       	subi	r24, 0xFF	; 255
									{
										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
											SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
											for (cntByte=0; cntByte<29; cntByte++)
    3278:	28 13       	cpse	r18, r24
    327a:	f6 cf       	rjmp	.-20     	; 0x3268 <__DATA_REGION_LENGTH__+0x1268>
    327c:	20 93 82 22 	sts	0x2282, r18	; 0x802282 <SerialBufferOutPtrTop>
											{
												SerialBufferOut[SerialBufferOutPtrTop++] =
												ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
								 		  }
										}
										if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
    3280:	e0 91 93 2b 	lds	r30, 0x2B93	; 0x802b93 <SerialBufferOutPtrBottom>
    3284:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3288:	8e 17       	cp	r24, r30
    328a:	81 f0       	breq	.+32     	; 0x32ac <__DATA_REGION_LENGTH__+0x12ac>
    328c:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    3290:	88 23       	and	r24, r24
    3292:	61 f0       	breq	.+24     	; 0x32ac <__DATA_REGION_LENGTH__+0x12ac>
										{
											USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	8e 0f       	add	r24, r30
    3298:	80 93 93 2b 	sts	0x2B93, r24	; 0x802b93 <SerialBufferOutPtrBottom>
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	eb 53       	subi	r30, 0x3B	; 59
    32a0:	fc 4d       	sbci	r31, 0xDC	; 220
    32a2:	80 81       	ld	r24, Z
    32a4:	f8 01       	movw	r30, r16
    32a6:	80 83       	st	Z, r24
											SendSerialReady = 0;
    32a8:	10 92 6a 22 	sts	0x226A, r1	; 0x80226a <SendSerialReady>
										}
										while(!SendSerialReady);
    32ac:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    32b0:	88 23       	and	r24, r24
    32b2:	f1 f3       	breq	.-4      	; 0x32b0 <__DATA_REGION_LENGTH__+0x12b0>


								{//Reload
									unsigned char cntByte, cntChannel;

									for (cntChannel=0; cntChannel<16; cntChannel++)
    32b4:	3f 5f       	subi	r19, 0xFF	; 255
    32b6:	43 5e       	subi	r20, 0xE3	; 227
    32b8:	5f 4f       	sbci	r21, 0xFF	; 255
    32ba:	30 31       	cpi	r19, 0x10	; 16
    32bc:	09 f0       	breq	.+2      	; 0x32c0 <__DATA_REGION_LENGTH__+0x12c0>
    32be:	bd cf       	rjmp	.-134    	; 0x323a <__DATA_REGION_LENGTH__+0x123a>
											SendSerialReady = 0;
										}
										while(!SendSerialReady);
									}

									SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    32c0:	20 91 82 22 	lds	r18, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    32c4:	e2 2f       	mov	r30, r18
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	eb 53       	subi	r30, 0x3B	; 59
    32ca:	fc 4d       	sbci	r31, 0xDC	; 220
    32cc:	84 e9       	ldi	r24, 0x94	; 148
    32ce:	80 83       	st	Z, r24
									SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    32d0:	82 e0       	ldi	r24, 0x02	; 2
    32d2:	82 0f       	add	r24, r18
    32d4:	e1 e0       	ldi	r30, 0x01	; 1
    32d6:	e2 0f       	add	r30, r18
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	eb 53       	subi	r30, 0x3B	; 59
    32dc:	fc 4d       	sbci	r31, 0xDC	; 220
    32de:	10 82       	st	Z, r1
    32e0:	ae e8       	ldi	r26, 0x8E	; 142
    32e2:	bb e2       	ldi	r27, 0x2B	; 43
    32e4:	29 5f       	subi	r18, 0xF9	; 249
									for (cntByte=0; cntByte<5; cntByte++)
									{
										SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    32e6:	9d 91       	ld	r25, X+
    32e8:	e8 2f       	mov	r30, r24
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	eb 53       	subi	r30, 0x3B	; 59
    32ee:	fc 4d       	sbci	r31, 0xDC	; 220
    32f0:	9f 77       	andi	r25, 0x7F	; 127
    32f2:	90 83       	st	Z, r25
    32f4:	8f 5f       	subi	r24, 0xFF	; 255
										while(!SendSerialReady);
									}

									SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
									SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
									for (cntByte=0; cntByte<5; cntByte++)
    32f6:	28 13       	cpse	r18, r24
    32f8:	f6 cf       	rjmp	.-20     	; 0x32e6 <__DATA_REGION_LENGTH__+0x12e6>
    32fa:	20 93 82 22 	sts	0x2282, r18	; 0x802282 <SerialBufferOutPtrTop>
    32fe:	c0 c0       	rjmp	.+384    	; 0x3480 <__DATA_REGION_LENGTH__+0x1480>
								unsigned char ReadedModuleType[NROFMODULES];
								unsigned char cntModule;
								unsigned int Address = 0x0000;
								unsigned char DifferentConfiguration=0;

							  ReadData(I2CAddressSmartCard, Address, ReadedModuleType, NROFMODULES);
    3300:	20 e1       	ldi	r18, 0x10	; 16
    3302:	ae 01       	movw	r20, r28
    3304:	4f 5f       	subi	r20, 0xFF	; 255
    3306:	5f 4f       	sbci	r21, 0xFF	; 255
    3308:	60 e0       	ldi	r22, 0x00	; 0
    330a:	70 e0       	ldi	r23, 0x00	; 0
    330c:	80 e5       	ldi	r24, 0x50	; 80
    330e:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <ReadData>
    3312:	00 e7       	ldi	r16, 0x70	; 112
    3314:	12 e2       	ldi	r17, 0x22	; 34
    3316:	de 01       	movw	r26, r28
    3318:	11 96       	adiw	r26, 0x01	; 1
    331a:	20 e8       	ldi	r18, 0x80	; 128
    331c:	32 e2       	ldi	r19, 0x22	; 34
    331e:	f8 01       	movw	r30, r16
							case 3:
							{ // SmartCard Load
								unsigned char ReadedModuleType[NROFMODULES];
								unsigned char cntModule;
								unsigned int Address = 0x0000;
								unsigned char DifferentConfiguration=0;
    3320:	40 e0       	ldi	r20, 0x00	; 0

							  ReadData(I2CAddressSmartCard, Address, ReadedModuleType, NROFMODULES);

								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
								{
									if (ModuleType[cntModule] != ReadedModuleType[cntModule])
    3322:	91 91       	ld	r25, Z+
    3324:	8d 91       	ld	r24, X+
    3326:	98 13       	cpse	r25, r24
									{
										DifferentConfiguration = 1;
    3328:	41 e0       	ldi	r20, 0x01	; 1
								unsigned int Address = 0x0000;
								unsigned char DifferentConfiguration=0;

							  ReadData(I2CAddressSmartCard, Address, ReadedModuleType, NROFMODULES);

								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    332a:	e2 17       	cp	r30, r18
    332c:	f3 07       	cpc	r31, r19
    332e:	c9 f7       	brne	.-14     	; 0x3322 <__DATA_REGION_LENGTH__+0x1322>
									{
										DifferentConfiguration = 1;
									}
								}

								if (!DifferentConfiguration)
    3330:	41 11       	cpse	r20, r1
    3332:	89 c0       	rjmp	.+274    	; 0x3446 <__DATA_REGION_LENGTH__+0x1446>
    3334:	68 94       	set
    3336:	ee 24       	eor	r14, r14
    3338:	e4 f8       	bld	r14, 4
    333a:	f1 2c       	mov	r15, r1
								{
									Address += NROFMODULES;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										ReadData(I2CAddressSmartCard, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
    333c:	a7 01       	movw	r20, r14
    333e:	45 5f       	subi	r20, 0xF5	; 245
    3340:	57 4c       	sbci	r21, 0xC7	; 199
    3342:	2d e1       	ldi	r18, 0x1D	; 29
    3344:	b7 01       	movw	r22, r14
    3346:	80 e5       	ldi	r24, 0x50	; 80
    3348:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <ReadData>
										Address += 29;
    334c:	fd e1       	ldi	r31, 0x1D	; 29
    334e:	ef 0e       	add	r14, r31
    3350:	f1 1c       	adc	r15, r1
								}

								if (!DifferentConfiguration)
								{
									Address += NROFMODULES;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    3352:	20 ee       	ldi	r18, 0xE0	; 224
    3354:	e2 16       	cp	r14, r18
    3356:	21 e0       	ldi	r18, 0x01	; 1
    3358:	f2 06       	cpc	r15, r18
    335a:	81 f7       	brne	.-32     	; 0x333c <__DATA_REGION_LENGTH__+0x133c>
									{
										ReadData(I2CAddressSmartCard, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
										Address += 29;
									}
									ReadData(I2CAddressSmartCard, Address, ConsoleMasterSettings, 5);
    335c:	25 e0       	ldi	r18, 0x05	; 5
    335e:	4e e8       	ldi	r20, 0x8E	; 142
    3360:	5b e2       	ldi	r21, 0x2B	; 43
    3362:	60 ee       	ldi	r22, 0xE0	; 224
    3364:	71 e0       	ldi	r23, 0x01	; 1
    3366:	80 e5       	ldi	r24, 0x50	; 80
    3368:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <ReadData>
    336c:	4b e1       	ldi	r20, 0x1B	; 27
    336e:	58 e3       	ldi	r21, 0x38	; 56

									{//Reload
										unsigned char cntByte, cntChannel;

										for (cntChannel=0; cntChannel<16; cntChannel++)
    3370:	30 e0       	ldi	r19, 0x00	; 0
										{
  										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
											{
												SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    3372:	0f 2e       	mov	r0, r31
    3374:	f3 e9       	ldi	r31, 0x93	; 147
    3376:	ff 2e       	mov	r15, r31
    3378:	f0 2d       	mov	r31, r0
													ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
									 		  }
											}
											if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
											{
												USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    337a:	60 ea       	ldi	r22, 0xA0	; 160
    337c:	7a e0       	ldi	r23, 0x0A	; 10
									{//Reload
										unsigned char cntByte, cntChannel;

										for (cntChannel=0; cntChannel<16; cntChannel++)
										{
  										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
    337e:	d8 01       	movw	r26, r16
    3380:	8d 91       	ld	r24, X+
    3382:	8d 01       	movw	r16, r26
    3384:	81 50       	subi	r24, 0x01	; 1
    3386:	82 30       	cpi	r24, 0x02	; 2
    3388:	f0 f4       	brcc	.+60     	; 0x33c6 <__DATA_REGION_LENGTH__+0x13c6>
											{
												SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    338a:	20 91 82 22 	lds	r18, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    338e:	e2 2f       	mov	r30, r18
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	eb 53       	subi	r30, 0x3B	; 59
    3394:	fc 4d       	sbci	r31, 0xDC	; 220
    3396:	f0 82       	st	Z, r15
												SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
    3398:	92 e0       	ldi	r25, 0x02	; 2
    339a:	92 0f       	add	r25, r18
    339c:	e1 e0       	ldi	r30, 0x01	; 1
    339e:	e2 0f       	add	r30, r18
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	eb 53       	subi	r30, 0x3B	; 59
    33a4:	fc 4d       	sbci	r31, 0xDC	; 220
    33a6:	30 83       	st	Z, r19
    33a8:	21 5e       	subi	r18, 0xE1	; 225
    33aa:	da 01       	movw	r26, r20
												for (cntByte=0; cntByte<29; cntByte++)
												{
													ConsoleModuleSettings[cntChannel][cntByte]&=0x01;
    33ac:	8c 91       	ld	r24, X
    33ae:	81 70       	andi	r24, 0x01	; 1
    33b0:	8d 93       	st	X+, r24
													SerialBufferOut[SerialBufferOutPtrTop++] =
    33b2:	e9 2f       	mov	r30, r25
    33b4:	f0 e0       	ldi	r31, 0x00	; 0
    33b6:	eb 53       	subi	r30, 0x3B	; 59
    33b8:	fc 4d       	sbci	r31, 0xDC	; 220
    33ba:	80 83       	st	Z, r24
    33bc:	9f 5f       	subi	r25, 0xFF	; 255
										{
  										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
											{
												SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
												SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
												for (cntByte=0; cntByte<29; cntByte++)
    33be:	92 13       	cpse	r25, r18
    33c0:	f5 cf       	rjmp	.-22     	; 0x33ac <__DATA_REGION_LENGTH__+0x13ac>
    33c2:	20 93 82 22 	sts	0x2282, r18	; 0x802282 <SerialBufferOutPtrTop>
													ConsoleModuleSettings[cntChannel][cntByte]&=0x01;
													SerialBufferOut[SerialBufferOutPtrTop++] =
													ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
									 		  }
											}
											if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
    33c6:	e0 91 93 2b 	lds	r30, 0x2B93	; 0x802b93 <SerialBufferOutPtrBottom>
    33ca:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    33ce:	8e 17       	cp	r24, r30
    33d0:	81 f0       	breq	.+32     	; 0x33f2 <__DATA_REGION_LENGTH__+0x13f2>
    33d2:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    33d6:	88 23       	and	r24, r24
    33d8:	61 f0       	breq	.+24     	; 0x33f2 <__DATA_REGION_LENGTH__+0x13f2>
											{
												USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	8e 0f       	add	r24, r30
    33de:	80 93 93 2b 	sts	0x2B93, r24	; 0x802b93 <SerialBufferOutPtrBottom>
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	eb 53       	subi	r30, 0x3B	; 59
    33e6:	fc 4d       	sbci	r31, 0xDC	; 220
    33e8:	80 81       	ld	r24, Z
    33ea:	fb 01       	movw	r30, r22
    33ec:	80 83       	st	Z, r24
												SendSerialReady = 0;
    33ee:	10 92 6a 22 	sts	0x226A, r1	; 0x80226a <SendSerialReady>
											}
											while(!SendSerialReady);
    33f2:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    33f6:	88 23       	and	r24, r24
    33f8:	f1 f3       	breq	.-4      	; 0x33f6 <__DATA_REGION_LENGTH__+0x13f6>
									ReadData(I2CAddressSmartCard, Address, ConsoleMasterSettings, 5);

									{//Reload
										unsigned char cntByte, cntChannel;

										for (cntChannel=0; cntChannel<16; cntChannel++)
    33fa:	3f 5f       	subi	r19, 0xFF	; 255
    33fc:	43 5e       	subi	r20, 0xE3	; 227
    33fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3400:	30 31       	cpi	r19, 0x10	; 16
    3402:	09 f0       	breq	.+2      	; 0x3406 <__DATA_REGION_LENGTH__+0x1406>
    3404:	bc cf       	rjmp	.-136    	; 0x337e <__DATA_REGION_LENGTH__+0x137e>
												SendSerialReady = 0;
											}
											while(!SendSerialReady);
										}
	
										SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    3406:	20 91 82 22 	lds	r18, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    340a:	e2 2f       	mov	r30, r18
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	eb 53       	subi	r30, 0x3B	; 59
    3410:	fc 4d       	sbci	r31, 0xDC	; 220
    3412:	84 e9       	ldi	r24, 0x94	; 148
    3414:	80 83       	st	Z, r24
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3416:	82 e0       	ldi	r24, 0x02	; 2
    3418:	82 0f       	add	r24, r18
    341a:	e1 e0       	ldi	r30, 0x01	; 1
    341c:	e2 0f       	add	r30, r18
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	eb 53       	subi	r30, 0x3B	; 59
    3422:	fc 4d       	sbci	r31, 0xDC	; 220
    3424:	10 82       	st	Z, r1
    3426:	ae e8       	ldi	r26, 0x8E	; 142
    3428:	bb e2       	ldi	r27, 0x2B	; 43
    342a:	29 5f       	subi	r18, 0xF9	; 249
										for (cntByte=0; cntByte<5; cntByte++)
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    342c:	9d 91       	ld	r25, X+
    342e:	e8 2f       	mov	r30, r24
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	eb 53       	subi	r30, 0x3B	; 59
    3434:	fc 4d       	sbci	r31, 0xDC	; 220
    3436:	9f 77       	andi	r25, 0x7F	; 127
    3438:	90 83       	st	Z, r25
    343a:	8f 5f       	subi	r24, 0xFF	; 255
											while(!SendSerialReady);
										}
	
										SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
										for (cntByte=0; cntByte<5; cntByte++)
    343c:	28 13       	cpse	r18, r24
    343e:	f6 cf       	rjmp	.-20     	; 0x342c <__DATA_REGION_LENGTH__+0x142c>
    3440:	20 93 82 22 	sts	0x2282, r18	; 0x802282 <SerialBufferOutPtrTop>
    3444:	1d c0       	rjmp	.+58     	; 0x3480 <__DATA_REGION_LENGTH__+0x1480>
										}
									}
 							  }
								else
								{
									SetLCD(0,"\xC0");
    3446:	6f e2       	ldi	r22, 0x2F	; 47
    3448:	70 e2       	ldi	r23, 0x20	; 32
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
									SetLCD(1,"Other Config.   ");
    3452:	6a ea       	ldi	r22, 0xAA	; 170
    3454:	70 e2       	ldi	r23, 0x20	; 32
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
									Delay(100);
    345e:	84 e6       	ldi	r24, 0x64	; 100
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Delay>
								}
							}
							break;
    3466:	0c c0       	rjmp	.+24     	; 0x3480 <__DATA_REGION_LENGTH__+0x1480>
							case 4:
							{ // SmartCard Write
			 					unsigned char cntModule;
								unsigned int Address = 0x0000;

								SetLCD(0,"\x80");
    3468:	61 e5       	ldi	r22, 0x51	; 81
    346a:	70 e2       	ldi	r23, 0x20	; 32
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
								SetLCD(1,"Saving...");
    3474:	6b eb       	ldi	r22, 0xBB	; 187
    3476:	70 e2       	ldi	r23, 0x20	; 32
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
																//// Wait until data got transmitted
																//while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
							}
							break;
						}
						OperatingMode = NORMALMODE;
    3480:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <OperatingMode>
						TextStringPtr = 0;
    3484:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>

						SetLCD(0,"\x80");
    3488:	61 e5       	ldi	r22, 0x51	; 81
    348a:	70 e2       	ldi	r23, 0x20	; 32
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(1,"                ");
    3494:	64 e6       	ldi	r22, 0x64	; 100
    3496:	70 e2       	ldi	r23, 0x20	; 32
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(0,"\xC0");
    34a0:	6f e2       	ldi	r22, 0x2F	; 47
    34a2:	70 e2       	ldi	r23, 0x20	; 32
    34a4:	80 e0       	ldi	r24, 0x00	; 0
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(1, TextString[TextStringPtr]);
    34ac:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    34b0:	f1 e1       	ldi	r31, 0x11	; 17
    34b2:	6f 9f       	mul	r22, r31
    34b4:	b0 01       	movw	r22, r0
    34b6:	11 24       	eor	r1, r1
    34b8:	6a 5d       	subi	r22, 0xDA	; 218
    34ba:	7d 4d       	sbci	r23, 0xDD	; 221
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>

						TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    34c4:	e6 e1       	ldi	r30, 0x16	; 22
    34c6:	fa e3       	ldi	r31, 0x3A	; 58
    34c8:	23 81       	ldd	r18, Z+3	; 0x03
    34ca:	8d ec       	ldi	r24, 0xCD	; 205
    34cc:	28 9f       	mul	r18, r24
    34ce:	91 2d       	mov	r25, r1
    34d0:	11 24       	eor	r1, r1
    34d2:	96 95       	lsr	r25
    34d4:	96 95       	lsr	r25
    34d6:	96 95       	lsr	r25
    34d8:	30 e3       	ldi	r19, 0x30	; 48
    34da:	39 0f       	add	r19, r25
    34dc:	39 83       	std	Y+1, r19	; 0x01
						TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    34de:	99 0f       	add	r25, r25
    34e0:	39 2f       	mov	r19, r25
    34e2:	33 0f       	add	r19, r19
    34e4:	33 0f       	add	r19, r19
    34e6:	93 0f       	add	r25, r19
    34e8:	29 1b       	sub	r18, r25
    34ea:	20 5d       	subi	r18, 0xD0	; 208
    34ec:	2a 83       	std	Y+2, r18	; 0x02
						TextBuffer[2] = ':';
    34ee:	4a e3       	ldi	r20, 0x3A	; 58
    34f0:	4b 83       	std	Y+3, r20	; 0x03
					  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    34f2:	22 81       	ldd	r18, Z+2	; 0x02
    34f4:	28 9f       	mul	r18, r24
    34f6:	91 2d       	mov	r25, r1
    34f8:	11 24       	eor	r1, r1
    34fa:	96 95       	lsr	r25
    34fc:	96 95       	lsr	r25
    34fe:	96 95       	lsr	r25
    3500:	30 e3       	ldi	r19, 0x30	; 48
    3502:	39 0f       	add	r19, r25
    3504:	3c 83       	std	Y+4, r19	; 0x04
						TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    3506:	99 0f       	add	r25, r25
    3508:	39 2f       	mov	r19, r25
    350a:	33 0f       	add	r19, r19
    350c:	33 0f       	add	r19, r19
    350e:	93 0f       	add	r25, r19
    3510:	29 1b       	sub	r18, r25
    3512:	20 5d       	subi	r18, 0xD0	; 208
    3514:	2d 83       	std	Y+5, r18	; 0x05
						TextBuffer[5] = ':';
    3516:	4e 83       	std	Y+6, r20	; 0x06
						TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    3518:	91 81       	ldd	r25, Z+1	; 0x01
    351a:	98 9f       	mul	r25, r24
    351c:	81 2d       	mov	r24, r1
    351e:	11 24       	eor	r1, r1
    3520:	86 95       	lsr	r24
    3522:	86 95       	lsr	r24
    3524:	86 95       	lsr	r24
    3526:	20 e3       	ldi	r18, 0x30	; 48
    3528:	28 0f       	add	r18, r24
    352a:	2f 83       	std	Y+7, r18	; 0x07
						TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    352c:	88 0f       	add	r24, r24
    352e:	28 2f       	mov	r18, r24
    3530:	22 0f       	add	r18, r18
    3532:	22 0f       	add	r18, r18
    3534:	82 0f       	add	r24, r18
    3536:	98 1b       	sub	r25, r24
    3538:	90 5d       	subi	r25, 0xD0	; 208
    353a:	98 87       	std	Y+8, r25	; 0x08
/*						TextBuffer[8] = ':';
						TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
						TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
						TextBuffer[11] = 0;*/
						TextBuffer[8] = 0;
    353c:	19 86       	std	Y+9, r1	; 0x09
						SetLCD(0,"\x84");
    353e:	65 e7       	ldi	r22, 0x75	; 117
    3540:	70 e2       	ldi	r23, 0x20	; 32
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(1,TextBuffer);
    354a:	be 01       	movw	r22, r28
    354c:	6f 5f       	subi	r22, 0xFF	; 255
    354e:	7f 4f       	sbci	r23, 0xFF	; 255
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					}
					break;
    3558:	dd c4       	rjmp	.+2490   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					default:
					{
						char TextBuffer[9];

						OperatingMode = NORMALMODE;
    355a:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <OperatingMode>
						TextStringPtr = 0;
    355e:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>

						SetLCD(0,"\x80");
    3562:	61 e5       	ldi	r22, 0x51	; 81
    3564:	70 e2       	ldi	r23, 0x20	; 32
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(1,"                ");
    356e:	64 e6       	ldi	r22, 0x64	; 100
    3570:	70 e2       	ldi	r23, 0x20	; 32
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(0,"\xC0");
    357a:	6f e2       	ldi	r22, 0x2F	; 47
    357c:	70 e2       	ldi	r23, 0x20	; 32
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(1, TextString[TextStringPtr]);
    3586:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    358a:	21 e1       	ldi	r18, 0x11	; 17
    358c:	62 9f       	mul	r22, r18
    358e:	b0 01       	movw	r22, r0
    3590:	11 24       	eor	r1, r1
    3592:	6a 5d       	subi	r22, 0xDA	; 218
    3594:	7d 4d       	sbci	r23, 0xDD	; 221
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>

						TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    359e:	e6 e1       	ldi	r30, 0x16	; 22
    35a0:	fa e3       	ldi	r31, 0x3A	; 58
    35a2:	23 81       	ldd	r18, Z+3	; 0x03
    35a4:	8d ec       	ldi	r24, 0xCD	; 205
    35a6:	28 9f       	mul	r18, r24
    35a8:	91 2d       	mov	r25, r1
    35aa:	11 24       	eor	r1, r1
    35ac:	96 95       	lsr	r25
    35ae:	96 95       	lsr	r25
    35b0:	96 95       	lsr	r25
    35b2:	30 e3       	ldi	r19, 0x30	; 48
    35b4:	39 0f       	add	r19, r25
    35b6:	39 83       	std	Y+1, r19	; 0x01
						TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    35b8:	99 0f       	add	r25, r25
    35ba:	39 2f       	mov	r19, r25
    35bc:	33 0f       	add	r19, r19
    35be:	33 0f       	add	r19, r19
    35c0:	93 0f       	add	r25, r19
    35c2:	29 1b       	sub	r18, r25
    35c4:	20 5d       	subi	r18, 0xD0	; 208
    35c6:	2a 83       	std	Y+2, r18	; 0x02
						TextBuffer[2] = ':';
    35c8:	4a e3       	ldi	r20, 0x3A	; 58
    35ca:	4b 83       	std	Y+3, r20	; 0x03
					  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    35cc:	22 81       	ldd	r18, Z+2	; 0x02
    35ce:	28 9f       	mul	r18, r24
    35d0:	91 2d       	mov	r25, r1
    35d2:	11 24       	eor	r1, r1
    35d4:	96 95       	lsr	r25
    35d6:	96 95       	lsr	r25
    35d8:	96 95       	lsr	r25
    35da:	30 e3       	ldi	r19, 0x30	; 48
    35dc:	39 0f       	add	r19, r25
    35de:	3c 83       	std	Y+4, r19	; 0x04
						TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    35e0:	99 0f       	add	r25, r25
    35e2:	39 2f       	mov	r19, r25
    35e4:	33 0f       	add	r19, r19
    35e6:	33 0f       	add	r19, r19
    35e8:	93 0f       	add	r25, r19
    35ea:	29 1b       	sub	r18, r25
    35ec:	20 5d       	subi	r18, 0xD0	; 208
    35ee:	2d 83       	std	Y+5, r18	; 0x05
						TextBuffer[5] = ':';
    35f0:	4e 83       	std	Y+6, r20	; 0x06
						TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    35f2:	91 81       	ldd	r25, Z+1	; 0x01
    35f4:	98 9f       	mul	r25, r24
    35f6:	81 2d       	mov	r24, r1
    35f8:	11 24       	eor	r1, r1
    35fa:	86 95       	lsr	r24
    35fc:	86 95       	lsr	r24
    35fe:	86 95       	lsr	r24
    3600:	20 e3       	ldi	r18, 0x30	; 48
    3602:	28 0f       	add	r18, r24
    3604:	2f 83       	std	Y+7, r18	; 0x07
						TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    3606:	88 0f       	add	r24, r24
    3608:	28 2f       	mov	r18, r24
    360a:	22 0f       	add	r18, r18
    360c:	22 0f       	add	r18, r18
    360e:	82 0f       	add	r24, r18
    3610:	98 1b       	sub	r25, r24
    3612:	90 5d       	subi	r25, 0xD0	; 208
    3614:	98 87       	std	Y+8, r25	; 0x08
/*						TextBuffer[8] = ':';
						TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
						TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
						TextBuffer[11] = 0;*/
						TextBuffer[8] = 0;
    3616:	19 86       	std	Y+9, r1	; 0x09
						SetLCD(0,"\x84");
    3618:	65 e7       	ldi	r22, 0x75	; 117
    361a:	70 e2       	ldi	r23, 0x20	; 32
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(1,TextBuffer);
    3624:	be 01       	movw	r22, r28
    3626:	6f 5f       	subi	r22, 0xFF	; 255
    3628:	7f 4f       	sbci	r23, 0xFF	; 255
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetConsoleData();
    3632:	0e 94 0e 07 	call	0xe1c	; 0xe1c <SetConsoleData>
					}
					break;
    3636:	6e c4       	rjmp	.+2268   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			}
		}
		break;
		case RIGHT:
		{
			if (EventOn)
    3638:	01 2b       	or	r16, r17
    363a:	09 f0       	breq	.+2      	; 0x363e <__DATA_REGION_LENGTH__+0x163e>
    363c:	6b c4       	rjmp	.+2262   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			{
				switch (OperatingMode)
    363e:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    3642:	82 30       	cpi	r24, 0x02	; 2
    3644:	09 f0       	breq	.+2      	; 0x3648 <__DATA_REGION_LENGTH__+0x1648>
    3646:	66 c4       	rjmp	.+2252   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					{
					}
					break;
					case MASTERMODE:
					{
						if (ConsoleMasterSettings[4])
    3648:	80 91 92 2b 	lds	r24, 0x2B92	; 0x802b92 <ConsoleMasterSettings+0x4>
    364c:	88 23       	and	r24, r24
    364e:	09 f4       	brne	.+2      	; 0x3652 <__DATA_REGION_LENGTH__+0x1652>
    3650:	61 c4       	rjmp	.+2242   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						{
							unsigned char cntByte;

							ConsoleMasterSettings[TextStringPtr] = 1;
    3652:	e0 91 81 22 	lds	r30, 0x2281	; 0x802281 <TextStringPtr>
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	e2 57       	subi	r30, 0x72	; 114
    365a:	f4 4d       	sbci	r31, 0xD4	; 212
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	80 83       	st	Z, r24
							SetLCD(0,"\xC0");
    3660:	6f e2       	ldi	r22, 0x2F	; 47
    3662:	70 e2       	ldi	r23, 0x20	; 32
    3664:	80 e0       	ldi	r24, 0x00	; 0
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
							SetLCD(1,"Yes             ");
    366c:	68 e8       	ldi	r22, 0x88	; 136
    366e:	70 e2       	ldi	r23, 0x20	; 32
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>

							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    3678:	20 91 82 22 	lds	r18, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    367c:	e2 2f       	mov	r30, r18
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	eb 53       	subi	r30, 0x3B	; 59
    3682:	fc 4d       	sbci	r31, 0xDC	; 220
    3684:	84 e9       	ldi	r24, 0x94	; 148
    3686:	80 83       	st	Z, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3688:	82 e0       	ldi	r24, 0x02	; 2
    368a:	82 0f       	add	r24, r18
    368c:	e1 e0       	ldi	r30, 0x01	; 1
    368e:	e2 0f       	add	r30, r18
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	eb 53       	subi	r30, 0x3B	; 59
    3694:	fc 4d       	sbci	r31, 0xDC	; 220
    3696:	10 82       	st	Z, r1
    3698:	ae e8       	ldi	r26, 0x8E	; 142
    369a:	bb e2       	ldi	r27, 0x2B	; 43
    369c:	29 5f       	subi	r18, 0xF9	; 249
							for (cntByte=0; cntByte<5; cntByte++)
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    369e:	9d 91       	ld	r25, X+
    36a0:	e8 2f       	mov	r30, r24
    36a2:	f0 e0       	ldi	r31, 0x00	; 0
    36a4:	eb 53       	subi	r30, 0x3B	; 59
    36a6:	fc 4d       	sbci	r31, 0xDC	; 220
    36a8:	9f 77       	andi	r25, 0x7F	; 127
    36aa:	90 83       	st	Z, r25
    36ac:	8f 5f       	subi	r24, 0xFF	; 255
							SetLCD(0,"\xC0");
							SetLCD(1,"Yes             ");

							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
							for (cntByte=0; cntByte<5; cntByte++)
    36ae:	82 13       	cpse	r24, r18
    36b0:	f6 cf       	rjmp	.-20     	; 0x369e <__DATA_REGION_LENGTH__+0x169e>
    36b2:	20 93 82 22 	sts	0x2282, r18	; 0x802282 <SerialBufferOutPtrTop>
    36b6:	2e c4       	rjmp	.+2140   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			}
		}
		break;
		case UP:
		{
			if (EventOn)
    36b8:	01 2b       	or	r16, r17
    36ba:	09 f0       	breq	.+2      	; 0x36be <__DATA_REGION_LENGTH__+0x16be>
    36bc:	2b c4       	rjmp	.+2134   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			{		
				TextStringPtr--;
    36be:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    36c2:	81 50       	subi	r24, 0x01	; 1
    36c4:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
				switch (OperatingMode)
    36c8:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <OperatingMode>
    36cc:	91 30       	cpi	r25, 0x01	; 1
    36ce:	01 f1       	breq	.+64     	; 0x3710 <__DATA_REGION_LENGTH__+0x1710>
    36d0:	38 f0       	brcs	.+14     	; 0x36e0 <__DATA_REGION_LENGTH__+0x16e0>
    36d2:	92 30       	cpi	r25, 0x02	; 2
    36d4:	09 f4       	brne	.+2      	; 0x36d8 <__DATA_REGION_LENGTH__+0x16d8>
    36d6:	44 c0       	rjmp	.+136    	; 0x3760 <__DATA_REGION_LENGTH__+0x1760>
    36d8:	93 30       	cpi	r25, 0x03	; 3
    36da:	09 f4       	brne	.+2      	; 0x36de <__DATA_REGION_LENGTH__+0x16de>
    36dc:	74 c0       	rjmp	.+232    	; 0x37c6 <__DATA_REGION_LENGTH__+0x17c6>
    36de:	1a c4       	rjmp	.+2100   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
				{
					case NORMALMODE:
					{
						if (TextStringPtr>3)
    36e0:	84 30       	cpi	r24, 0x04	; 4
    36e2:	18 f0       	brcs	.+6      	; 0x36ea <__DATA_REGION_LENGTH__+0x16ea>
							TextStringPtr=3;
    36e4:	83 e0       	ldi	r24, 0x03	; 3
    36e6:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
						SetLCD(0,"\xC0");					
    36ea:	6f e2       	ldi	r22, 0x2F	; 47
    36ec:	70 e2       	ldi	r23, 0x20	; 32
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
		 				SetLCD(1,TextString[TextStringPtr]);
    36f6:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    36fa:	41 e1       	ldi	r20, 0x11	; 17
    36fc:	64 9f       	mul	r22, r20
    36fe:	b0 01       	movw	r22, r0
    3700:	11 24       	eor	r1, r1
    3702:	6a 5d       	subi	r22, 0xDA	; 218
    3704:	7d 4d       	sbci	r23, 0xDD	; 221
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					}
					break;
    370e:	02 c4       	rjmp	.+2052   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					case MODULEMODE:
					{
						if (TextStringPtr>28)
    3710:	8d 31       	cpi	r24, 0x1D	; 29
    3712:	18 f0       	brcs	.+6      	; 0x371a <__DATA_REGION_LENGTH__+0x171a>
							TextStringPtr=28;
    3714:	8c e1       	ldi	r24, 0x1C	; 28
    3716:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>

						SetLCD(0,"\x80");					
    371a:	61 e5       	ldi	r22, 0x51	; 81
    371c:	70 e2       	ldi	r23, 0x20	; 32
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(1,ModuleTextString[TextStringPtr]);
    3726:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    372a:	81 e1       	ldi	r24, 0x11	; 17
    372c:	68 9f       	mul	r22, r24
    372e:	b0 01       	movw	r22, r0
    3730:	11 24       	eor	r1, r1
    3732:	6c 55       	subi	r22, 0x5C	; 92
    3734:	74 4d       	sbci	r23, 0xD4	; 212
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(0,"\xC0");							
    373e:	6f e2       	ldi	r22, 0x2F	; 47
    3740:	70 e2       	ldi	r23, 0x20	; 32
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
//						SetLCD(1,"Select Module   ");
						SetLCD(1,"Toggle by SELECT");
    374a:	67 e7       	ldi	r22, 0x77	; 119
    374c:	70 e2       	ldi	r23, 0x20	; 32
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						ShowFunction(TextStringPtr);
    3756:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    375a:	0e 94 3d 03 	call	0x67a	; 0x67a <ShowFunction>
					}
					break;
    375e:	da c3       	rjmp	.+1972   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					case MASTERMODE:
					{
						if (TextStringPtr>3)
    3760:	84 30       	cpi	r24, 0x04	; 4
    3762:	18 f0       	brcs	.+6      	; 0x376a <__DATA_REGION_LENGTH__+0x176a>
							TextStringPtr=3;
    3764:	83 e0       	ldi	r24, 0x03	; 3
    3766:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
						SetLCD(0,"\x80");										
    376a:	61 e5       	ldi	r22, 0x51	; 81
    376c:	70 e2       	ldi	r23, 0x20	; 32
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(1,MasterTextString[TextStringPtr]);
    3776:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    377a:	91 e1       	ldi	r25, 0x11	; 17
    377c:	69 9f       	mul	r22, r25
    377e:	b0 01       	movw	r22, r0
    3780:	11 24       	eor	r1, r1
    3782:	6b 53       	subi	r22, 0x3B	; 59
    3784:	7b 4d       	sbci	r23, 0xDB	; 219
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(0,"\xC0");
    378e:	6f e2       	ldi	r22, 0x2F	; 47
    3790:	70 e2       	ldi	r23, 0x20	; 32
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						if (ConsoleMasterSettings[TextStringPtr])
    379a:	e0 91 81 22 	lds	r30, 0x2281	; 0x802281 <TextStringPtr>
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	e2 57       	subi	r30, 0x72	; 114
    37a2:	f4 4d       	sbci	r31, 0xD4	; 212
    37a4:	80 81       	ld	r24, Z
    37a6:	88 23       	and	r24, r24
    37a8:	39 f0       	breq	.+14     	; 0x37b8 <__DATA_REGION_LENGTH__+0x17b8>
						{
							SetLCD(1,"Yes             ");
    37aa:	68 e8       	ldi	r22, 0x88	; 136
    37ac:	70 e2       	ldi	r23, 0x20	; 32
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
    37b6:	ae c3       	rjmp	.+1884   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						}
						else
						{
							SetLCD(1," No             ");
    37b8:	69 e9       	ldi	r22, 0x99	; 153
    37ba:	70 e2       	ldi	r23, 0x20	; 32
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
    37c4:	a7 c3       	rjmp	.+1870   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						}
					}
					break;
					case SYSTEMMODE:
					{
						if (TextStringPtr>5)
    37c6:	86 30       	cpi	r24, 0x06	; 6
    37c8:	20 f0       	brcs	.+8      	; 0x37d2 <__DATA_REGION_LENGTH__+0x17d2>
							TextStringPtr=5;
    37ca:	85 e0       	ldi	r24, 0x05	; 5
    37cc:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
    37d0:	09 c0       	rjmp	.+18     	; 0x37e4 <__DATA_REGION_LENGTH__+0x17e4>

						if (!CardInserted)
    37d2:	90 91 6d 22 	lds	r25, 0x226D	; 0x80226d <CardInserted>
    37d6:	91 11       	cpse	r25, r1
    37d8:	05 c0       	rjmp	.+10     	; 0x37e4 <__DATA_REGION_LENGTH__+0x17e4>
						{
							if (TextStringPtr==4)
    37da:	84 30       	cpi	r24, 0x04	; 4
    37dc:	19 f4       	brne	.+6      	; 0x37e4 <__DATA_REGION_LENGTH__+0x17e4>
								TextStringPtr=2;
    37de:	82 e0       	ldi	r24, 0x02	; 2
    37e0:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
						}
						SetLCD(0,"\x80");										
    37e4:	61 e5       	ldi	r22, 0x51	; 81
    37e6:	70 e2       	ldi	r23, 0x20	; 32
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(1,SystemTextString[TextStringPtr]);
    37f0:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    37f4:	a1 e1       	ldi	r26, 0x11	; 17
    37f6:	6a 9f       	mul	r22, r26
    37f8:	b0 01       	movw	r22, r0
    37fa:	11 24       	eor	r1, r1
    37fc:	6f 55       	subi	r22, 0x5F	; 95
    37fe:	72 4d       	sbci	r23, 0xD2	; 210
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>

						switch (TextStringPtr)
    3808:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    380c:	88 23       	and	r24, r24
    380e:	19 f0       	breq	.+6      	; 0x3816 <__DATA_REGION_LENGTH__+0x1816>
    3810:	85 30       	cpi	r24, 0x05	; 5
    3812:	21 f0       	breq	.+8      	; 0x381c <__DATA_REGION_LENGTH__+0x181c>
    3814:	10 c0       	rjmp	.+32     	; 0x3836 <__DATA_REGION_LENGTH__+0x1836>
						{
							case 0:
							{
								ShowConfig();
    3816:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <ShowConfig>
							}
							break;
    381a:	7c c3       	rjmp	.+1784   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
							case 5:
							{
								SetLCD(0,"\xC0");
    381c:	6f e2       	ldi	r22, 0x2F	; 47
    381e:	70 e2       	ldi	r23, 0x20	; 32
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
								SetLCD(1,IDString);
    3828:	60 e0       	ldi	r22, 0x00	; 0
    382a:	70 e2       	ldi	r23, 0x20	; 32
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
							}
							break;
    3834:	6f c3       	rjmp	.+1758   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
							default:
							{
								SetLCD(0,"\xC0");
    3836:	6f e2       	ldi	r22, 0x2F	; 47
    3838:	70 e2       	ldi	r23, 0x20	; 32
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
								SetLCD(1,"Press Enter/Esc ");
    3842:	65 ec       	ldi	r22, 0xC5	; 197
    3844:	70 e2       	ldi	r23, 0x20	; 32
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
							}
							break;
    384e:	62 c3       	rjmp	.+1732   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			}
		}
		break;
		case DOWN:
		{
			if (EventOn)
    3850:	01 2b       	or	r16, r17
    3852:	09 f0       	breq	.+2      	; 0x3856 <__DATA_REGION_LENGTH__+0x1856>
    3854:	5f c3       	rjmp	.+1726   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			{
				TextStringPtr++;
    3856:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    385a:	8f 5f       	subi	r24, 0xFF	; 255
    385c:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
				switch (OperatingMode)
    3860:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <OperatingMode>
    3864:	91 30       	cpi	r25, 0x01	; 1
    3866:	f9 f0       	breq	.+62     	; 0x38a6 <__DATA_REGION_LENGTH__+0x18a6>
    3868:	38 f0       	brcs	.+14     	; 0x3878 <__DATA_REGION_LENGTH__+0x1878>
    386a:	92 30       	cpi	r25, 0x02	; 2
    386c:	09 f4       	brne	.+2      	; 0x3870 <__DATA_REGION_LENGTH__+0x1870>
    386e:	42 c0       	rjmp	.+132    	; 0x38f4 <__DATA_REGION_LENGTH__+0x18f4>
    3870:	93 30       	cpi	r25, 0x03	; 3
    3872:	09 f4       	brne	.+2      	; 0x3876 <__DATA_REGION_LENGTH__+0x1876>
    3874:	71 c0       	rjmp	.+226    	; 0x3958 <__DATA_REGION_LENGTH__+0x1958>
    3876:	4e c3       	rjmp	.+1692   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
				{
					case NORMALMODE:
					{
						if (TextStringPtr>3)
    3878:	84 30       	cpi	r24, 0x04	; 4
    387a:	10 f0       	brcs	.+4      	; 0x3880 <__DATA_REGION_LENGTH__+0x1880>
							TextStringPtr=0;
    387c:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>
						SetLCD(0,"\xC0");			
    3880:	6f e2       	ldi	r22, 0x2F	; 47
    3882:	70 e2       	ldi	r23, 0x20	; 32
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
		 				SetLCD(1,TextString[TextStringPtr]);
    388c:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3890:	b1 e1       	ldi	r27, 0x11	; 17
    3892:	6b 9f       	mul	r22, r27
    3894:	b0 01       	movw	r22, r0
    3896:	11 24       	eor	r1, r1
    3898:	6a 5d       	subi	r22, 0xDA	; 218
    389a:	7d 4d       	sbci	r23, 0xDD	; 221
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					}
					break;
    38a4:	37 c3       	rjmp	.+1646   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					case MODULEMODE:
					{
						if (TextStringPtr>28)
    38a6:	8d 31       	cpi	r24, 0x1D	; 29
    38a8:	10 f0       	brcs	.+4      	; 0x38ae <__DATA_REGION_LENGTH__+0x18ae>
							TextStringPtr=0;
    38aa:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>

						SetLCD(0,"\x80");							
    38ae:	61 e5       	ldi	r22, 0x51	; 81
    38b0:	70 e2       	ldi	r23, 0x20	; 32
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(1,ModuleTextString[TextStringPtr]);
    38ba:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    38be:	e1 e1       	ldi	r30, 0x11	; 17
    38c0:	6e 9f       	mul	r22, r30
    38c2:	b0 01       	movw	r22, r0
    38c4:	11 24       	eor	r1, r1
    38c6:	6c 55       	subi	r22, 0x5C	; 92
    38c8:	74 4d       	sbci	r23, 0xD4	; 212
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(0,"\xC0");							
    38d2:	6f e2       	ldi	r22, 0x2F	; 47
    38d4:	70 e2       	ldi	r23, 0x20	; 32
    38d6:	80 e0       	ldi	r24, 0x00	; 0
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
//						SetLCD(1,"Select Module   ");
						SetLCD(1,"Toggle by SELECT");
    38de:	67 e7       	ldi	r22, 0x77	; 119
    38e0:	70 e2       	ldi	r23, 0x20	; 32
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						ShowFunction(TextStringPtr);
    38ea:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    38ee:	0e 94 3d 03 	call	0x67a	; 0x67a <ShowFunction>
					}
					break;
    38f2:	10 c3       	rjmp	.+1568   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					case MASTERMODE:
					{
						if (TextStringPtr>3)
    38f4:	84 30       	cpi	r24, 0x04	; 4
    38f6:	10 f0       	brcs	.+4      	; 0x38fc <__DATA_REGION_LENGTH__+0x18fc>
							TextStringPtr=0;
    38f8:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>
						SetLCD(0,"\x80");					
    38fc:	61 e5       	ldi	r22, 0x51	; 81
    38fe:	70 e2       	ldi	r23, 0x20	; 32
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(1,MasterTextString[TextStringPtr]);
    3908:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    390c:	f1 e1       	ldi	r31, 0x11	; 17
    390e:	6f 9f       	mul	r22, r31
    3910:	b0 01       	movw	r22, r0
    3912:	11 24       	eor	r1, r1
    3914:	6b 53       	subi	r22, 0x3B	; 59
    3916:	7b 4d       	sbci	r23, 0xDB	; 219
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(0,"\xC0");
    3920:	6f e2       	ldi	r22, 0x2F	; 47
    3922:	70 e2       	ldi	r23, 0x20	; 32
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						if (ConsoleMasterSettings[TextStringPtr])
    392c:	e0 91 81 22 	lds	r30, 0x2281	; 0x802281 <TextStringPtr>
    3930:	f0 e0       	ldi	r31, 0x00	; 0
    3932:	e2 57       	subi	r30, 0x72	; 114
    3934:	f4 4d       	sbci	r31, 0xD4	; 212
    3936:	80 81       	ld	r24, Z
    3938:	88 23       	and	r24, r24
    393a:	39 f0       	breq	.+14     	; 0x394a <__DATA_REGION_LENGTH__+0x194a>
						{
							SetLCD(1,"Yes             ");
    393c:	68 e8       	ldi	r22, 0x88	; 136
    393e:	70 e2       	ldi	r23, 0x20	; 32
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
    3948:	e5 c2       	rjmp	.+1482   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						}
						else
						{
							SetLCD(1," No             ");
    394a:	69 e9       	ldi	r22, 0x99	; 153
    394c:	70 e2       	ldi	r23, 0x20	; 32
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
    3956:	de c2       	rjmp	.+1468   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						}
					}
					break;
					case SYSTEMMODE:
					{
						if (TextStringPtr>5)
    3958:	86 30       	cpi	r24, 0x06	; 6
    395a:	18 f0       	brcs	.+6      	; 0x3962 <__DATA_REGION_LENGTH__+0x1962>
							TextStringPtr=0;
    395c:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>
    3960:	09 c0       	rjmp	.+18     	; 0x3974 <__DATA_REGION_LENGTH__+0x1974>

						if (!CardInserted)
    3962:	90 91 6d 22 	lds	r25, 0x226D	; 0x80226d <CardInserted>
    3966:	91 11       	cpse	r25, r1
    3968:	05 c0       	rjmp	.+10     	; 0x3974 <__DATA_REGION_LENGTH__+0x1974>
						{
							if (TextStringPtr==3)
    396a:	83 30       	cpi	r24, 0x03	; 3
    396c:	19 f4       	brne	.+6      	; 0x3974 <__DATA_REGION_LENGTH__+0x1974>
								TextStringPtr=5;
    396e:	85 e0       	ldi	r24, 0x05	; 5
    3970:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
						}
						SetLCD(0,"\x80");										
    3974:	61 e5       	ldi	r22, 0x51	; 81
    3976:	70 e2       	ldi	r23, 0x20	; 32
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						SetLCD(1,SystemTextString[TextStringPtr]);
    3980:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3984:	21 e1       	ldi	r18, 0x11	; 17
    3986:	62 9f       	mul	r22, r18
    3988:	b0 01       	movw	r22, r0
    398a:	11 24       	eor	r1, r1
    398c:	6f 55       	subi	r22, 0x5F	; 95
    398e:	72 4d       	sbci	r23, 0xD2	; 210
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
						switch (TextStringPtr)
    3998:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    399c:	88 23       	and	r24, r24
    399e:	19 f0       	breq	.+6      	; 0x39a6 <__DATA_REGION_LENGTH__+0x19a6>
    39a0:	85 30       	cpi	r24, 0x05	; 5
    39a2:	21 f0       	breq	.+8      	; 0x39ac <__DATA_REGION_LENGTH__+0x19ac>
    39a4:	10 c0       	rjmp	.+32     	; 0x39c6 <__DATA_REGION_LENGTH__+0x19c6>
						{
							case 0:
							{
								ShowConfig();
    39a6:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <ShowConfig>
							}
							break;
    39aa:	b4 c2       	rjmp	.+1384   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
							case 5:
							{
								SetLCD(0,"\xC0");
    39ac:	6f e2       	ldi	r22, 0x2F	; 47
    39ae:	70 e2       	ldi	r23, 0x20	; 32
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
								SetLCD(1,IDString);
    39b8:	60 e0       	ldi	r22, 0x00	; 0
    39ba:	70 e2       	ldi	r23, 0x20	; 32
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
							}
							break;
    39c4:	a7 c2       	rjmp	.+1358   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
							default:
							{
								SetLCD(0,"\xC0");
    39c6:	6f e2       	ldi	r22, 0x2F	; 47
    39c8:	70 e2       	ldi	r23, 0x20	; 32
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
								SetLCD(1,"Press Enter/Esc ");
    39d2:	65 ec       	ldi	r22, 0xC5	; 197
    39d4:	70 e2       	ldi	r23, 0x20	; 32
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
							}
							break;
    39de:	9a c2       	rjmp	.+1332   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			}
		}
		break;
		case LEFT:
		{
			if (EventOn)
    39e0:	01 2b       	or	r16, r17
    39e2:	09 f0       	breq	.+2      	; 0x39e6 <__DATA_REGION_LENGTH__+0x19e6>
    39e4:	97 c2       	rjmp	.+1326   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			{
				switch (OperatingMode)
    39e6:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    39ea:	82 30       	cpi	r24, 0x02	; 2
    39ec:	09 f0       	breq	.+2      	; 0x39f0 <__DATA_REGION_LENGTH__+0x19f0>
    39ee:	92 c2       	rjmp	.+1316   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					{
					}
					break;
					case MASTERMODE:
					{
						if (ConsoleMasterSettings[4])
    39f0:	80 91 92 2b 	lds	r24, 0x2B92	; 0x802b92 <ConsoleMasterSettings+0x4>
    39f4:	88 23       	and	r24, r24
    39f6:	09 f4       	brne	.+2      	; 0x39fa <__DATA_REGION_LENGTH__+0x19fa>
    39f8:	8d c2       	rjmp	.+1306   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
						{
							unsigned char cntByte;

							ConsoleMasterSettings[TextStringPtr] = 0;
    39fa:	e0 91 81 22 	lds	r30, 0x2281	; 0x802281 <TextStringPtr>
    39fe:	f0 e0       	ldi	r31, 0x00	; 0
    3a00:	e2 57       	subi	r30, 0x72	; 114
    3a02:	f4 4d       	sbci	r31, 0xD4	; 212
    3a04:	10 82       	st	Z, r1
							SetLCD(0,"\xC0");
    3a06:	6f e2       	ldi	r22, 0x2F	; 47
    3a08:	70 e2       	ldi	r23, 0x20	; 32
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
							SetLCD(1," No             ");
    3a12:	69 e9       	ldi	r22, 0x99	; 153
    3a14:	70 e2       	ldi	r23, 0x20	; 32
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
							switch (TextStringPtr)
    3a1e:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3a22:	82 30       	cpi	r24, 0x02	; 2
    3a24:	18 f0       	brcs	.+6      	; 0x3a2c <__DATA_REGION_LENGTH__+0x1a2c>
    3a26:	82 30       	cpi	r24, 0x02	; 2
    3a28:	21 f0       	breq	.+8      	; 0x3a32 <__DATA_REGION_LENGTH__+0x1a32>
    3a2a:	33 c0       	rjmp	.+102    	; 0x3a92 <__DATA_REGION_LENGTH__+0x1a92>
							{
								case AUTOCUERESET:
								case CUETOCRM:
								{
									CueControl();
    3a2c:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>
								}
								break;
    3a30:	30 c0       	rjmp	.+96     	; 0x3a92 <__DATA_REGION_LENGTH__+0x1a92>
								case AUTOCOM:
								{
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    3a32:	e0 ea       	ldi	r30, 0xA0	; 160
    3a34:	f2 e2       	ldi	r31, 0x22	; 34
    3a36:	80 89       	ldd	r24, Z+16	; 0x10
    3a38:	87 7f       	andi	r24, 0xF7	; 247
    3a3a:	80 8b       	std	Z+16, r24	; 0x10
									if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][ANNMIC]) && (ConsoleFunctionData[Module]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    3a3c:	2e 2d       	mov	r18, r14
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	f9 01       	movw	r30, r18
    3a42:	ee 0f       	add	r30, r30
    3a44:	ff 1f       	adc	r31, r31
    3a46:	ee 0f       	add	r30, r30
    3a48:	ff 1f       	adc	r31, r31
    3a4a:	ee 0f       	add	r30, r30
    3a4c:	ff 1f       	adc	r31, r31
    3a4e:	e5 5f       	subi	r30, 0xF5	; 245
    3a50:	f4 4d       	sbci	r31, 0xD4	; 212
    3a52:	97 81       	ldd	r25, Z+7	; 0x07
    3a54:	99 23       	and	r25, r25
    3a56:	c4 f4       	brge	.+48     	; 0x3a88 <__DATA_REGION_LENGTH__+0x1a88>
    3a58:	9d e1       	ldi	r25, 0x1D	; 29
    3a5a:	92 9f       	mul	r25, r18
    3a5c:	f0 01       	movw	r30, r0
    3a5e:	93 9f       	mul	r25, r19
    3a60:	f0 0d       	add	r31, r0
    3a62:	11 24       	eor	r1, r1
    3a64:	e5 5e       	subi	r30, 0xE5	; 229
    3a66:	f7 4c       	sbci	r31, 0xC7	; 199
    3a68:	96 85       	ldd	r25, Z+14	; 0x0e
    3a6a:	99 23       	and	r25, r25
    3a6c:	69 f0       	breq	.+26     	; 0x3a88 <__DATA_REGION_LENGTH__+0x1a88>
    3a6e:	f9 01       	movw	r30, r18
    3a70:	e0 56       	subi	r30, 0x60	; 96
    3a72:	fd 4d       	sbci	r31, 0xDD	; 221
    3a74:	90 81       	ld	r25, Z
    3a76:	94 ff       	sbrs	r25, 4
    3a78:	07 c0       	rjmp	.+14     	; 0x3a88 <__DATA_REGION_LENGTH__+0x1a88>
    3a7a:	90 91 90 2b 	lds	r25, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    3a7e:	99 23       	and	r25, r25
    3a80:	19 f0       	breq	.+6      	; 0x3a88 <__DATA_REGION_LENGTH__+0x1a88>
									{
										ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    3a82:	88 60       	ori	r24, 0x08	; 8
    3a84:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <ConsoleFunctionData+0x10>
									}
   								CheckTBMic();
    3a88:	0e 94 5d 03 	call	0x6ba	; 0x6ba <CheckTBMic>
									SendSerialData = 1;
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
								}
								break;
							}
	
							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    3a92:	20 91 82 22 	lds	r18, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3a96:	e2 2f       	mov	r30, r18
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    3a9a:	eb 53       	subi	r30, 0x3B	; 59
    3a9c:	fc 4d       	sbci	r31, 0xDC	; 220
    3a9e:	84 e9       	ldi	r24, 0x94	; 148
    3aa0:	80 83       	st	Z, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3aa2:	82 e0       	ldi	r24, 0x02	; 2
    3aa4:	82 0f       	add	r24, r18
    3aa6:	e1 e0       	ldi	r30, 0x01	; 1
    3aa8:	e2 0f       	add	r30, r18
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	eb 53       	subi	r30, 0x3B	; 59
    3aae:	fc 4d       	sbci	r31, 0xDC	; 220
    3ab0:	10 82       	st	Z, r1
    3ab2:	ae e8       	ldi	r26, 0x8E	; 142
    3ab4:	bb e2       	ldi	r27, 0x2B	; 43
    3ab6:	29 5f       	subi	r18, 0xF9	; 249
							for (cntByte=0; cntByte<5; cntByte++)
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    3ab8:	9d 91       	ld	r25, X+
    3aba:	e8 2f       	mov	r30, r24
    3abc:	f0 e0       	ldi	r31, 0x00	; 0
    3abe:	eb 53       	subi	r30, 0x3B	; 59
    3ac0:	fc 4d       	sbci	r31, 0xDC	; 220
    3ac2:	9f 77       	andi	r25, 0x7F	; 127
    3ac4:	90 83       	st	Z, r25
    3ac6:	8f 5f       	subi	r24, 0xFF	; 255
								break;
							}
	
							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
							for (cntByte=0; cntByte<5; cntByte++)
    3ac8:	28 13       	cpse	r18, r24
    3aca:	f6 cf       	rjmp	.-20     	; 0x3ab8 <__DATA_REGION_LENGTH__+0x1ab8>
    3acc:	20 93 82 22 	sts	0x2282, r18	; 0x802282 <SerialBufferOutPtrTop>
    3ad0:	21 c2       	rjmp	.+1090   	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
    3ad2:	00 ea       	ldi	r16, 0xA0	; 160
    3ad4:	12 e2       	ldi	r17, 0x22	; 34
    3ad6:	0f 2e       	mov	r0, r31
    3ad8:	f0 e7       	ldi	r31, 0x70	; 112
    3ada:	ef 2e       	mov	r14, r31
    3adc:	f2 e2       	ldi	r31, 0x22	; 34
    3ade:	ff 2e       	mov	r15, r31
    3ae0:	f0 2d       	mov	r31, r0
	if ((Event&0x287) == EXT_MUTE)
	{
		EventType = MUTE;
	}

	switch (EventType)
    3ae2:	d1 2c       	mov	r13, r1
				if (ModuleType[cntModule] == TELCO)
				{
					char TelcoNr = GetTelcoNrFromModuleNr(cntModule);
					if ((TelcoNr>=0) && (TelcoNr<4))
					{
						SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    3ae4:	0f 2e       	mov	r0, r31
    3ae6:	f2 ec       	ldi	r31, 0xC2	; 194
    3ae8:	cf 2e       	mov	r12, r31
    3aea:	f0 2d       	mov	r31, r0
			unsigned char cntModule;

			for (cntModule=0; cntModule<NROFMODULES; cntModule++)
			{
				ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
				ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    3aec:	d8 01       	movw	r26, r16
    3aee:	8c 91       	ld	r24, X
    3af0:	83 7f       	andi	r24, 0xF3	; 243
    3af2:	f8 01       	movw	r30, r16
    3af4:	81 93       	st	Z+, r24
    3af6:	8f 01       	movw	r16, r30

				if (ModuleType[cntModule] == TELCO)
    3af8:	d7 01       	movw	r26, r14
    3afa:	8d 91       	ld	r24, X+
    3afc:	7d 01       	movw	r14, r26
    3afe:	82 30       	cpi	r24, 0x02	; 2
    3b00:	d9 f4       	brne	.+54     	; 0x3b38 <__DATA_REGION_LENGTH__+0x1b38>
				{
					char TelcoNr = GetTelcoNrFromModuleNr(cntModule);
    3b02:	8d 2d       	mov	r24, r13
    3b04:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <GetTelcoNrFromModuleNr>
					if ((TelcoNr>=0) && (TelcoNr<4))
    3b08:	84 30       	cpi	r24, 0x04	; 4
    3b0a:	b0 f4       	brcc	.+44     	; 0x3b38 <__DATA_REGION_LENGTH__+0x1b38>
					{
						SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    3b0c:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3b10:	ae 2f       	mov	r26, r30
    3b12:	b0 e0       	ldi	r27, 0x00	; 0
    3b14:	ab 53       	subi	r26, 0x3B	; 59
    3b16:	bc 4d       	sbci	r27, 0xDC	; 220
    3b18:	cc 92       	st	X, r12
						SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    3b1a:	a1 e0       	ldi	r26, 0x01	; 1
    3b1c:	ae 0f       	add	r26, r30
    3b1e:	b0 e0       	ldi	r27, 0x00	; 0
    3b20:	ab 53       	subi	r26, 0x3B	; 59
    3b22:	bc 4d       	sbci	r27, 0xDC	; 220
    3b24:	8c 93       	st	X, r24
						SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3b26:	83 e0       	ldi	r24, 0x03	; 3
    3b28:	8e 0f       	add	r24, r30
    3b2a:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    3b2e:	ee 5f       	subi	r30, 0xFE	; 254
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	eb 53       	subi	r30, 0x3B	; 59
    3b34:	fc 4d       	sbci	r31, 0xDC	; 220
    3b36:	10 82       	st	Z, r1
		break;
		case CUERESET:
		{
			unsigned char cntModule;

			for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    3b38:	d3 94       	inc	r13
    3b3a:	b0 e1       	ldi	r27, 0x10	; 16
    3b3c:	db 12       	cpse	r13, r27
    3b3e:	d6 cf       	rjmp	.-84     	; 0x3aec <__DATA_REGION_LENGTH__+0x1aec>
						SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
						SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
					}
				}
			}
			CueControl();
    3b40:	0e 94 10 08 	call	0x1020	; 0x1020 <CueControl>
			DJControl();
    3b44:	0e 94 ee 03 	call	0x7dc	; 0x7dc <DJControl>
			StudioMicControl();
    3b48:	0e 94 5e 03 	call	0x6bc	; 0x6bc <StudioMicControl>
			CheckStartCondition(cntModule);
    3b4c:	80 e1       	ldi	r24, 0x10	; 16
    3b4e:	0e 94 38 06 	call	0xc70	; 0xc70 <CheckStartCondition>

			SendSerialData = 1;
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
 		}
		break;
    3b58:	dd c1       	rjmp	.+954    	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
		case SW_CC:
		{
			if (EventOn)
    3b5a:	01 2b       	or	r16, r17
    3b5c:	09 f0       	breq	.+2      	; 0x3b60 <__DATA_REGION_LENGTH__+0x1b60>
    3b5e:	86 c0       	rjmp	.+268    	; 0x3c6c <__DATA_REGION_LENGTH__+0x1c6c>
			{
				ConsoleFunctionData[16] &= NOT_POWER_ON_CC^0xFF;
    3b60:	e0 ea       	ldi	r30, 0xA0	; 160
    3b62:	f2 e2       	ldi	r31, 0x22	; 34
    3b64:	80 89       	ldd	r24, Z+16	; 0x10
    3b66:	8f 7b       	andi	r24, 0xBF	; 191
    3b68:	80 8b       	std	Z+16, r24	; 0x10
				SetConsoleData();
    3b6a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <SetConsoleData>
				Delay(5);
    3b6e:	85 e0       	ldi	r24, 0x05	; 5
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Delay>
				// CS_CC = 0xFF;   // willem
				Delay(5);
    3b76:	85 e0       	ldi	r24, 0x05	; 5
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Delay>
				CardInserted = 1;
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	80 93 6d 22 	sts	0x226D, r24	; 0x80226d <CardInserted>
				SetAddress(I2CAddressSmartCard, 0x00);
    3b84:	60 e0       	ldi	r22, 0x00	; 0
    3b86:	70 e0       	ldi	r23, 0x00	; 0
    3b88:	80 e5       	ldi	r24, 0x50	; 80
    3b8a:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <SetAddress>
				if (CardInserted)
    3b8e:	80 91 6d 22 	lds	r24, 0x226D	; 0x80226d <CardInserted>
    3b92:	88 23       	and	r24, r24
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <__DATA_REGION_LENGTH__+0x1b98>
    3b96:	66 c0       	rjmp	.+204    	; 0x3c64 <__DATA_REGION_LENGTH__+0x1c64>
				{
					unsigned int Address;
					unsigned char cntByte;

					OperatingMode = SYSTEMMODE;
    3b98:	83 e0       	ldi	r24, 0x03	; 3
    3b9a:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <OperatingMode>
					TextStringPtr = 3;
    3b9e:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
					SetLCD(0,"\x80");
    3ba2:	61 e5       	ldi	r22, 0x51	; 81
    3ba4:	70 e2       	ldi	r23, 0x20	; 32
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(1,SystemTextString[TextStringPtr]);
    3bae:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3bb2:	e1 e1       	ldi	r30, 0x11	; 17
    3bb4:	6e 9f       	mul	r22, r30
    3bb6:	b0 01       	movw	r22, r0
    3bb8:	11 24       	eor	r1, r1
    3bba:	6f 55       	subi	r22, 0x5F	; 95
    3bbc:	72 4d       	sbci	r23, 0xD2	; 210
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(0,"\xC0");
    3bc6:	6f e2       	ldi	r22, 0x2F	; 47
    3bc8:	70 e2       	ldi	r23, 0x20	; 32
    3bca:	80 e0       	ldi	r24, 0x00	; 0
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(1,"Press Enter/Esc ");
    3bd2:	65 ec       	ldi	r22, 0xC5	; 197
    3bd4:	70 e2       	ldi	r23, 0x20	; 32
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>

					SerialBufferOut[SerialBufferOutPtrTop++] = CARD_INSERTED;
    3bde:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3be2:	ae 2f       	mov	r26, r30
    3be4:	b0 e0       	ldi	r27, 0x00	; 0
    3be6:	ab 53       	subi	r26, 0x3B	; 59
    3be8:	bc 4d       	sbci	r27, 0xDC	; 220
    3bea:	88 e9       	ldi	r24, 0x98	; 152
    3bec:	8c 93       	st	X, r24
					SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3bee:	a1 e0       	ldi	r26, 0x01	; 1
    3bf0:	ae 0f       	add	r26, r30
    3bf2:	b0 e0       	ldi	r27, 0x00	; 0
    3bf4:	ab 53       	subi	r26, 0x3B	; 59
    3bf6:	bc 4d       	sbci	r27, 0xDC	; 220
    3bf8:	1c 92       	st	X, r1
					SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    3bfa:	83 e0       	ldi	r24, 0x03	; 3
    3bfc:	8e 0f       	add	r24, r30
    3bfe:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    3c02:	ee 5f       	subi	r30, 0xFE	; 254
    3c04:	f0 e0       	ldi	r31, 0x00	; 0
    3c06:	eb 53       	subi	r30, 0x3B	; 59
    3c08:	fc 4d       	sbci	r31, 0xDC	; 220
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	80 83       	st	Z, r24
				
					TempEnableSetup = ConsoleMasterSettings[4];
    3c0e:	80 91 92 2b 	lds	r24, 0x2B92	; 0x802b92 <ConsoleMasterSettings+0x4>
    3c12:	80 93 0a 27 	sts	0x270A, r24	; 0x80270a <TempEnableSetup>
					Address = NROFMODULES + (NROFMODULES*29) + 4;
					ReadData(I2CAddressSmartCard, Address, &(ConsoleMasterSettings[4]), 1);
    3c16:	21 e0       	ldi	r18, 0x01	; 1
    3c18:	42 e9       	ldi	r20, 0x92	; 146
    3c1a:	5b e2       	ldi	r21, 0x2B	; 43
    3c1c:	64 ee       	ldi	r22, 0xE4	; 228
    3c1e:	71 e0       	ldi	r23, 0x01	; 1
    3c20:	80 e5       	ldi	r24, 0x50	; 80
    3c22:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <ReadData>

					SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    3c26:	20 91 82 22 	lds	r18, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3c2a:	e2 2f       	mov	r30, r18
    3c2c:	f0 e0       	ldi	r31, 0x00	; 0
    3c2e:	eb 53       	subi	r30, 0x3B	; 59
    3c30:	fc 4d       	sbci	r31, 0xDC	; 220
    3c32:	84 e9       	ldi	r24, 0x94	; 148
    3c34:	80 83       	st	Z, r24
					SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3c36:	82 e0       	ldi	r24, 0x02	; 2
    3c38:	82 0f       	add	r24, r18
    3c3a:	e1 e0       	ldi	r30, 0x01	; 1
    3c3c:	e2 0f       	add	r30, r18
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	eb 53       	subi	r30, 0x3B	; 59
    3c42:	fc 4d       	sbci	r31, 0xDC	; 220
    3c44:	10 82       	st	Z, r1
    3c46:	ae e8       	ldi	r26, 0x8E	; 142
    3c48:	bb e2       	ldi	r27, 0x2B	; 43
    3c4a:	29 5f       	subi	r18, 0xF9	; 249
					for (cntByte=0; cntByte<5; cntByte++)
					{
						SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    3c4c:	9d 91       	ld	r25, X+
    3c4e:	e8 2f       	mov	r30, r24
    3c50:	f0 e0       	ldi	r31, 0x00	; 0
    3c52:	eb 53       	subi	r30, 0x3B	; 59
    3c54:	fc 4d       	sbci	r31, 0xDC	; 220
    3c56:	9f 77       	andi	r25, 0x7F	; 127
    3c58:	90 83       	st	Z, r25
    3c5a:	8f 5f       	subi	r24, 0xFF	; 255
					Address = NROFMODULES + (NROFMODULES*29) + 4;
					ReadData(I2CAddressSmartCard, Address, &(ConsoleMasterSettings[4]), 1);

					SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
					SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
					for (cntByte=0; cntByte<5; cntByte++)
    3c5c:	82 13       	cpse	r24, r18
    3c5e:	f6 cf       	rjmp	.-20     	; 0x3c4c <__DATA_REGION_LENGTH__+0x1c4c>
    3c60:	20 93 82 22 	sts	0x2282, r18	; 0x802282 <SerialBufferOutPtrTop>
					{
						SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
					}
				}
				SendSerialData = 1;
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    3c6a:	54 c1       	rjmp	.+680    	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			}
			else
			{
				unsigned char cntByte;

				CardInserted = 0;
    3c6c:	10 92 6d 22 	sts	0x226D, r1	; 0x80226d <CardInserted>

				SerialBufferOut[SerialBufferOutPtrTop++] = CARD_INSERTED;
    3c70:	90 91 82 22 	lds	r25, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3c74:	e9 2f       	mov	r30, r25
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	eb 53       	subi	r30, 0x3B	; 59
    3c7a:	fc 4d       	sbci	r31, 0xDC	; 220
    3c7c:	88 e9       	ldi	r24, 0x98	; 152
    3c7e:	80 83       	st	Z, r24
				SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3c80:	e1 e0       	ldi	r30, 0x01	; 1
    3c82:	e9 0f       	add	r30, r25
    3c84:	f0 e0       	ldi	r31, 0x00	; 0
    3c86:	eb 53       	subi	r30, 0x3B	; 59
    3c88:	fc 4d       	sbci	r31, 0xDC	; 220
    3c8a:	10 82       	st	Z, r1
				SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3c8c:	e2 e0       	ldi	r30, 0x02	; 2
    3c8e:	e9 0f       	add	r30, r25
    3c90:	f0 e0       	ldi	r31, 0x00	; 0
    3c92:	eb 53       	subi	r30, 0x3B	; 59
    3c94:	fc 4d       	sbci	r31, 0xDC	; 220
    3c96:	10 82       	st	Z, r1

				ConsoleMasterSettings[4] = TempEnableSetup; 
    3c98:	80 91 0a 27 	lds	r24, 0x270A	; 0x80270a <TempEnableSetup>
    3c9c:	80 93 92 2b 	sts	0x2B92, r24	; 0x802b92 <ConsoleMasterSettings+0x4>

				SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    3ca0:	e3 e0       	ldi	r30, 0x03	; 3
    3ca2:	e9 0f       	add	r30, r25
    3ca4:	f0 e0       	ldi	r31, 0x00	; 0
    3ca6:	eb 53       	subi	r30, 0x3B	; 59
    3ca8:	fc 4d       	sbci	r31, 0xDC	; 220
    3caa:	84 e9       	ldi	r24, 0x94	; 148
    3cac:	80 83       	st	Z, r24
				SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3cae:	85 e0       	ldi	r24, 0x05	; 5
    3cb0:	89 0f       	add	r24, r25
    3cb2:	e4 e0       	ldi	r30, 0x04	; 4
    3cb4:	e9 0f       	add	r30, r25
    3cb6:	f0 e0       	ldi	r31, 0x00	; 0
    3cb8:	eb 53       	subi	r30, 0x3B	; 59
    3cba:	fc 4d       	sbci	r31, 0xDC	; 220
    3cbc:	10 82       	st	Z, r1
    3cbe:	ae e8       	ldi	r26, 0x8E	; 142
    3cc0:	bb e2       	ldi	r27, 0x2B	; 43
    3cc2:	2a e0       	ldi	r18, 0x0A	; 10
    3cc4:	29 0f       	add	r18, r25
				for (cntByte=0; cntByte<5; cntByte++)
				{
					SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    3cc6:	9d 91       	ld	r25, X+
    3cc8:	e8 2f       	mov	r30, r24
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	eb 53       	subi	r30, 0x3B	; 59
    3cce:	fc 4d       	sbci	r31, 0xDC	; 220
    3cd0:	9f 77       	andi	r25, 0x7F	; 127
    3cd2:	90 83       	st	Z, r25
    3cd4:	8f 5f       	subi	r24, 0xFF	; 255

				ConsoleMasterSettings[4] = TempEnableSetup; 

				SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
				SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
				for (cntByte=0; cntByte<5; cntByte++)
    3cd6:	28 13       	cpse	r18, r24
    3cd8:	f6 cf       	rjmp	.-20     	; 0x3cc6 <__DATA_REGION_LENGTH__+0x1cc6>
    3cda:	20 93 82 22 	sts	0x2282, r18	; 0x802282 <SerialBufferOutPtrTop>
				{
					SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
				}

				ConsoleFunctionData[16] |= NOT_POWER_ON_CC;
    3cde:	e0 ea       	ldi	r30, 0xA0	; 160
    3ce0:	f2 e2       	ldi	r31, 0x22	; 34
    3ce2:	80 89       	ldd	r24, Z+16	; 0x10
    3ce4:	80 64       	ori	r24, 0x40	; 64
    3ce6:	80 8b       	std	Z+16, r24	; 0x10
				SendSerialData = 1;
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
				// CS_CC = 0x00;   willem
				if ((OperatingMode == SYSTEMMODE) && ((TextStringPtr==3) || ((TextStringPtr==4))))
    3cee:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    3cf2:	83 30       	cpi	r24, 0x03	; 3
    3cf4:	09 f0       	breq	.+2      	; 0x3cf8 <__DATA_REGION_LENGTH__+0x1cf8>
    3cf6:	0e c1       	rjmp	.+540    	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
    3cf8:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3cfc:	83 50       	subi	r24, 0x03	; 3
    3cfe:	82 30       	cpi	r24, 0x02	; 2
    3d00:	08 f0       	brcs	.+2      	; 0x3d04 <__DATA_REGION_LENGTH__+0x1d04>
    3d02:	08 c1       	rjmp	.+528    	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
				{
					char TextBuffer[9];

					OperatingMode = NORMALMODE;
    3d04:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <OperatingMode>
					TextStringPtr = 0;
    3d08:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>

					SetLCD(0,"\x80");
    3d0c:	61 e5       	ldi	r22, 0x51	; 81
    3d0e:	70 e2       	ldi	r23, 0x20	; 32
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(1,"                ");
    3d18:	64 e6       	ldi	r22, 0x64	; 100
    3d1a:	70 e2       	ldi	r23, 0x20	; 32
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(0,"\xC0");
    3d24:	6f e2       	ldi	r22, 0x2F	; 47
    3d26:	70 e2       	ldi	r23, 0x20	; 32
    3d28:	80 e0       	ldi	r24, 0x00	; 0
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(1, TextString[TextStringPtr]);
    3d30:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3d34:	f1 e1       	ldi	r31, 0x11	; 17
    3d36:	6f 9f       	mul	r22, r31
    3d38:	b0 01       	movw	r22, r0
    3d3a:	11 24       	eor	r1, r1
    3d3c:	6a 5d       	subi	r22, 0xDA	; 218
    3d3e:	7d 4d       	sbci	r23, 0xDD	; 221
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>

					TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    3d48:	e6 e1       	ldi	r30, 0x16	; 22
    3d4a:	fa e3       	ldi	r31, 0x3A	; 58
    3d4c:	23 81       	ldd	r18, Z+3	; 0x03
    3d4e:	8d ec       	ldi	r24, 0xCD	; 205
    3d50:	28 9f       	mul	r18, r24
    3d52:	91 2d       	mov	r25, r1
    3d54:	11 24       	eor	r1, r1
    3d56:	96 95       	lsr	r25
    3d58:	96 95       	lsr	r25
    3d5a:	96 95       	lsr	r25
    3d5c:	30 e3       	ldi	r19, 0x30	; 48
    3d5e:	39 0f       	add	r19, r25
    3d60:	39 83       	std	Y+1, r19	; 0x01
					TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    3d62:	99 0f       	add	r25, r25
    3d64:	39 2f       	mov	r19, r25
    3d66:	33 0f       	add	r19, r19
    3d68:	33 0f       	add	r19, r19
    3d6a:	93 0f       	add	r25, r19
    3d6c:	29 1b       	sub	r18, r25
    3d6e:	92 2f       	mov	r25, r18
    3d70:	90 5d       	subi	r25, 0xD0	; 208
    3d72:	9a 83       	std	Y+2, r25	; 0x02
					TextBuffer[2] = ':';
    3d74:	4a e3       	ldi	r20, 0x3A	; 58
    3d76:	4b 83       	std	Y+3, r20	; 0x03
				  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    3d78:	22 81       	ldd	r18, Z+2	; 0x02
    3d7a:	28 9f       	mul	r18, r24
    3d7c:	91 2d       	mov	r25, r1
    3d7e:	11 24       	eor	r1, r1
    3d80:	96 95       	lsr	r25
    3d82:	96 95       	lsr	r25
    3d84:	96 95       	lsr	r25
    3d86:	30 e3       	ldi	r19, 0x30	; 48
    3d88:	39 0f       	add	r19, r25
    3d8a:	3c 83       	std	Y+4, r19	; 0x04
					TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    3d8c:	99 0f       	add	r25, r25
    3d8e:	39 2f       	mov	r19, r25
    3d90:	33 0f       	add	r19, r19
    3d92:	33 0f       	add	r19, r19
    3d94:	93 0f       	add	r25, r19
    3d96:	29 1b       	sub	r18, r25
    3d98:	92 2f       	mov	r25, r18
    3d9a:	90 5d       	subi	r25, 0xD0	; 208
    3d9c:	9d 83       	std	Y+5, r25	; 0x05
					TextBuffer[5] = ':';
    3d9e:	4e 83       	std	Y+6, r20	; 0x06
					TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    3da0:	91 81       	ldd	r25, Z+1	; 0x01
    3da2:	98 9f       	mul	r25, r24
    3da4:	81 2d       	mov	r24, r1
    3da6:	11 24       	eor	r1, r1
    3da8:	86 95       	lsr	r24
    3daa:	86 95       	lsr	r24
    3dac:	86 95       	lsr	r24
    3dae:	20 e3       	ldi	r18, 0x30	; 48
    3db0:	28 0f       	add	r18, r24
    3db2:	2f 83       	std	Y+7, r18	; 0x07
					TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    3db4:	88 0f       	add	r24, r24
    3db6:	28 2f       	mov	r18, r24
    3db8:	22 0f       	add	r18, r18
    3dba:	22 0f       	add	r18, r18
    3dbc:	82 0f       	add	r24, r18
    3dbe:	98 1b       	sub	r25, r24
    3dc0:	89 2f       	mov	r24, r25
    3dc2:	80 5d       	subi	r24, 0xD0	; 208
    3dc4:	88 87       	std	Y+8, r24	; 0x08
/*					TextBuffer[8] = ':';
					TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
					TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
					TextBuffer[11] = 0;*/
					TextBuffer[8] = 0;
    3dc6:	19 86       	std	Y+9, r1	; 0x09
					SetLCD(0,"\x84");
    3dc8:	65 e7       	ldi	r22, 0x75	; 117
    3dca:	70 e2       	ldi	r23, 0x20	; 32
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
					SetLCD(1,TextBuffer);
    3dd4:	be 01       	movw	r22, r28
    3dd6:	6f 5f       	subi	r22, 0xFF	; 255
    3dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
    3de2:	98 c0       	rjmp	.+304    	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			}
		}
		break;
		case MUTE:
		{
			char TelcoNr = GetTelcoNrFromModuleNr(Module);
    3de4:	8e 2d       	mov	r24, r14
    3de6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <GetTelcoNrFromModuleNr>
			
			if (ConsoleFunctionData[Module]&ON_LED)
    3dea:	ae 2d       	mov	r26, r14
    3dec:	b0 e0       	ldi	r27, 0x00	; 0
    3dee:	fd 01       	movw	r30, r26
    3df0:	e0 56       	subi	r30, 0x60	; 96
    3df2:	fd 4d       	sbci	r31, 0xDD	; 221
    3df4:	90 81       	ld	r25, Z
    3df6:	95 ff       	sbrs	r25, 5
    3df8:	8d c0       	rjmp	.+282    	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
			{
				if (EventOn)
    3dfa:	01 2b       	or	r16, r17
    3dfc:	31 f5       	brne	.+76     	; 0x3e4a <__DATA_REGION_LENGTH__+0x1e4a>
				{
						ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    3dfe:	fd 01       	movw	r30, r26
    3e00:	e0 56       	subi	r30, 0x60	; 96
    3e02:	fd 4d       	sbci	r31, 0xDD	; 221
    3e04:	90 61       	ori	r25, 0x10	; 16
    3e06:	90 83       	st	Z, r25
						cntMuteFunction[Module] = 0;
    3e08:	af 56       	subi	r26, 0x6F	; 111
    3e0a:	b2 4d       	sbci	r27, 0xD2	; 210
    3e0c:	1c 92       	st	X, r1
	
						if ((TelcoNr>=0) && (TelcoNr<4))
    3e0e:	84 30       	cpi	r24, 0x04	; 4
    3e10:	c0 f4       	brcc	.+48     	; 0x3e42 <__DATA_REGION_LENGTH__+0x1e42>
						{
							SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_MUTE;
    3e12:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3e16:	ae 2f       	mov	r26, r30
    3e18:	b0 e0       	ldi	r27, 0x00	; 0
    3e1a:	ab 53       	subi	r26, 0x3B	; 59
    3e1c:	bc 4d       	sbci	r27, 0xDC	; 220
    3e1e:	93 ec       	ldi	r25, 0xC3	; 195
    3e20:	9c 93       	st	X, r25
							SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    3e22:	a1 e0       	ldi	r26, 0x01	; 1
    3e24:	ae 0f       	add	r26, r30
    3e26:	b0 e0       	ldi	r27, 0x00	; 0
    3e28:	ab 53       	subi	r26, 0x3B	; 59
    3e2a:	bc 4d       	sbci	r27, 0xDC	; 220
    3e2c:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    3e2e:	83 e0       	ldi	r24, 0x03	; 3
    3e30:	8e 0f       	add	r24, r30
    3e32:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    3e36:	ee 5f       	subi	r30, 0xFE	; 254
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	eb 53       	subi	r30, 0x3B	; 59
    3e3c:	fc 4d       	sbci	r31, 0xDC	; 220
    3e3e:	81 e0       	ldi	r24, 0x01	; 1
    3e40:	80 83       	st	Z, r24
						}
	
						SendSerialData = 1;
    3e42:	81 e0       	ldi	r24, 0x01	; 1
    3e44:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    3e48:	65 c0       	rjmp	.+202    	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
				}
				else
				{
					if (cntMuteFunction[Module] == 0)
    3e4a:	fd 01       	movw	r30, r26
    3e4c:	ef 56       	subi	r30, 0x6F	; 111
    3e4e:	f2 4d       	sbci	r31, 0xD2	; 210
    3e50:	20 81       	ld	r18, Z
    3e52:	21 11       	cpse	r18, r1
    3e54:	5f c0       	rjmp	.+190    	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
					{
							ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    3e56:	a0 56       	subi	r26, 0x60	; 96
    3e58:	bd 4d       	sbci	r27, 0xDD	; 221
    3e5a:	9f 7e       	andi	r25, 0xEF	; 239
    3e5c:	9c 93       	st	X, r25
	
							if ((TelcoNr>=0) && (TelcoNr<4))
    3e5e:	84 30       	cpi	r24, 0x04	; 4
    3e60:	b8 f4       	brcc	.+46     	; 0x3e90 <__DATA_REGION_LENGTH__+0x1e90>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_MUTE;
    3e62:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3e66:	ae 2f       	mov	r26, r30
    3e68:	b0 e0       	ldi	r27, 0x00	; 0
    3e6a:	ab 53       	subi	r26, 0x3B	; 59
    3e6c:	bc 4d       	sbci	r27, 0xDC	; 220
    3e6e:	93 ec       	ldi	r25, 0xC3	; 195
    3e70:	9c 93       	st	X, r25
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    3e72:	a1 e0       	ldi	r26, 0x01	; 1
    3e74:	ae 0f       	add	r26, r30
    3e76:	b0 e0       	ldi	r27, 0x00	; 0
    3e78:	ab 53       	subi	r26, 0x3B	; 59
    3e7a:	bc 4d       	sbci	r27, 0xDC	; 220
    3e7c:	8c 93       	st	X, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3e7e:	83 e0       	ldi	r24, 0x03	; 3
    3e80:	8e 0f       	add	r24, r30
    3e82:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    3e86:	ee 5f       	subi	r30, 0xFE	; 254
    3e88:	f0 e0       	ldi	r31, 0x00	; 0
    3e8a:	eb 53       	subi	r30, 0x3B	; 59
    3e8c:	fc 4d       	sbci	r31, 0xDC	; 220
    3e8e:	10 82       	st	Z, r1
							}
						  SendSerialData = 1;
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
				}
			}
		}
		break;
	}
}
    3e96:	3e c0       	rjmp	.+124    	; 0x3f14 <__DATA_REGION_LENGTH__+0x1f14>
								}
								break;
							}
						}

						switch (TextStringPtr)
    3e98:	82 2f       	mov	r24, r18
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	33 97       	sbiw	r30, 0x03	; 3
    3ea0:	e6 31       	cpi	r30, 0x16	; 22
    3ea2:	f1 05       	cpc	r31, r1
    3ea4:	10 f0       	brcs	.+4      	; 0x3eaa <__DATA_REGION_LENGTH__+0x1eaa>
    3ea6:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <__DATA_REGION_LENGTH__+0x542>
    3eaa:	88 27       	eor	r24, r24
    3eac:	e9 54       	subi	r30, 0x49	; 73
    3eae:	fe 4f       	sbci	r31, 0xFE	; 254
    3eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    3eb2:	0c 94 98 28 	jmp	0x5130	; 0x5130 <__tablejump2__>
									SendSerialData = 1;
								}
							}

							// REMOTE ON
							if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMONMIC]))
    3eb6:	f7 01       	movw	r30, r14
    3eb8:	ee 0f       	add	r30, r30
    3eba:	ff 1f       	adc	r31, r31
    3ebc:	ee 0f       	add	r30, r30
    3ebe:	ff 1f       	adc	r31, r31
    3ec0:	ee 0f       	add	r30, r30
    3ec2:	ff 1f       	adc	r31, r31
    3ec4:	e5 5f       	subi	r30, 0xF5	; 245
    3ec6:	f4 4d       	sbci	r31, 0xD4	; 212
    3ec8:	87 81       	ldd	r24, Z+7	; 0x07
    3eca:	88 23       	and	r24, r24
    3ecc:	14 f0       	brlt	.+4      	; 0x3ed2 <__DATA_REGION_LENGTH__+0x1ed2>
    3ece:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <DoEvent+0x344>
    3ed2:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <DoEvent+0x2ea>
    3ed6:	f7 01       	movw	r30, r14
    3ed8:	ee 0f       	add	r30, r30
    3eda:	ff 1f       	adc	r31, r31
    3edc:	ee 0f       	add	r30, r30
    3ede:	ff 1f       	adc	r31, r31
    3ee0:	ee 0f       	add	r30, r30
    3ee2:	ff 1f       	adc	r31, r31
    3ee4:	e5 5f       	subi	r30, 0xF5	; 245
    3ee6:	f4 4d       	sbci	r31, 0xD4	; 212
    3ee8:	87 81       	ldd	r24, Z+7	; 0x07
    3eea:	88 23       	and	r24, r24
    3eec:	14 f0       	brlt	.+4      	; 0x3ef2 <__DATA_REGION_LENGTH__+0x1ef2>
    3eee:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <DoEvent+0x38a>
    3ef2:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <DoEvent+0x2ea>
								}
								break;
							}
						}

						switch (TextStringPtr)
    3ef6:	82 2f       	mov	r24, r18
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	fc 01       	movw	r30, r24
    3efc:	33 97       	sbiw	r30, 0x03	; 3
    3efe:	e6 31       	cpi	r30, 0x16	; 22
    3f00:	f1 05       	cpc	r31, r1
    3f02:	10 f0       	brcs	.+4      	; 0x3f08 <__DATA_REGION_LENGTH__+0x1f08>
    3f04:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <__DATA_REGION_LENGTH__+0x542>
    3f08:	88 27       	eor	r24, r24
    3f0a:	e3 53       	subi	r30, 0x33	; 51
    3f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f0e:	8f 4f       	sbci	r24, 0xFF	; 255
    3f10:	0c 94 98 28 	jmp	0x5130	; 0x5130 <__tablejump2__>
				}
			}
		}
		break;
	}
}
    3f14:	61 96       	adiw	r28, 0x11	; 17
    3f16:	cd bf       	out	0x3d, r28	; 61
    3f18:	de bf       	out	0x3e, r29	; 62
    3f1a:	df 91       	pop	r29
    3f1c:	cf 91       	pop	r28
    3f1e:	1f 91       	pop	r17
    3f20:	0f 91       	pop	r16
    3f22:	ff 90       	pop	r15
    3f24:	ef 90       	pop	r14
    3f26:	df 90       	pop	r13
    3f28:	cf 90       	pop	r12
    3f2a:	08 95       	ret

00003f2c <SetAddress>:
	//PS1 = 1;
}


void SetAddress(unsigned char I2CAddress, unsigned int StartAddress)
{
    3f2c:	08 95       	ret

00003f2e <ReadData>:

/***************************************************************
* READ_DATA_I2C                                                    *
***************************************************************/
void ReadData(unsigned char I2CAddress, unsigned int StartAddress, unsigned char *Buffer, unsigned char NrOfBytes)
{
    3f2e:	08 95       	ret

00003f30 <SetupLCD>:
#define		LCD_E   0x20
//#define		STRB1   0x80
//static  char Wait=40;  // Maximal 262 for _delay_us();

void SetupLCD()
{
    3f30:	9f 92       	push	r9
    3f32:	af 92       	push	r10
    3f34:	bf 92       	push	r11
    3f36:	cf 92       	push	r12
    3f38:	df 92       	push	r13
    3f3a:	ef 92       	push	r14
    3f3c:	ff 92       	push	r15
    3f3e:	0f 93       	push	r16
    3f40:	1f 93       	push	r17
    3f42:	cf 93       	push	r28
    3f44:	df 93       	push	r29
	unsigned char Wait=1;  // Maximal 262 for _delay_us();
	


	// Wait minimal 15 ms
	Delay(Wait);
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Delay>

	PORTA_OUTCLR = LCD_E;
    3f4e:	c6 e0       	ldi	r28, 0x06	; 6
    3f50:	d6 e0       	ldi	r29, 0x06	; 6
    3f52:	68 94       	set
    3f54:	ff 24       	eor	r15, r15
    3f56:	f5 f8       	bld	r15, 5
    3f58:	f8 82       	st	Y, r15
	// Setup/Reset Display
	PORTA_OUTCLR = LCD_RS;
    3f5a:	68 94       	set
    3f5c:	cc 24       	eor	r12, r12
    3f5e:	c6 f8       	bld	r12, 6
    3f60:	c8 82       	st	Y, r12
	PORTA_OUTCLR = LCD_RW;
    3f62:	68 94       	set
    3f64:	dd 24       	eor	r13, r13
    3f66:	d3 f8       	bld	r13, 3
    3f68:	d8 82       	st	Y, r13
	PORTA_OUTCLR = LCD_D7;
    3f6a:	68 94       	set
    3f6c:	ee 24       	eor	r14, r14
    3f6e:	e4 f8       	bld	r14, 4
    3f70:	e8 82       	st	Y, r14
	PORTA_OUTCLR = LCD_D6;
    3f72:	68 94       	set
    3f74:	99 24       	eor	r9, r9
    3f76:	92 f8       	bld	r9, 2
    3f78:	98 82       	st	Y, r9
	PORTA_OUTSET = LCD_D5;
    3f7a:	05 e0       	ldi	r16, 0x05	; 5
    3f7c:	16 e0       	ldi	r17, 0x06	; 6
    3f7e:	68 94       	set
    3f80:	aa 24       	eor	r10, r10
    3f82:	a1 f8       	bld	r10, 1
    3f84:	f8 01       	movw	r30, r16
    3f86:	a0 82       	st	Z, r10
	PORTA_OUTSET = LCD_D4;
    3f88:	bb 24       	eor	r11, r11
    3f8a:	b3 94       	inc	r11
    3f8c:	b0 82       	st	Z, r11
	PORTA_OUTSET = LCD_E;
    3f8e:	f0 82       	st	Z, r15
	PORTA_OUTCLR = LCD_E;
    3f90:	f8 82       	st	Y, r15
	// Wait minimal 4.1 ms
	Delay(Wait);
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Delay>

	// Setup/Reset Display
	PORTA_OUTCLR = LCD_RS;
    3f9a:	c8 82       	st	Y, r12
	PORTA_OUTCLR = LCD_RW;
    3f9c:	d8 82       	st	Y, r13
	PORTA_OUTCLR = LCD_D7;
    3f9e:	e8 82       	st	Y, r14
	PORTA_OUTCLR = LCD_D6;
    3fa0:	98 82       	st	Y, r9
	PORTA_OUTSET = LCD_D5;
    3fa2:	f8 01       	movw	r30, r16
    3fa4:	a0 82       	st	Z, r10
	PORTA_OUTSET = LCD_D4;
    3fa6:	b0 82       	st	Z, r11
	PORTA_OUTSET = LCD_E * 1;
    3fa8:	f0 82       	st	Z, r15
	Delay_ms(Wait);
    3faa:	81 e0       	ldi	r24, 0x01	; 1
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    3fb2:	f8 82       	st	Y, r15
	// Wait minimal 100 us

	// Setup/Reset Display
	PORTA_OUTCLR = LCD_RS;
    3fb4:	c8 82       	st	Y, r12
	PORTA_OUTCLR = LCD_RW;
    3fb6:	d8 82       	st	Y, r13
	PORTA_OUTCLR = LCD_D7;
    3fb8:	e8 82       	st	Y, r14
	PORTA_OUTCLR = LCD_D6;
    3fba:	98 82       	st	Y, r9
	PORTA_OUTSET = LCD_D5;
    3fbc:	f8 01       	movw	r30, r16
    3fbe:	a0 82       	st	Z, r10
	PORTA_OUTSET = LCD_D4;
    3fc0:	b0 82       	st	Z, r11
	PORTA_OUTSET = LCD_E ;
    3fc2:	f0 82       	st	Z, r15
	Delay_ms(Wait);
    3fc4:	81 e0       	ldi	r24, 0x01	; 1
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    3fcc:	f8 82       	st	Y, r15

	// Busy cannot be checked
	Delay_ms(Wait);
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>

	// Setup/Reset Display to 4 bit mode
	PORTA_OUTCLR = LCD_RS;
    3fd6:	c8 82       	st	Y, r12
	PORTA_OUTCLR = LCD_RW;
    3fd8:	d8 82       	st	Y, r13
	PORTA_OUTCLR = LCD_D7;
    3fda:	e8 82       	st	Y, r14
	PORTA_OUTCLR = LCD_D6;
    3fdc:	98 82       	st	Y, r9
	PORTA_OUTSET = LCD_D5;
    3fde:	f8 01       	movw	r30, r16
    3fe0:	a0 82       	st	Z, r10
	PORTA_OUTCLR = LCD_D4;
    3fe2:	b8 82       	st	Y, r11
	PORTA_OUTSET = LCD_E;
    3fe4:	f0 82       	st	Z, r15
	Delay_ms(Wait);
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    3fee:	f8 82       	st	Y, r15

	// Set number of lines etc...
	PORTA_OUTCLR = LCD_RS;
    3ff0:	c8 82       	st	Y, r12
	PORTA_OUTCLR = LCD_RW;
    3ff2:	d8 82       	st	Y, r13
	PORTA_OUTCLR = LCD_D7;		// Function set
    3ff4:	e8 82       	st	Y, r14
	PORTA_OUTCLR = LCD_D6;		// Function set
    3ff6:	98 82       	st	Y, r9
	PORTA_OUTSET = LCD_D5;		// Function set
    3ff8:	f8 01       	movw	r30, r16
    3ffa:	a0 82       	st	Z, r10
	PORTA_OUTCLR = LCD_D4;		// 4 bit
    3ffc:	b8 82       	st	Y, r11
	PORTA_OUTSET = LCD_E;
    3ffe:	f0 82       	st	Z, r15
	Delay_ms(Wait);
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    4008:	f8 82       	st	Y, r15

	PORTA_OUTCLR = LCD_RS;
    400a:	c8 82       	st	Y, r12
	PORTA_OUTCLR = LCD_RW;
    400c:	d8 82       	st	Y, r13
	PORTA_OUTSET = LCD_D7;		// 2 lines
    400e:	f8 01       	movw	r30, r16
    4010:	e0 82       	st	Z, r14
	PORTA_OUTCLR = LCD_D6;		// 5x7 dots chars
    4012:	98 82       	st	Y, r9
	PORTA_OUTCLR = LCD_D5;		// *
    4014:	a8 82       	st	Y, r10
	PORTA_OUTCLR = LCD_D4;		// *
    4016:	b8 82       	st	Y, r11
	PORTA_OUTSET = LCD_E;
    4018:	f0 82       	st	Z, r15
	Delay_ms(Wait);
    401a:	81 e0       	ldi	r24, 0x01	; 1
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    4022:	f8 82       	st	Y, r15

	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
    4024:	f8 01       	movw	r30, r16
    4026:	e0 82       	st	Z, r14
	PORTA_OUTCLR = LCD_RS;
    4028:	c8 82       	st	Y, r12
	PORTA_OUTSET = LCD_RW;
    402a:	d0 82       	st	Z, r13
	PORTA_OUTSET = LCD_E;
    402c:	f0 82       	st	Z, r15
	Delay_ms(Wait);
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    4036:	f8 82       	st	Y, r15
	PORTA_OUTSET = LCD_E;
    4038:	f8 01       	movw	r30, r16
    403a:	f0 82       	st	Z, r15
    403c:	cf e0       	ldi	r28, 0x0F	; 15
	while ((LCD_D7) && (TimeOut--))
	{
		PORTA_OUTCLR = LCD_E;
    403e:	0f 2e       	mov	r0, r31
    4040:	f6 e0       	ldi	r31, 0x06	; 6
    4042:	cf 2e       	mov	r12, r31
    4044:	dc 2c       	mov	r13, r12
    4046:	f0 2d       	mov	r31, r0
    4048:	d0 e2       	ldi	r29, 0x20	; 32
    404a:	f6 01       	movw	r30, r12
    404c:	f0 82       	st	Z, r15
		Delay_ms(Wait);
    404e:	81 e0       	ldi	r24, 0x01	; 1
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
		PORTA_OUTSET = LCD_E;
    4056:	f8 01       	movw	r30, r16
    4058:	d0 83       	st	Z, r29
    405a:	c1 50       	subi	r28, 0x01	; 1
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	Delay_ms(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    405c:	b1 f7       	brne	.-20     	; 0x404a <__stack+0x4b>
	{
		PORTA_OUTCLR = LCD_E;
		Delay_ms(Wait);
		PORTA_OUTSET = LCD_E;
	}
	PORTA_OUTCLR = LCD_E;
    405e:	c6 e0       	ldi	r28, 0x06	; 6
    4060:	d6 e0       	ldi	r29, 0x06	; 6
    4062:	68 94       	set
    4064:	ff 24       	eor	r15, r15
    4066:	f5 f8       	bld	r15, 5
    4068:	f8 82       	st	Y, r15

	// Display Off
	PORTA_OUTCLR = LCD_RS;
    406a:	68 94       	set
    406c:	dd 24       	eor	r13, r13
    406e:	d6 f8       	bld	r13, 6
    4070:	d8 82       	st	Y, r13
	PORTA_OUTCLR = LCD_RW;
    4072:	68 94       	set
    4074:	ee 24       	eor	r14, r14
    4076:	e3 f8       	bld	r14, 3
    4078:	e8 82       	st	Y, r14
	PORTA_OUTCLR = LCD_D7;		// Function set
    407a:	68 94       	set
    407c:	cc 24       	eor	r12, r12
    407e:	c4 f8       	bld	r12, 4
    4080:	c8 82       	st	Y, r12
	PORTA_OUTCLR = LCD_D6;		// Function set
    4082:	68 94       	set
    4084:	99 24       	eor	r9, r9
    4086:	92 f8       	bld	r9, 2
    4088:	98 82       	st	Y, r9
	PORTA_OUTCLR = LCD_D5;		// Function set
    408a:	68 94       	set
    408c:	aa 24       	eor	r10, r10
    408e:	a1 f8       	bld	r10, 1
    4090:	a8 82       	st	Y, r10
	PORTA_OUTCLR = LCD_D4;		
    4092:	bb 24       	eor	r11, r11
    4094:	b3 94       	inc	r11
    4096:	b8 82       	st	Y, r11
	PORTA_OUTSET = LCD_E;
    4098:	05 e0       	ldi	r16, 0x05	; 5
    409a:	16 e0       	ldi	r17, 0x06	; 6
    409c:	f8 01       	movw	r30, r16
    409e:	f0 82       	st	Z, r15
	Delay_ms(Wait);
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    40a8:	f8 82       	st	Y, r15

	PORTA_OUTCLR = LCD_RS;
    40aa:	d8 82       	st	Y, r13
	PORTA_OUTCLR = LCD_RW;
    40ac:	e8 82       	st	Y, r14
	PORTA_OUTSET = LCD_D7;		// Display off
    40ae:	f8 01       	movw	r30, r16
    40b0:	c0 82       	st	Z, r12
	PORTA_OUTSET = LCD_D6;		
    40b2:	90 82       	st	Z, r9
	PORTA_OUTCLR = LCD_D5;	 	// Cursor on
    40b4:	a8 82       	st	Y, r10
	PORTA_OUTCLR = LCD_D4;	 	// Cursor Blink
    40b6:	b8 82       	st	Y, r11
	PORTA_OUTSET = LCD_E;
    40b8:	f0 82       	st	Z, r15
	Delay_ms(Wait);
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    40c2:	f8 82       	st	Y, r15

	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
    40c4:	f8 01       	movw	r30, r16
    40c6:	c0 82       	st	Z, r12
	PORTA_OUTCLR = LCD_RS;
    40c8:	d8 82       	st	Y, r13
	PORTA_OUTSET = LCD_RW;
    40ca:	e0 82       	st	Z, r14
	PORTA_OUTSET = LCD_E;
    40cc:	f0 82       	st	Z, r15
	Delay_ms(Wait);
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    40d6:	f8 82       	st	Y, r15
	PORTA_OUTSET = LCD_E;
    40d8:	f8 01       	movw	r30, r16
    40da:	f0 82       	st	Z, r15
    40dc:	cf e0       	ldi	r28, 0x0F	; 15
	while ((LCD_D7) && (TimeOut--))
	{
		PORTA_OUTCLR = LCD_E;
    40de:	0f 2e       	mov	r0, r31
    40e0:	f6 e0       	ldi	r31, 0x06	; 6
    40e2:	cf 2e       	mov	r12, r31
    40e4:	dc 2c       	mov	r13, r12
    40e6:	f0 2d       	mov	r31, r0
    40e8:	d0 e2       	ldi	r29, 0x20	; 32
    40ea:	f6 01       	movw	r30, r12
    40ec:	f0 82       	st	Z, r15
		Delay_ms(Wait);
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
		PORTA_OUTSET = LCD_E;
    40f6:	f8 01       	movw	r30, r16
    40f8:	d0 83       	st	Z, r29
    40fa:	c1 50       	subi	r28, 0x01	; 1
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	Delay_ms(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    40fc:	b1 f7       	brne	.-20     	; 0x40ea <__stack+0xeb>
	{
		PORTA_OUTCLR = LCD_E;
		Delay_ms(Wait);
		PORTA_OUTSET = LCD_E;
	}
	PORTA_OUTCLR = LCD_E;
    40fe:	c6 e0       	ldi	r28, 0x06	; 6
    4100:	d6 e0       	ldi	r29, 0x06	; 6
    4102:	10 e2       	ldi	r17, 0x20	; 32
    4104:	18 83       	st	Y, r17

	// Display Clear
	PORTA_OUTCLR = LCD_RS;
    4106:	68 94       	set
    4108:	ff 24       	eor	r15, r15
    410a:	f6 f8       	bld	r15, 6
    410c:	f8 82       	st	Y, r15
	PORTA_OUTCLR = LCD_RW;
    410e:	08 e0       	ldi	r16, 0x08	; 8
    4110:	08 83       	st	Y, r16
	PORTA_OUTCLR = LCD_D7;		// Function set
    4112:	68 94       	set
    4114:	ee 24       	eor	r14, r14
    4116:	e4 f8       	bld	r14, 4
    4118:	e8 82       	st	Y, r14
	PORTA_OUTCLR = LCD_D6;		// Function set
    411a:	68 94       	set
    411c:	99 24       	eor	r9, r9
    411e:	92 f8       	bld	r9, 2
    4120:	98 82       	st	Y, r9
	PORTA_OUTCLR = LCD_D5;		// Function set
    4122:	68 94       	set
    4124:	aa 24       	eor	r10, r10
    4126:	a1 f8       	bld	r10, 1
    4128:	a8 82       	st	Y, r10
	PORTA_OUTCLR = LCD_D4;		
    412a:	bb 24       	eor	r11, r11
    412c:	b3 94       	inc	r11
    412e:	b8 82       	st	Y, r11
	PORTA_OUTSET = LCD_E;
    4130:	0f 2e       	mov	r0, r31
    4132:	f5 e0       	ldi	r31, 0x05	; 5
    4134:	cf 2e       	mov	r12, r31
    4136:	f6 e0       	ldi	r31, 0x06	; 6
    4138:	df 2e       	mov	r13, r31
    413a:	f0 2d       	mov	r31, r0
    413c:	f6 01       	movw	r30, r12
    413e:	10 83       	st	Z, r17
	Delay_ms(Wait);
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    4148:	18 83       	st	Y, r17

	PORTA_OUTCLR = LCD_RS;
    414a:	f8 82       	st	Y, r15
	PORTA_OUTCLR = LCD_RW;
    414c:	08 83       	st	Y, r16
	PORTA_OUTCLR = LCD_D7;		
    414e:	e8 82       	st	Y, r14
	PORTA_OUTCLR = LCD_D6;		
    4150:	98 82       	st	Y, r9
	PORTA_OUTCLR = LCD_D5;	 
    4152:	a8 82       	st	Y, r10
	PORTA_OUTSET = LCD_D4;		
    4154:	f6 01       	movw	r30, r12
    4156:	b0 82       	st	Z, r11
	PORTA_OUTSET = LCD_E;
    4158:	10 83       	st	Z, r17
	Delay_ms(Wait);
    415a:	81 e0       	ldi	r24, 0x01	; 1
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    4162:	18 83       	st	Y, r17

	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
    4164:	f6 01       	movw	r30, r12
    4166:	e0 82       	st	Z, r14
	PORTA_OUTCLR = LCD_RS;
    4168:	f8 82       	st	Y, r15
	PORTA_OUTSET = LCD_RW;
    416a:	00 83       	st	Z, r16
	PORTA_OUTSET = LCD_E;
    416c:	10 83       	st	Z, r17
	Delay_ms(Wait);
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    4176:	18 83       	st	Y, r17
	PORTA_OUTSET = LCD_E;
    4178:	f6 01       	movw	r30, r12
    417a:	10 83       	st	Z, r17
    417c:	cf e0       	ldi	r28, 0x0F	; 15
	while ((LCD_D7) && (TimeOut--))
	{
		PORTA_OUTCLR = LCD_E;
    417e:	0f 2e       	mov	r0, r31
    4180:	f6 e0       	ldi	r31, 0x06	; 6
    4182:	cf 2e       	mov	r12, r31
    4184:	dc 2c       	mov	r13, r12
    4186:	f0 2d       	mov	r31, r0
    4188:	d0 e2       	ldi	r29, 0x20	; 32
    418a:	fd 2e       	mov	r15, r29
		Delay_ms(Wait);
		PORTA_OUTSET = LCD_E;
    418c:	05 e0       	ldi	r16, 0x05	; 5
    418e:	16 e0       	ldi	r17, 0x06	; 6
	Delay_ms(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
	{
		PORTA_OUTCLR = LCD_E;
    4190:	f6 01       	movw	r30, r12
    4192:	f0 82       	st	Z, r15
		Delay_ms(Wait);
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
		PORTA_OUTSET = LCD_E;
    419c:	f8 01       	movw	r30, r16
    419e:	d0 83       	st	Z, r29
    41a0:	c1 50       	subi	r28, 0x01	; 1
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	Delay_ms(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    41a2:	b1 f7       	brne	.-20     	; 0x4190 <__stack+0x191>
	{
		PORTA_OUTCLR = LCD_E;
		Delay_ms(Wait);
		PORTA_OUTSET = LCD_E;
	}
	PORTA_OUTCLR = LCD_E;
    41a4:	c6 e0       	ldi	r28, 0x06	; 6
    41a6:	d6 e0       	ldi	r29, 0x06	; 6
    41a8:	68 94       	set
    41aa:	ff 24       	eor	r15, r15
    41ac:	f5 f8       	bld	r15, 5
    41ae:	f8 82       	st	Y, r15

	// Entry mode
	PORTA_OUTCLR = LCD_RS;
    41b0:	68 94       	set
    41b2:	dd 24       	eor	r13, r13
    41b4:	d6 f8       	bld	r13, 6
    41b6:	d8 82       	st	Y, r13
	PORTA_OUTCLR = LCD_RW;
    41b8:	68 94       	set
    41ba:	ee 24       	eor	r14, r14
    41bc:	e3 f8       	bld	r14, 3
    41be:	e8 82       	st	Y, r14
	PORTA_OUTCLR = LCD_D7;
    41c0:	68 94       	set
    41c2:	cc 24       	eor	r12, r12
    41c4:	c4 f8       	bld	r12, 4
    41c6:	c8 82       	st	Y, r12
	PORTA_OUTCLR = LCD_D6;
    41c8:	68 94       	set
    41ca:	99 24       	eor	r9, r9
    41cc:	92 f8       	bld	r9, 2
    41ce:	98 82       	st	Y, r9
	PORTA_OUTCLR = LCD_D5;
    41d0:	68 94       	set
    41d2:	aa 24       	eor	r10, r10
    41d4:	a1 f8       	bld	r10, 1
    41d6:	a8 82       	st	Y, r10
	PORTA_OUTCLR = LCD_D4;		
    41d8:	bb 24       	eor	r11, r11
    41da:	b3 94       	inc	r11
    41dc:	b8 82       	st	Y, r11
	PORTA_OUTSET = LCD_E;
    41de:	05 e0       	ldi	r16, 0x05	; 5
    41e0:	16 e0       	ldi	r17, 0x06	; 6
    41e2:	f8 01       	movw	r30, r16
    41e4:	f0 82       	st	Z, r15
	Delay_ms(Wait);
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    41ee:	f8 82       	st	Y, r15

	PORTA_OUTCLR = LCD_RS;
    41f0:	d8 82       	st	Y, r13
	PORTA_OUTCLR = LCD_RW;
    41f2:	e8 82       	st	Y, r14
	PORTA_OUTCLR = LCD_D7;		
    41f4:	c8 82       	st	Y, r12
	PORTA_OUTSET = LCD_D6;
    41f6:	f8 01       	movw	r30, r16
    41f8:	90 82       	st	Z, r9
	PORTA_OUTSET = LCD_D5;		// Position increment after char
    41fa:	a0 82       	st	Z, r10
	PORTA_OUTCLR = LCD_D4;		// No shift
    41fc:	b8 82       	st	Y, r11
	PORTA_OUTSET = LCD_E;
    41fe:	f0 82       	st	Z, r15
	Delay_ms(Wait);
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
	PORTA_OUTCLR = LCD_E;
    4208:	f8 82       	st	Y, r15

	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
    420a:	f8 01       	movw	r30, r16
    420c:	c0 82       	st	Z, r12
	PORTA_OUTCLR = LCD_RS;
    420e:	d8 82       	st	Y, r13
	PORTA_OUTSET = LCD_RW;
    4210:	e0 82       	st	Z, r14
	PORTA_OUTSET = LCD_E;
    4212:	f0 82       	st	Z, r15
    4214:	cf e0       	ldi	r28, 0x0F	; 15
	while ((LCD_D7) && (TimeOut--))
	{
		PORTA_OUTCLR = LCD_E;
    4216:	0f 2e       	mov	r0, r31
    4218:	f6 e0       	ldi	r31, 0x06	; 6
    421a:	cf 2e       	mov	r12, r31
    421c:	dc 2c       	mov	r13, r12
    421e:	f0 2d       	mov	r31, r0
    4220:	d0 e2       	ldi	r29, 0x20	; 32
    4222:	f6 01       	movw	r30, r12
    4224:	f0 82       	st	Z, r15
		Delay_ms(Wait);
    4226:	81 e0       	ldi	r24, 0x01	; 1
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
		PORTA_OUTSET = LCD_E;
    422e:	f8 01       	movw	r30, r16
    4230:	d0 83       	st	Z, r29
    4232:	c1 50       	subi	r28, 0x01	; 1
	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
	PORTA_OUTCLR = LCD_RS;
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    4234:	b1 f7       	brne	.-20     	; 0x4222 <__stack+0x223>
	{
		PORTA_OUTCLR = LCD_E;
		Delay_ms(Wait);
		PORTA_OUTSET = LCD_E;
	}
	PORTA_OUTCLR = LCD_E;
    4236:	80 e2       	ldi	r24, 0x20	; 32
    4238:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
}
    423c:	df 91       	pop	r29
    423e:	cf 91       	pop	r28
    4240:	1f 91       	pop	r17
    4242:	0f 91       	pop	r16
    4244:	ff 90       	pop	r15
    4246:	ef 90       	pop	r14
    4248:	df 90       	pop	r13
    424a:	cf 90       	pop	r12
    424c:	bf 90       	pop	r11
    424e:	af 90       	pop	r10
    4250:	9f 90       	pop	r9
    4252:	08 95       	ret

00004254 <SetLCD>:
/****************************************
* place data on LCD	RS = 0:	Instruction *
*					RS = 1:	Data        *
****************************************/
void SetLCD( int RS, char Buffer[] )
{
    4254:	2f 92       	push	r2
    4256:	3f 92       	push	r3
    4258:	4f 92       	push	r4
    425a:	5f 92       	push	r5
    425c:	6f 92       	push	r6
    425e:	7f 92       	push	r7
    4260:	8f 92       	push	r8
    4262:	9f 92       	push	r9
    4264:	af 92       	push	r10
    4266:	bf 92       	push	r11
    4268:	cf 92       	push	r12
    426a:	df 92       	push	r13
    426c:	ef 92       	push	r14
    426e:	ff 92       	push	r15
    4270:	0f 93       	push	r16
    4272:	1f 93       	push	r17
    4274:	cf 93       	push	r28
    4276:	df 93       	push	r29
    4278:	1f 92       	push	r1
    427a:	cd b7       	in	r28, 0x3d	; 61
    427c:	de b7       	in	r29, 0x3e	; 62
    427e:	5c 01       	movw	r10, r24
//#define		LCD_D7  0x10
//#define		LCD_RW  0x8
//#define		LCD_RS  0x40
//#define		LCD_E   0x20	
	
	while (Buffer[cntBuffer] != 0)
    4280:	fb 01       	movw	r30, r22
    4282:	90 81       	ld	r25, Z
    4284:	99 23       	and	r25, r25
    4286:	09 f4       	brne	.+2      	; 0x428a <SetLCD+0x36>
    4288:	9d c0       	rjmp	.+314    	; 0x43c4 <SetLCD+0x170>
    428a:	4b 01       	movw	r8, r22
    428c:	6b 01       	movw	r12, r22
    428e:	71 2c       	mov	r7, r1
	{
		
		//Buffer[cntBuffer]=0xff;
		

		PORTA_OUTCLR = LCD_RS;   //PORTA_OUT |= LCD_RS * RS;
    4290:	f0 e4       	ldi	r31, 0x40	; 64
    4292:	f9 83       	std	Y+1, r31	; 0x01
		PORTA_OUTSET = LCD_RW;
    4294:	05 e0       	ldi	r16, 0x05	; 5
    4296:	16 e0       	ldi	r17, 0x06	; 6
    4298:	68 94       	set
    429a:	33 24       	eor	r3, r3
    429c:	33 f8       	bld	r3, 3
			
		PORTA_OUTSET = LCD_E;
    429e:	68 94       	set
    42a0:	ff 24       	eor	r15, r15
    42a2:	f5 f8       	bld	r15, 5
    42a4:	ef 2c       	mov	r14, r15
		outb = ( char)Buffer[cntBuffer];
		
		if(outb & 0x10)
			PORTA_OUTSET = LCD_D4;
		else
			PORTA_OUTCLR = LCD_D4;
    42a6:	44 24       	eor	r4, r4
    42a8:	43 94       	inc	r4
			
		if(outb & 0x20)
			PORTA_OUTSET = LCD_D5;
		else
			PORTA_OUTCLR = LCD_D5;		
    42aa:	68 94       	set
    42ac:	55 24       	eor	r5, r5
    42ae:	51 f8       	bld	r5, 1
			
		if(outb & 0x40)
			PORTA_OUTSET = LCD_D6;
		else
			PORTA_OUTCLR = LCD_D6;
    42b0:	68 94       	set
    42b2:	66 24       	eor	r6, r6
    42b4:	62 f8       	bld	r6, 2
					
		if(outb & 0x80)
			PORTA_OUTSET = LCD_D7;
		else
			PORTA_OUTCLR = LCD_D7;
    42b6:	68 94       	set
    42b8:	22 24       	eor	r2, r2
    42ba:	24 f8       	bld	r2, 4
	{
		
		//Buffer[cntBuffer]=0xff;
		

		PORTA_OUTCLR = LCD_RS;   //PORTA_OUT |= LCD_RS * RS;
    42bc:	89 81       	ldd	r24, Y+1	; 0x01
    42be:	e6 e0       	ldi	r30, 0x06	; 6
    42c0:	f6 e0       	ldi	r31, 0x06	; 6
    42c2:	80 83       	st	Z, r24
		PORTA_OUTSET = LCD_RW;
    42c4:	f8 01       	movw	r30, r16
    42c6:	30 82       	st	Z, r3
			
		PORTA_OUTSET = LCD_E;
    42c8:	e0 82       	st	Z, r14
		PORTA_OUTCLR = LCD_E;			// 20
    42ca:	e6 e0       	ldi	r30, 0x06	; 6
    42cc:	f6 e0       	ldi	r31, 0x06	; 6
    42ce:	e0 82       	st	Z, r14
		PORTA_OUTSET = LCD_E;
    42d0:	f8 01       	movw	r30, r16
    42d2:	e0 82       	st	Z, r14
			
//		PORTA_OUT = PORTA_OUT & 0xf0;
//		PORTA_OUT = PORTA_OUT | ((( char)Buffer[cntBuffer] & 0xF0) >> 4);					
		
	//	PORTA_OUT &= 0b11101000;		
		outb = ( char)Buffer[cntBuffer];
    42d4:	f6 01       	movw	r30, r12
    42d6:	80 81       	ld	r24, Z
		
		if(outb & 0x10)
    42d8:	84 ff       	sbrs	r24, 4
    42da:	03 c0       	rjmp	.+6      	; 0x42e2 <SetLCD+0x8e>
			PORTA_OUTSET = LCD_D4;
    42dc:	f8 01       	movw	r30, r16
    42de:	40 82       	st	Z, r4
    42e0:	03 c0       	rjmp	.+6      	; 0x42e8 <SetLCD+0x94>
		else
			PORTA_OUTCLR = LCD_D4;
    42e2:	e6 e0       	ldi	r30, 0x06	; 6
    42e4:	f6 e0       	ldi	r31, 0x06	; 6
    42e6:	40 82       	st	Z, r4
			
		if(outb & 0x20)
    42e8:	85 ff       	sbrs	r24, 5
    42ea:	03 c0       	rjmp	.+6      	; 0x42f2 <SetLCD+0x9e>
			PORTA_OUTSET = LCD_D5;
    42ec:	f8 01       	movw	r30, r16
    42ee:	50 82       	st	Z, r5
    42f0:	03 c0       	rjmp	.+6      	; 0x42f8 <SetLCD+0xa4>
		else
			PORTA_OUTCLR = LCD_D5;		
    42f2:	e6 e0       	ldi	r30, 0x06	; 6
    42f4:	f6 e0       	ldi	r31, 0x06	; 6
    42f6:	50 82       	st	Z, r5
			
		if(outb & 0x40)
    42f8:	86 ff       	sbrs	r24, 6
    42fa:	03 c0       	rjmp	.+6      	; 0x4302 <SetLCD+0xae>
			PORTA_OUTSET = LCD_D6;
    42fc:	f8 01       	movw	r30, r16
    42fe:	60 82       	st	Z, r6
    4300:	03 c0       	rjmp	.+6      	; 0x4308 <SetLCD+0xb4>
		else
			PORTA_OUTCLR = LCD_D6;
    4302:	e6 e0       	ldi	r30, 0x06	; 6
    4304:	f6 e0       	ldi	r31, 0x06	; 6
    4306:	60 82       	st	Z, r6
					
		if(outb & 0x80)
    4308:	88 23       	and	r24, r24
    430a:	1c f4       	brge	.+6      	; 0x4312 <SetLCD+0xbe>
			PORTA_OUTSET = LCD_D7;
    430c:	f8 01       	movw	r30, r16
    430e:	20 82       	st	Z, r2
    4310:	03 c0       	rjmp	.+6      	; 0x4318 <SetLCD+0xc4>
		else
			PORTA_OUTCLR = LCD_D7;
    4312:	e6 e0       	ldi	r30, 0x06	; 6
    4314:	f6 e0       	ldi	r31, 0x06	; 6
    4316:	20 82       	st	Z, r2
		//outc >>= 3;
		//PORTA_OUT |= outb | outc;



		Delay_ms(Wait);		
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
		
		if(RS==0)
    4320:	a1 14       	cp	r10, r1
    4322:	b1 04       	cpc	r11, r1
    4324:	29 f4       	brne	.+10     	; 0x4330 <SetLCD+0xdc>
			PORTA_OUTCLR = LCD_RS;   //PORTA_OUT |= LCD_RS * RS;
    4326:	80 e4       	ldi	r24, 0x40	; 64
    4328:	e6 e0       	ldi	r30, 0x06	; 6
    432a:	f6 e0       	ldi	r31, 0x06	; 6
    432c:	80 83       	st	Z, r24
    432e:	07 c0       	rjmp	.+14     	; 0x433e <SetLCD+0xea>
		else if(RS==1)
    4330:	e1 e0       	ldi	r30, 0x01	; 1
    4332:	ae 16       	cp	r10, r30
    4334:	b1 04       	cpc	r11, r1
    4336:	19 f4       	brne	.+6      	; 0x433e <SetLCD+0xea>
			PORTA_OUTSET = LCD_RS;		
    4338:	80 e4       	ldi	r24, 0x40	; 64
    433a:	f8 01       	movw	r30, r16
    433c:	80 83       	st	Z, r24
		
		PORTA_OUTCLR = LCD_RW;		
    433e:	e6 e0       	ldi	r30, 0x06	; 6
    4340:	f6 e0       	ldi	r31, 0x06	; 6
    4342:	30 82       	st	Z, r3
		
		PORTA_OUTSET = LCD_E;
    4344:	f8 01       	movw	r30, r16
    4346:	f0 82       	st	Z, r15
		Delay_ms(Wait);
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
		PORTA_OUTCLR = LCD_E;
    4350:	e6 e0       	ldi	r30, 0x06	; 6
    4352:	f6 e0       	ldi	r31, 0x06	; 6
    4354:	f0 82       	st	Z, r15
		
//		PORTA_OUT &= 0xf0;
//		PORTA_OUT |= ( ( char)Buffer[cntBuffer] & 0x0F );

		//PORTA_OUT &= 0b11101000;
		outb = ( char)Buffer[cntBuffer];
    4356:	f6 01       	movw	r30, r12
    4358:	80 81       	ld	r24, Z

		if(outb & 0x1)
    435a:	80 ff       	sbrs	r24, 0
    435c:	03 c0       	rjmp	.+6      	; 0x4364 <SetLCD+0x110>
			PORTA_OUTSET = LCD_D4;
    435e:	f8 01       	movw	r30, r16
    4360:	40 82       	st	Z, r4
    4362:	03 c0       	rjmp	.+6      	; 0x436a <SetLCD+0x116>
		else
			PORTA_OUTCLR = LCD_D4;
    4364:	e6 e0       	ldi	r30, 0x06	; 6
    4366:	f6 e0       	ldi	r31, 0x06	; 6
    4368:	40 82       	st	Z, r4
		
		if(outb & 0x2)
    436a:	81 ff       	sbrs	r24, 1
    436c:	03 c0       	rjmp	.+6      	; 0x4374 <SetLCD+0x120>
			PORTA_OUTSET = LCD_D5;
    436e:	f8 01       	movw	r30, r16
    4370:	50 82       	st	Z, r5
    4372:	03 c0       	rjmp	.+6      	; 0x437a <SetLCD+0x126>
		else
			PORTA_OUTCLR = LCD_D5;
    4374:	e6 e0       	ldi	r30, 0x06	; 6
    4376:	f6 e0       	ldi	r31, 0x06	; 6
    4378:	50 82       	st	Z, r5
		
		if(outb & 0x4)
    437a:	82 ff       	sbrs	r24, 2
    437c:	03 c0       	rjmp	.+6      	; 0x4384 <SetLCD+0x130>
			PORTA_OUTSET = LCD_D6;
    437e:	f8 01       	movw	r30, r16
    4380:	60 82       	st	Z, r6
    4382:	03 c0       	rjmp	.+6      	; 0x438a <SetLCD+0x136>
		else
			PORTA_OUTCLR = LCD_D6;
    4384:	e6 e0       	ldi	r30, 0x06	; 6
    4386:	f6 e0       	ldi	r31, 0x06	; 6
    4388:	60 82       	st	Z, r6
		
		if(outb & 0x8)
    438a:	83 ff       	sbrs	r24, 3
    438c:	03 c0       	rjmp	.+6      	; 0x4394 <SetLCD+0x140>
			PORTA_OUTSET = LCD_D7;
    438e:	f8 01       	movw	r30, r16
    4390:	20 82       	st	Z, r2
    4392:	03 c0       	rjmp	.+6      	; 0x439a <SetLCD+0x146>
		else
			PORTA_OUTCLR = LCD_D7;
    4394:	e6 e0       	ldi	r30, 0x06	; 6
    4396:	f6 e0       	ldi	r31, 0x06	; 6
    4398:	20 82       	st	Z, r2
		//outc &= 0b00001000;
		//outc <<= 1;
		//PORTA_OUT |= outb | outc;
		
		
		Delay_ms(Wait);
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
		
		PORTA_OUTSET = LCD_E;
    43a2:	f8 01       	movw	r30, r16
    43a4:	f0 82       	st	Z, r15
		Delay_ms(Wait);
    43a6:	81 e0       	ldi	r24, 0x01	; 1
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <Delay_ms>
		PORTA_OUTCLR = LCD_E;		
    43ae:	e6 e0       	ldi	r30, 0x06	; 6
    43b0:	f6 e0       	ldi	r31, 0x06	; 6
    43b2:	f0 82       	st	Z, r15

		cntBuffer++;
    43b4:	73 94       	inc	r7
//#define		LCD_D7  0x10
//#define		LCD_RW  0x8
//#define		LCD_RS  0x40
//#define		LCD_E   0x20	
	
	while (Buffer[cntBuffer] != 0)
    43b6:	64 01       	movw	r12, r8
    43b8:	c7 0c       	add	r12, r7
    43ba:	d1 1c       	adc	r13, r1
    43bc:	f6 01       	movw	r30, r12
    43be:	80 81       	ld	r24, Z
    43c0:	81 11       	cpse	r24, r1
    43c2:	7c cf       	rjmp	.-264    	; 0x42bc <SetLCD+0x68>
		Delay_ms(Wait);
		PORTA_OUTCLR = LCD_E;		

		cntBuffer++;
	}
}
    43c4:	0f 90       	pop	r0
    43c6:	df 91       	pop	r29
    43c8:	cf 91       	pop	r28
    43ca:	1f 91       	pop	r17
    43cc:	0f 91       	pop	r16
    43ce:	ff 90       	pop	r15
    43d0:	ef 90       	pop	r14
    43d2:	df 90       	pop	r13
    43d4:	cf 90       	pop	r12
    43d6:	bf 90       	pop	r11
    43d8:	af 90       	pop	r10
    43da:	9f 90       	pop	r9
    43dc:	8f 90       	pop	r8
    43de:	7f 90       	pop	r7
    43e0:	6f 90       	pop	r6
    43e2:	5f 90       	pop	r5
    43e4:	4f 90       	pop	r4
    43e6:	3f 90       	pop	r3
    43e8:	2f 90       	pop	r2
    43ea:	08 95       	ret

000043ec <ReadMasterSwitches>:
	ReadModuleSwitches(MODULE1_8);
	ReadModuleSwitches(MODULE9_16);
}

void ReadMasterSwitches()
{
    43ec:	cf 93       	push	r28
    43ee:	df 93       	push	r29
	unsigned char cntByte;

	PORTB_OUTCLR = P10; //read master
    43f0:	e6 e2       	ldi	r30, 0x26	; 38
    43f2:	f6 e0       	ldi	r31, 0x06	; 6
    43f4:	84 e0       	ldi	r24, 0x04	; 4
    43f6:	80 83       	st	Z, r24
	PORTB_OUTCLR = P11; 
    43f8:	92 e0       	ldi	r25, 0x02	; 2
    43fa:	90 83       	st	Z, r25
	PORTC_OUTCLR = P12; 
    43fc:	91 e0       	ldi	r25, 0x01	; 1
    43fe:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
	PORTB_OUTCLR = P13; 
    4402:	98 e0       	ldi	r25, 0x08	; 8
    4404:	90 83       	st	Z, r25
	PORTC_OUTSET = P14; 
    4406:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
    440a:	82 e3       	ldi	r24, 0x32	; 50
    440c:	81 50       	subi	r24, 0x01	; 1

	for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
    440e:	f1 f7       	brne	.-4      	; 0x440c <ReadMasterSwitches+0x20>
    4410:	82 e3       	ldi	r24, 0x32	; 50
    4412:	80 93 09 25 	sts	0x2509, r24	; 0x802509 <Wait>
    4416:	eb ef       	ldi	r30, 0xFB	; 251
    4418:	f9 e3       	ldi	r31, 0x39	; 57
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
	for (cntByte=0; cntByte<8; cntByte++)
	{
		// If bit set and switch isn't ON send event is necessery, else reset counter
		unsigned char Bits;                                                                   // = P5;
		//Bits = PORTC_IN;
		Bits = PORTR_IN;  // willem
    441e:	a8 ee       	ldi	r26, 0xE8	; 232
    4420:	b7 e0       	ldi	r27, 0x07	; 7
				EventBuffer[EventBufferPtrTop++] = 0x80 | cntByte;
			}
		}
		else if ((Bits&(0x01<<cntByte))&& (MasterData[cntByte]&0x80))
		{
			MasterData[cntByte]=ATTACK;
    4422:	51 e0       	ldi	r21, 0x01	; 1
    4424:	42 2f       	mov	r20, r18
	for (cntByte=0; cntByte<8; cntByte++)
	{
		// If bit set and switch isn't ON send event is necessery, else reset counter
		unsigned char Bits;                                                                   // = P5;
		//Bits = PORTC_IN;
		Bits = PORTR_IN;  // willem
    4426:	8c 91       	ld	r24, X
		Bits &=0x3;
		if ((!(Bits&(0x01<<cntByte))) && (!(MasterData[cntByte]&0x80)))
    4428:	b9 01       	movw	r22, r18
    442a:	83 70       	andi	r24, 0x03	; 3
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	02 2e       	mov	r0, r18
    4430:	02 c0       	rjmp	.+4      	; 0x4436 <ReadMasterSwitches+0x4a>
    4432:	95 95       	asr	r25
    4434:	87 95       	ror	r24
    4436:	0a 94       	dec	r0
    4438:	e2 f7       	brpl	.-8      	; 0x4432 <ReadMasterSwitches+0x46>
    443a:	80 fd       	sbrc	r24, 0
    443c:	18 c0       	rjmp	.+48     	; 0x446e <ReadMasterSwitches+0x82>
    443e:	80 81       	ld	r24, Z
    4440:	88 23       	and	r24, r24
    4442:	44 f1       	brlt	.+80     	; 0x4494 <ReadMasterSwitches+0xa8>
		{
			if ((--MasterData[cntByte])&0x80)
    4444:	81 50       	subi	r24, 0x01	; 1
    4446:	80 83       	st	Z, r24
    4448:	88 23       	and	r24, r24
    444a:	24 f5       	brge	.+72     	; 0x4494 <ReadMasterSwitches+0xa8>
			{
				EventBuffer[EventBufferPtrTop++] = 0x80 | cntByte;
    444c:	c0 91 8b 2b 	lds	r28, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    4450:	81 e0       	ldi	r24, 0x01	; 1
    4452:	8c 0f       	add	r24, r28
    4454:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    4458:	d0 e0       	ldi	r29, 0x00	; 0
    445a:	cc 0f       	add	r28, r28
    445c:	dd 1f       	adc	r29, r29
    445e:	c6 5f       	subi	r28, 0xF6	; 246
    4460:	da 4d       	sbci	r29, 0xDA	; 218
    4462:	40 68       	ori	r20, 0x80	; 128
    4464:	84 2f       	mov	r24, r20
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	88 83       	st	Y, r24
    446a:	99 83       	std	Y+1, r25	; 0x01
    446c:	13 c0       	rjmp	.+38     	; 0x4494 <ReadMasterSwitches+0xa8>
			}
		}
		else if ((Bits&(0x01<<cntByte))&& (MasterData[cntByte]&0x80))
    446e:	80 81       	ld	r24, Z
    4470:	88 23       	and	r24, r24
    4472:	84 f4       	brge	.+32     	; 0x4494 <ReadMasterSwitches+0xa8>
		{
			MasterData[cntByte]=ATTACK;
    4474:	50 83       	st	Z, r21
			EventBuffer[EventBufferPtrTop++] = 0x180 | cntByte;
    4476:	c0 91 8b 2b 	lds	r28, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	8c 0f       	add	r24, r28
    447e:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    4482:	d0 e0       	ldi	r29, 0x00	; 0
    4484:	cc 0f       	add	r28, r28
    4486:	dd 1f       	adc	r29, r29
    4488:	c6 5f       	subi	r28, 0xF6	; 246
    448a:	da 4d       	sbci	r29, 0xDA	; 218
    448c:	60 68       	ori	r22, 0x80	; 128
    448e:	71 60       	ori	r23, 0x01	; 1
    4490:	68 83       	st	Y, r22
    4492:	79 83       	std	Y+1, r23	; 0x01
    4494:	2f 5f       	subi	r18, 0xFF	; 255
    4496:	3f 4f       	sbci	r19, 0xFF	; 255
    4498:	31 96       	adiw	r30, 0x01	; 1
	PORTB_OUTCLR = P13; 
	PORTC_OUTSET = P14; 

	for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);

	for (cntByte=0; cntByte<8; cntByte++)
    449a:	28 30       	cpi	r18, 0x08	; 8
    449c:	31 05       	cpc	r19, r1
    449e:	11 f6       	brne	.-124    	; 0x4424 <ReadMasterSwitches+0x38>
		{
			MasterData[cntByte]=ATTACK;
			EventBuffer[EventBufferPtrTop++] = 0x180 | cntByte;
		}
	}
}
    44a0:	df 91       	pop	r29
    44a2:	cf 91       	pop	r28
    44a4:	08 95       	ret

000044a6 <ReadModuleSwitches>:




void ReadModuleSwitches(unsigned char High)
{
    44a6:	2f 92       	push	r2
    44a8:	3f 92       	push	r3
    44aa:	4f 92       	push	r4
    44ac:	5f 92       	push	r5
    44ae:	6f 92       	push	r6
    44b0:	7f 92       	push	r7
    44b2:	8f 92       	push	r8
    44b4:	9f 92       	push	r9
    44b6:	af 92       	push	r10
    44b8:	bf 92       	push	r11
    44ba:	cf 92       	push	r12
    44bc:	df 92       	push	r13
    44be:	ef 92       	push	r14
    44c0:	ff 92       	push	r15
    44c2:	1f 93       	push	r17
    44c4:	cf 93       	push	r28
    44c6:	df 93       	push	r29
    44c8:	cd b7       	in	r28, 0x3d	; 61
    44ca:	de b7       	in	r29, 0x3e	; 62
    44cc:	28 97       	sbiw	r28, 0x08	; 8
    44ce:	cd bf       	out	0x3d, r28	; 61
    44d0:	de bf       	out	0x3e, r29	; 62


	
	//P13 = High;  // AS3
	
	if (High==1)
    44d2:	81 30       	cpi	r24, 0x01	; 1
    44d4:	21 f4       	brne	.+8      	; 0x44de <ReadModuleSwitches+0x38>
		PORTB_OUTSET = P13;
    44d6:	98 e0       	ldi	r25, 0x08	; 8
    44d8:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <__TEXT_REGION_LENGTH__+0x7de625>
    44dc:	03 c0       	rjmp	.+6      	; 0x44e4 <ReadModuleSwitches+0x3e>
	else
		PORTB_OUTCLR = P13;
    44de:	98 e0       	ldi	r25, 0x08	; 8
    44e0:	90 93 26 06 	sts	0x0626, r25	; 0x800626 <__TEXT_REGION_LENGTH__+0x7de626>
	
	//P14 = 0; // Not read master  AS4
	PORTC_OUTCLR = P14;
    44e4:	94 e0       	ldi	r25, 0x04	; 4
    44e6:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
    44ea:	48 2e       	mov	r4, r24
    44ec:	51 2c       	mov	r5, r1
    44ee:	44 0c       	add	r4, r4
    44f0:	55 1c       	adc	r5, r5
    44f2:	44 0c       	add	r4, r4
    44f4:	55 1c       	adc	r5, r5
    44f6:	44 0c       	add	r4, r4
    44f8:	55 1c       	adc	r5, r5
    44fa:	92 01       	movw	r18, r4
    44fc:	22 0f       	add	r18, r18
    44fe:	33 1f       	adc	r19, r19
    4500:	22 0f       	add	r18, r18
    4502:	33 1f       	adc	r19, r19
    4504:	22 0f       	add	r18, r18
    4506:	33 1f       	adc	r19, r19
    4508:	2d 83       	std	Y+5, r18	; 0x05
    450a:	3e 83       	std	Y+6, r19	; 0x06

			
			
			for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
			
			if ((!(Bits&(0x01<<cntModule))) && (!(ModuleData[cntModule+(8*High)][cntByte]&0x80)))
    450c:	21 2c       	mov	r2, r1
    450e:	31 2c       	mov	r3, r1
			{	
				PORTB_OUTSET = P10;
			}
			else
			{
				PORTB_OUTCLR = P10;
    4510:	0f 2e       	mov	r0, r31
    4512:	f6 e2       	ldi	r31, 0x26	; 38
    4514:	8f 2e       	mov	r8, r31
    4516:	f6 e0       	ldi	r31, 0x06	; 6
    4518:	9f 2e       	mov	r9, r31
    451a:	f0 2d       	mov	r31, r0
    451c:	68 94       	set
    451e:	ff 24       	eor	r15, r15
    4520:	f2 f8       	bld	r15, 2
			//PORTD_OUT |= cntByte&0x04;  // AS2
			
			
			if(cntByte&0x01)
			{	
				PORTB_OUTSET = P10;
    4522:	0f 2e       	mov	r0, r31
    4524:	f5 e2       	ldi	r31, 0x25	; 37
    4526:	6f 2e       	mov	r6, r31
    4528:	f6 e0       	ldi	r31, 0x06	; 6
    452a:	7f 2e       	mov	r7, r31
    452c:	f0 2d       	mov	r31, r0
			{
				PORTB_OUTSET = P11;
			}
			else
			{
				PORTB_OUTCLR = P11;
    452e:	68 94       	set
    4530:	cc 24       	eor	r12, r12
    4532:	c1 f8       	bld	r12, 1
			{
				PORTC_OUTSET = P12;
			}
			else
			{
				PORTC_OUTCLR = P12;
    4534:	dd 24       	eor	r13, r13
    4536:	d3 94       	inc	r13

			// If bit set and switch isn't ON send event is necessery, else reset counter
			//Bits = P5;
			//Bits &=0x3;  // willem
			
			if ( (PORTR_IN&0x2)&0x2 ) // SW1 PR1
    4538:	0f 2e       	mov	r0, r31
    453a:	f8 ee       	ldi	r31, 0xE8	; 232
    453c:	af 2e       	mov	r10, r31
    453e:	f7 e0       	ldi	r31, 0x07	; 7
    4540:	bf 2e       	mov	r11, r31
    4542:	f0 2d       	mov	r31, r0
    4544:	52 e3       	ldi	r21, 0x32	; 50
    4546:	09 c1       	rjmp	.+530    	; 0x475a <ReadModuleSwitches+0x2b4>
			//PORTD_OUT |= cntByte&0x01;  // AS0
			//PORTD_OUT |= cntByte&0x02;  // AS1
			//PORTD_OUT |= cntByte&0x04;  // AS2
			
			
			if(cntByte&0x01)
    4548:	11 23       	and	r17, r17
    454a:	19 f0       	breq	.+6      	; 0x4552 <ReadModuleSwitches+0xac>
			{	
				PORTB_OUTSET = P10;
    454c:	f3 01       	movw	r30, r6
    454e:	f0 82       	st	Z, r15
    4550:	02 c0       	rjmp	.+4      	; 0x4556 <ReadModuleSwitches+0xb0>
			}
			else
			{
				PORTB_OUTCLR = P10;
    4552:	f4 01       	movw	r30, r8
    4554:	f0 82       	st	Z, r15
			}
			
			
			if(cntByte&0x02)
    4556:	ee 20       	and	r14, r14
    4558:	19 f0       	breq	.+6      	; 0x4560 <ReadModuleSwitches+0xba>
			{
				PORTB_OUTSET = P11;
    455a:	f3 01       	movw	r30, r6
    455c:	c0 82       	st	Z, r12
    455e:	02 c0       	rjmp	.+4      	; 0x4564 <ReadModuleSwitches+0xbe>
			}
			else
			{
				PORTB_OUTCLR = P11;
    4560:	f4 01       	movw	r30, r8
    4562:	c0 82       	st	Z, r12
			}
			
			
			if(cntByte&0x04)
    4564:	44 23       	and	r20, r20
    4566:	21 f0       	breq	.+8      	; 0x4570 <ReadModuleSwitches+0xca>
			{
				PORTC_OUTSET = P12;
    4568:	e5 e4       	ldi	r30, 0x45	; 69
    456a:	f6 e0       	ldi	r31, 0x06	; 6
    456c:	d0 82       	st	Z, r13
    456e:	03 c0       	rjmp	.+6      	; 0x4576 <ReadModuleSwitches+0xd0>
			}
			else
			{
				PORTC_OUTCLR = P12;
    4570:	e6 e4       	ldi	r30, 0x46	; 70
    4572:	f6 e0       	ldi	r31, 0x06	; 6
    4574:	d0 82       	st	Z, r13




void ReadModuleSwitches(unsigned char High)
{
    4576:	22 e3       	ldi	r18, 0x32	; 50
    4578:	ef 81       	ldd	r30, Y+7	; 0x07
    457a:	f8 85       	ldd	r31, Y+8	; 0x08
    457c:	21 50       	subi	r18, 0x01	; 1
			//PORTD_OUT |= 0x2;
			//PORTD_OUT &= ~0x4;
			//PORTD_OUT &= ~0x8;
			//PORTD_OUT &= ~0x10;					

			for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
    457e:	f1 f7       	brne	.-4      	; 0x457c <ReadModuleSwitches+0xd6>
    4580:	ef 83       	std	Y+7, r30	; 0x07
    4582:	f8 87       	std	Y+8, r31	; 0x08
    4584:	50 93 09 25 	sts	0x2509, r21	; 0x802509 <Wait>

			// If bit set and switch isn't ON send event is necessery, else reset counter
			//Bits = P5;
			//Bits &=0x3;  // willem
			
			if ( (PORTR_IN&0x2)&0x2 ) // SW1 PR1
    4588:	f5 01       	movw	r30, r10
    458a:	20 81       	ld	r18, Z
    458c:	21 ff       	sbrs	r18, 1
    458e:	06 c0       	rjmp	.+12     	; 0x459c <ReadModuleSwitches+0xf6>
				Bits |= 0x1;
    4590:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    4594:	21 60       	ori	r18, 0x01	; 1
    4596:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
    459a:	05 c0       	rjmp	.+10     	; 0x45a6 <ReadModuleSwitches+0x100>
			else
				Bits  &= ~0x1;
    459c:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    45a0:	2e 7f       	andi	r18, 0xFE	; 254
    45a2:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
			
			if ( (PORTR_IN&0x1)&0x1 ) // SW2 PR0
    45a6:	f5 01       	movw	r30, r10
    45a8:	20 81       	ld	r18, Z
    45aa:	20 ff       	sbrs	r18, 0
    45ac:	06 c0       	rjmp	.+12     	; 0x45ba <ReadModuleSwitches+0x114>
				Bits |= 0x2;
    45ae:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    45b2:	22 60       	ori	r18, 0x02	; 2
    45b4:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
    45b8:	05 c0       	rjmp	.+10     	; 0x45c4 <ReadModuleSwitches+0x11e>
			else
				Bits &= ~0x2;
    45ba:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    45be:	2d 7f       	andi	r18, 0xFD	; 253
    45c0:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
			
				
			if ( (PORTD_IN&0x8)&0x8 )  // SW3 PD3 
    45c4:	e8 e6       	ldi	r30, 0x68	; 104
    45c6:	f6 e0       	ldi	r31, 0x06	; 6
    45c8:	20 81       	ld	r18, Z
    45ca:	23 ff       	sbrs	r18, 3
    45cc:	06 c0       	rjmp	.+12     	; 0x45da <ReadModuleSwitches+0x134>
				Bits |= 0x4;
    45ce:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    45d2:	24 60       	ori	r18, 0x04	; 4
    45d4:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
    45d8:	05 c0       	rjmp	.+10     	; 0x45e4 <ReadModuleSwitches+0x13e>
			else
				Bits &= ~0x4;
    45da:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    45de:	2b 7f       	andi	r18, 0xFB	; 251
    45e0:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
			
			if ( (PORTD_IN&0x4)&0x4 )  // SW4 PD2
    45e4:	e8 e6       	ldi	r30, 0x68	; 104
    45e6:	f6 e0       	ldi	r31, 0x06	; 6
    45e8:	20 81       	ld	r18, Z
    45ea:	22 ff       	sbrs	r18, 2
    45ec:	06 c0       	rjmp	.+12     	; 0x45fa <ReadModuleSwitches+0x154>
				Bits |= 0x8;
    45ee:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    45f2:	28 60       	ori	r18, 0x08	; 8
    45f4:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
    45f8:	05 c0       	rjmp	.+10     	; 0x4604 <ReadModuleSwitches+0x15e>
			else
				Bits  &= ~0x8;		
    45fa:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    45fe:	27 7f       	andi	r18, 0xF7	; 247
    4600:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
				
				
			if ( (PORTD_IN&0x80)&0x80 )  // SW5 PD7
    4604:	e8 e6       	ldi	r30, 0x68	; 104
    4606:	f6 e0       	ldi	r31, 0x06	; 6
    4608:	20 81       	ld	r18, Z
    460a:	22 23       	and	r18, r18
    460c:	34 f4       	brge	.+12     	; 0x461a <ReadModuleSwitches+0x174>
			Bits |= 0x10;
    460e:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    4612:	20 61       	ori	r18, 0x10	; 16
    4614:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
    4618:	05 c0       	rjmp	.+10     	; 0x4624 <ReadModuleSwitches+0x17e>
			else
			Bits &= ~0x10;
    461a:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    461e:	2f 7e       	andi	r18, 0xEF	; 239
    4620:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
			
			if ( (PORTD_IN&0x40)&0x40 )  // SW6 PD6
    4624:	e8 e6       	ldi	r30, 0x68	; 104
    4626:	f6 e0       	ldi	r31, 0x06	; 6
    4628:	20 81       	ld	r18, Z
    462a:	26 ff       	sbrs	r18, 6
    462c:	06 c0       	rjmp	.+12     	; 0x463a <ReadModuleSwitches+0x194>
			Bits |= 0x20;
    462e:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    4632:	20 62       	ori	r18, 0x20	; 32
    4634:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
    4638:	05 c0       	rjmp	.+10     	; 0x4644 <ReadModuleSwitches+0x19e>
			else
			Bits  &= ~0x20;		
    463a:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    463e:	2f 7d       	andi	r18, 0xDF	; 223
    4640:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
			
			
			if ( (PORTD_IN&0x20)&0x20 )  // SW7 PD5
    4644:	e8 e6       	ldi	r30, 0x68	; 104
    4646:	f6 e0       	ldi	r31, 0x06	; 6
    4648:	20 81       	ld	r18, Z
    464a:	25 ff       	sbrs	r18, 5
    464c:	06 c0       	rjmp	.+12     	; 0x465a <ReadModuleSwitches+0x1b4>
			Bits |= 0x40;
    464e:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    4652:	20 64       	ori	r18, 0x40	; 64
    4654:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
    4658:	05 c0       	rjmp	.+10     	; 0x4664 <ReadModuleSwitches+0x1be>
			else
			Bits &= ~0x40;
    465a:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    465e:	2f 7b       	andi	r18, 0xBF	; 191
    4660:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
			
			if ( (PORTD_IN&0x10)&0x10 )  // SW8 PD4
    4664:	e8 e6       	ldi	r30, 0x68	; 104
    4666:	f6 e0       	ldi	r31, 0x06	; 6
    4668:	20 81       	ld	r18, Z
    466a:	24 ff       	sbrs	r18, 4
    466c:	06 c0       	rjmp	.+12     	; 0x467a <ReadModuleSwitches+0x1d4>
			Bits |= 0x80;
    466e:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    4672:	20 68       	ori	r18, 0x80	; 128
    4674:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>
    4678:	05 c0       	rjmp	.+10     	; 0x4684 <ReadModuleSwitches+0x1de>
			else
			Bits  &= ~0x80;							
    467a:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    467e:	2f 77       	andi	r18, 0x7F	; 127
    4680:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <Bits>




void ReadModuleSwitches(unsigned char High)
{
    4684:	22 e3       	ldi	r18, 0x32	; 50
    4686:	ef 81       	ldd	r30, Y+7	; 0x07
    4688:	f8 85       	ldd	r31, Y+8	; 0x08
    468a:	21 50       	subi	r18, 0x01	; 1
			Bits  &= ~0x80;							
			

			
			
			for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
    468c:	f1 f7       	brne	.-4      	; 0x468a <ReadModuleSwitches+0x1e4>
    468e:	ef 83       	std	Y+7, r30	; 0x07
    4690:	f8 87       	std	Y+8, r31	; 0x08
    4692:	50 93 09 25 	sts	0x2509, r21	; 0x802509 <Wait>
			
			if ((!(Bits&(0x01<<cntModule))) && (!(ModuleData[cntModule+(8*High)][cntByte]&0x80)))
    4696:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	08 2e       	mov	r0, r24
    469e:	02 c0       	rjmp	.+4      	; 0x46a4 <ReadModuleSwitches+0x1fe>
    46a0:	35 95       	asr	r19
    46a2:	27 95       	ror	r18
    46a4:	0a 94       	dec	r0
    46a6:	e2 f7       	brpl	.-8      	; 0x46a0 <ReadModuleSwitches+0x1fa>
    46a8:	20 fd       	sbrc	r18, 0
    46aa:	23 c0       	rjmp	.+70     	; 0x46f2 <ReadModuleSwitches+0x24c>
    46ac:	b2 01       	movw	r22, r4
    46ae:	68 0f       	add	r22, r24
    46b0:	79 1f       	adc	r23, r25
    46b2:	2c 91       	ld	r18, X
    46b4:	22 23       	and	r18, r18
    46b6:	f4 f1       	brlt	.+124    	; 0x4734 <ReadModuleSwitches+0x28e>
			{
				if ((--ModuleData[cntModule+(8*High)][cntByte])&0x80)
    46b8:	21 50       	subi	r18, 0x01	; 1
    46ba:	2c 93       	st	X, r18
    46bc:	22 23       	and	r18, r18
    46be:	d4 f5       	brge	.+116    	; 0x4734 <ReadModuleSwitches+0x28e>
				{
					EventBuffer[EventBufferPtrTop++] = ((cntModule+(8*High))<<3) | cntByte;
    46c0:	20 91 8b 2b 	lds	r18, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    46c4:	31 e0       	ldi	r19, 0x01	; 1
    46c6:	32 0f       	add	r19, r18
    46c8:	30 93 8b 2b 	sts	0x2B8B, r19	; 0x802b8b <EventBufferPtrTop>
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	22 0f       	add	r18, r18
    46d0:	33 1f       	adc	r19, r19
    46d2:	26 5f       	subi	r18, 0xF6	; 246
    46d4:	3a 4d       	sbci	r19, 0xDA	; 218
    46d6:	66 0f       	add	r22, r22
    46d8:	77 1f       	adc	r23, r23
    46da:	66 0f       	add	r22, r22
    46dc:	77 1f       	adc	r23, r23
    46de:	66 0f       	add	r22, r22
    46e0:	77 1f       	adc	r23, r23
    46e2:	e9 81       	ldd	r30, Y+1	; 0x01
    46e4:	fa 81       	ldd	r31, Y+2	; 0x02
    46e6:	6e 2b       	or	r22, r30
    46e8:	7f 2b       	or	r23, r31
    46ea:	f9 01       	movw	r30, r18
    46ec:	60 83       	st	Z, r22
    46ee:	71 83       	std	Z+1, r23	; 0x01
    46f0:	21 c0       	rjmp	.+66     	; 0x4734 <ReadModuleSwitches+0x28e>
    46f2:	b2 01       	movw	r22, r4
    46f4:	68 0f       	add	r22, r24
    46f6:	79 1f       	adc	r23, r25
				}
			}
			else if ((Bits&(0x01<<cntModule)) && (ModuleData[cntModule+(8*High)][cntByte]&0x80))
    46f8:	ef 81       	ldd	r30, Y+7	; 0x07
    46fa:	f8 85       	ldd	r31, Y+8	; 0x08
    46fc:	20 81       	ld	r18, Z
    46fe:	22 23       	and	r18, r18
    4700:	cc f4       	brge	.+50     	; 0x4734 <ReadModuleSwitches+0x28e>
			{
				ModuleData[cntModule+(8*High)][cntByte]=ATTACK;
    4702:	d0 82       	st	Z, r13
				EventBuffer[EventBufferPtrTop++] = 0x100 | ((cntModule+(8*High))<<3) | cntByte;
    4704:	20 91 8b 2b 	lds	r18, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    4708:	31 e0       	ldi	r19, 0x01	; 1
    470a:	32 0f       	add	r19, r18
    470c:	30 93 8b 2b 	sts	0x2B8B, r19	; 0x802b8b <EventBufferPtrTop>
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	22 0f       	add	r18, r18
    4714:	33 1f       	adc	r19, r19
    4716:	26 5f       	subi	r18, 0xF6	; 246
    4718:	3a 4d       	sbci	r19, 0xDA	; 218
    471a:	66 0f       	add	r22, r22
    471c:	77 1f       	adc	r23, r23
    471e:	66 0f       	add	r22, r22
    4720:	77 1f       	adc	r23, r23
    4722:	66 0f       	add	r22, r22
    4724:	77 1f       	adc	r23, r23
    4726:	eb 81       	ldd	r30, Y+3	; 0x03
    4728:	fc 81       	ldd	r31, Y+4	; 0x04
    472a:	6e 2b       	or	r22, r30
    472c:	7f 2b       	or	r23, r31
    472e:	f9 01       	movw	r30, r18
    4730:	60 83       	st	Z, r22
    4732:	71 83       	std	Z+1, r23	; 0x01
    4734:	01 96       	adiw	r24, 0x01	; 1
    4736:	18 96       	adiw	r26, 0x08	; 8
    4738:	2f 81       	ldd	r18, Y+7	; 0x07
    473a:	38 85       	ldd	r19, Y+8	; 0x08
    473c:	28 5f       	subi	r18, 0xF8	; 248
    473e:	3f 4f       	sbci	r19, 0xFF	; 255
    4740:	2f 83       	std	Y+7, r18	; 0x07
    4742:	38 87       	std	Y+8, r19	; 0x08
	//P14 = 0; // Not read master  AS4
	PORTC_OUTCLR = P14;

	for (cntByte=0; cntByte<8; cntByte++)
	{
		for (cntModule=0; cntModule<8; cntModule++)
    4744:	88 30       	cpi	r24, 0x08	; 8
    4746:	91 05       	cpc	r25, r1
    4748:	09 f0       	breq	.+2      	; 0x474c <ReadModuleSwitches+0x2a6>
    474a:	fe ce       	rjmp	.-516    	; 0x4548 <ReadModuleSwitches+0xa2>
    474c:	3f ef       	ldi	r19, 0xFF	; 255
    474e:	23 1a       	sub	r2, r19
    4750:	33 0a       	sbc	r3, r19
		PORTB_OUTCLR = P13;
	
	//P14 = 0; // Not read master  AS4
	PORTC_OUTCLR = P14;

	for (cntByte=0; cntByte<8; cntByte++)
    4752:	68 e0       	ldi	r22, 0x08	; 8
    4754:	26 16       	cp	r2, r22
    4756:	31 04       	cpc	r3, r1
    4758:	c9 f0       	breq	.+50     	; 0x478c <ReadModuleSwitches+0x2e6>
    475a:	42 2d       	mov	r20, r2
    475c:	6d 81       	ldd	r22, Y+5	; 0x05
    475e:	7e 81       	ldd	r23, Y+6	; 0x06
    4760:	62 0d       	add	r22, r2
    4762:	73 1d       	adc	r23, r3
    4764:	65 5f       	subi	r22, 0xF5	; 245
    4766:	74 4d       	sbci	r23, 0xD4	; 212




void ReadModuleSwitches(unsigned char High)
{
    4768:	db 01       	movw	r26, r22
    476a:	80 e0       	ldi	r24, 0x00	; 0
    476c:	90 e0       	ldi	r25, 0x00	; 0
			//PORTD_OUT |= cntByte&0x01;  // AS0
			//PORTD_OUT |= cntByte&0x02;  // AS1
			//PORTD_OUT |= cntByte&0x04;  // AS2
			
			
			if(cntByte&0x01)
    476e:	12 2d       	mov	r17, r2
    4770:	11 70       	andi	r17, 0x01	; 1
			{
				PORTB_OUTCLR = P10;
			}
			
			
			if(cntByte&0x02)
    4772:	e2 2d       	mov	r30, r2
    4774:	e2 70       	andi	r30, 0x02	; 2
    4776:	ee 2e       	mov	r14, r30
			{
				PORTB_OUTCLR = P11;
			}
			
			
			if(cntByte&0x04)
    4778:	44 70       	andi	r20, 0x04	; 4
				}
			}
			else if ((Bits&(0x01<<cntModule)) && (ModuleData[cntModule+(8*High)][cntByte]&0x80))
			{
				ModuleData[cntModule+(8*High)][cntByte]=ATTACK;
				EventBuffer[EventBufferPtrTop++] = 0x100 | ((cntModule+(8*High))<<3) | cntByte;
    477a:	91 01       	movw	r18, r2
    477c:	31 60       	ori	r19, 0x01	; 1
    477e:	2b 83       	std	Y+3, r18	; 0x03
    4780:	3c 83       	std	Y+4, r19	; 0x04

			
			
			for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
			
			if ((!(Bits&(0x01<<cntModule))) && (!(ModuleData[cntModule+(8*High)][cntByte]&0x80)))
    4782:	29 82       	std	Y+1, r2	; 0x01
    4784:	3a 82       	std	Y+2, r3	; 0x02
    4786:	6f 83       	std	Y+7, r22	; 0x07
    4788:	78 87       	std	Y+8, r23	; 0x08
    478a:	de ce       	rjmp	.-580    	; 0x4548 <ReadModuleSwitches+0xa2>
				ModuleData[cntModule+(8*High)][cntByte]=ATTACK;
				EventBuffer[EventBufferPtrTop++] = 0x100 | ((cntModule+(8*High))<<3) | cntByte;
			}
		}
	}
}
    478c:	28 96       	adiw	r28, 0x08	; 8
    478e:	cd bf       	out	0x3d, r28	; 61
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	df 91       	pop	r29
    4794:	cf 91       	pop	r28
    4796:	1f 91       	pop	r17
    4798:	ff 90       	pop	r15
    479a:	ef 90       	pop	r14
    479c:	df 90       	pop	r13
    479e:	cf 90       	pop	r12
    47a0:	bf 90       	pop	r11
    47a2:	af 90       	pop	r10
    47a4:	9f 90       	pop	r9
    47a6:	8f 90       	pop	r8
    47a8:	7f 90       	pop	r7
    47aa:	6f 90       	pop	r6
    47ac:	5f 90       	pop	r5
    47ae:	4f 90       	pop	r4
    47b0:	3f 90       	pop	r3
    47b2:	2f 90       	pop	r2
    47b4:	08 95       	ret

000047b6 <ReadConsole>:

unsigned char Bits;

void ReadConsole()
{
	ReadMasterSwitches();
    47b6:	0e 94 f6 21 	call	0x43ec	; 0x43ec <ReadMasterSwitches>
    47ba:	82 e3       	ldi	r24, 0x32	; 50
    47bc:	81 50       	subi	r24, 0x01	; 1
	//PORTB_OUTCLR = P10;
	//PORTB_OUTCLR = P11;
	//PORTC_OUTCLR = P12;
	//PORTB_OUTCLR = P13;
	//PORTC_OUTSET = P14;
	for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
    47be:	f1 f7       	brne	.-4      	; 0x47bc <ReadConsole+0x6>
    47c0:	82 e3       	ldi	r24, 0x32	; 50
    47c2:	80 93 09 25 	sts	0x2509, r24	; 0x802509 <Wait>
	ReadModuleSwitches(MODULE1_8);
    47c6:	80 e0       	ldi	r24, 0x00	; 0
    47c8:	0e 94 53 22 	call	0x44a6	; 0x44a6 <ReadModuleSwitches>
	ReadModuleSwitches(MODULE9_16);
    47cc:	81 e0       	ldi	r24, 0x01	; 1
    47ce:	0e 94 53 22 	call	0x44a6	; 0x44a6 <ReadModuleSwitches>
    47d2:	08 95       	ret

000047d4 <ShowConfig>:
	}
}


void ShowConfig()
{
    47d4:	cf 93       	push	r28
    47d6:	df 93       	push	r29
    47d8:	cd b7       	in	r28, 0x3d	; 61
    47da:	de b7       	in	r29, 0x3e	; 62
    47dc:	61 97       	sbiw	r28, 0x11	; 17
    47de:	cd bf       	out	0x3d, r28	; 61
    47e0:	de bf       	out	0x3e, r29	; 62
	char TextBuffer[17];
	unsigned char Ptr=0;

	
	TextBuffer[Ptr++] = 'S'; //"StMod:x Telco:xx"
    47e2:	83 e5       	ldi	r24, 0x53	; 83
    47e4:	89 83       	std	Y+1, r24	; 0x01
	TextBuffer[Ptr++] = 't'; //"StMod:xx Telco:x"
    47e6:	84 e7       	ldi	r24, 0x74	; 116
    47e8:	8a 83       	std	Y+2, r24	; 0x02
	TextBuffer[Ptr++] = 'M';
    47ea:	8d e4       	ldi	r24, 0x4D	; 77
    47ec:	8b 83       	std	Y+3, r24	; 0x03
	TextBuffer[Ptr++] = 'o';
    47ee:	8f e6       	ldi	r24, 0x6F	; 111
    47f0:	8c 83       	std	Y+4, r24	; 0x04
	TextBuffer[Ptr++] = 'd';
    47f2:	84 e6       	ldi	r24, 0x64	; 100
    47f4:	8d 83       	std	Y+5, r24	; 0x05
	TextBuffer[Ptr++] = ':';
    47f6:	8a e3       	ldi	r24, 0x3A	; 58
    47f8:	8e 83       	std	Y+6, r24	; 0x06
	
	if ((NrOfTriples/10)!=0)
    47fa:	20 91 c2 22 	lds	r18, 0x22C2	; 0x8022c2 <NrOfTriples>
    47fe:	2a 30       	cpi	r18, 0x0A	; 10
    4800:	58 f0       	brcs	.+22     	; 0x4818 <ShowConfig+0x44>
	{
		TextBuffer[Ptr++] = 0x30+(NrOfTriples/10);
    4802:	8d ec       	ldi	r24, 0xCD	; 205
    4804:	28 9f       	mul	r18, r24
    4806:	81 2d       	mov	r24, r1
    4808:	11 24       	eor	r1, r1
    480a:	86 95       	lsr	r24
    480c:	86 95       	lsr	r24
    480e:	86 95       	lsr	r24
    4810:	80 5d       	subi	r24, 0xD0	; 208
    4812:	8f 83       	std	Y+7, r24	; 0x07
    4814:	87 e0       	ldi	r24, 0x07	; 7
    4816:	01 c0       	rjmp	.+2      	; 0x481a <ShowConfig+0x46>
	TextBuffer[Ptr++] = 'S'; //"StMod:x Telco:xx"
	TextBuffer[Ptr++] = 't'; //"StMod:xx Telco:x"
	TextBuffer[Ptr++] = 'M';
	TextBuffer[Ptr++] = 'o';
	TextBuffer[Ptr++] = 'd';
	TextBuffer[Ptr++] = ':';
    4818:	86 e0       	ldi	r24, 0x06	; 6
	if ((NrOfTriples/10)!=0)
	{
		TextBuffer[Ptr++] = 0x30+(NrOfTriples/10);
	}

	TextBuffer[Ptr++] = 0x30+(NrOfTriples%10);
    481a:	e1 e0       	ldi	r30, 0x01	; 1
    481c:	f0 e0       	ldi	r31, 0x00	; 0
    481e:	ec 0f       	add	r30, r28
    4820:	fd 1f       	adc	r31, r29
    4822:	e8 0f       	add	r30, r24
    4824:	f1 1d       	adc	r31, r1
    4826:	9d ec       	ldi	r25, 0xCD	; 205
    4828:	29 9f       	mul	r18, r25
    482a:	91 2d       	mov	r25, r1
    482c:	11 24       	eor	r1, r1
    482e:	96 95       	lsr	r25
    4830:	96 95       	lsr	r25
    4832:	96 95       	lsr	r25
    4834:	99 0f       	add	r25, r25
    4836:	39 2f       	mov	r19, r25
    4838:	33 0f       	add	r19, r19
    483a:	33 0f       	add	r19, r19
    483c:	93 0f       	add	r25, r19
    483e:	29 1b       	sub	r18, r25
    4840:	20 5d       	subi	r18, 0xD0	; 208
    4842:	20 83       	st	Z, r18
	
	TextBuffer[Ptr++] = ' ';
    4844:	91 e0       	ldi	r25, 0x01	; 1
    4846:	98 0f       	add	r25, r24
    4848:	e1 e0       	ldi	r30, 0x01	; 1
    484a:	f0 e0       	ldi	r31, 0x00	; 0
    484c:	ec 0f       	add	r30, r28
    484e:	fd 1f       	adc	r31, r29
    4850:	e9 0f       	add	r30, r25
    4852:	f1 1d       	adc	r31, r1
    4854:	90 e2       	ldi	r25, 0x20	; 32
    4856:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'T';
    4858:	92 e0       	ldi	r25, 0x02	; 2
    485a:	98 0f       	add	r25, r24
    485c:	e1 e0       	ldi	r30, 0x01	; 1
    485e:	f0 e0       	ldi	r31, 0x00	; 0
    4860:	ec 0f       	add	r30, r28
    4862:	fd 1f       	adc	r31, r29
    4864:	e9 0f       	add	r30, r25
    4866:	f1 1d       	adc	r31, r1
    4868:	94 e5       	ldi	r25, 0x54	; 84
    486a:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'e';
    486c:	93 e0       	ldi	r25, 0x03	; 3
    486e:	98 0f       	add	r25, r24
    4870:	e1 e0       	ldi	r30, 0x01	; 1
    4872:	f0 e0       	ldi	r31, 0x00	; 0
    4874:	ec 0f       	add	r30, r28
    4876:	fd 1f       	adc	r31, r29
    4878:	e9 0f       	add	r30, r25
    487a:	f1 1d       	adc	r31, r1
    487c:	95 e6       	ldi	r25, 0x65	; 101
    487e:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'l';
    4880:	94 e0       	ldi	r25, 0x04	; 4
    4882:	98 0f       	add	r25, r24
    4884:	e1 e0       	ldi	r30, 0x01	; 1
    4886:	f0 e0       	ldi	r31, 0x00	; 0
    4888:	ec 0f       	add	r30, r28
    488a:	fd 1f       	adc	r31, r29
    488c:	e9 0f       	add	r30, r25
    488e:	f1 1d       	adc	r31, r1
    4890:	9c e6       	ldi	r25, 0x6C	; 108
    4892:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'c';
    4894:	95 e0       	ldi	r25, 0x05	; 5
    4896:	98 0f       	add	r25, r24
    4898:	e1 e0       	ldi	r30, 0x01	; 1
    489a:	f0 e0       	ldi	r31, 0x00	; 0
    489c:	ec 0f       	add	r30, r28
    489e:	fd 1f       	adc	r31, r29
    48a0:	e9 0f       	add	r30, r25
    48a2:	f1 1d       	adc	r31, r1
    48a4:	93 e6       	ldi	r25, 0x63	; 99
    48a6:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'o';
    48a8:	96 e0       	ldi	r25, 0x06	; 6
    48aa:	98 0f       	add	r25, r24
    48ac:	e1 e0       	ldi	r30, 0x01	; 1
    48ae:	f0 e0       	ldi	r31, 0x00	; 0
    48b0:	ec 0f       	add	r30, r28
    48b2:	fd 1f       	adc	r31, r29
    48b4:	e9 0f       	add	r30, r25
    48b6:	f1 1d       	adc	r31, r1
    48b8:	9f e6       	ldi	r25, 0x6F	; 111
    48ba:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = ':';
    48bc:	28 e0       	ldi	r18, 0x08	; 8
    48be:	28 0f       	add	r18, r24
    48c0:	97 e0       	ldi	r25, 0x07	; 7
    48c2:	98 0f       	add	r25, r24
    48c4:	e1 e0       	ldi	r30, 0x01	; 1
    48c6:	f0 e0       	ldi	r31, 0x00	; 0
    48c8:	ec 0f       	add	r30, r28
    48ca:	fd 1f       	adc	r31, r29
    48cc:	e9 0f       	add	r30, r25
    48ce:	f1 1d       	adc	r31, r1
    48d0:	9a e3       	ldi	r25, 0x3A	; 58
    48d2:	90 83       	st	Z, r25
	
	if ((NrOfTelcos/10)!=0)
    48d4:	90 91 c3 22 	lds	r25, 0x22C3	; 0x8022c3 <NrOfTelcos>
    48d8:	9a 30       	cpi	r25, 0x0A	; 10
    48da:	70 f0       	brcs	.+28     	; 0x48f8 <ShowConfig+0x124>
	{
		TextBuffer[Ptr++] = 0x30+(NrOfTelcos/10);
    48dc:	fe 01       	movw	r30, r28
    48de:	e2 0f       	add	r30, r18
    48e0:	f1 1d       	adc	r31, r1
    48e2:	2d ec       	ldi	r18, 0xCD	; 205
    48e4:	92 9f       	mul	r25, r18
    48e6:	21 2d       	mov	r18, r1
    48e8:	11 24       	eor	r1, r1
    48ea:	26 95       	lsr	r18
    48ec:	26 95       	lsr	r18
    48ee:	26 95       	lsr	r18
    48f0:	20 5d       	subi	r18, 0xD0	; 208
    48f2:	21 83       	std	Z+1, r18	; 0x01
    48f4:	29 e0       	ldi	r18, 0x09	; 9
    48f6:	28 0f       	add	r18, r24
	////	else
	////	{
	////		TextBuffer[Ptr++] = ' ';
	////	}
	
	TextBuffer[Ptr++] = 0x30+(NrOfTelcos%10);
    48f8:	e1 e0       	ldi	r30, 0x01	; 1
    48fa:	f0 e0       	ldi	r31, 0x00	; 0
    48fc:	ec 0f       	add	r30, r28
    48fe:	fd 1f       	adc	r31, r29
    4900:	e2 0f       	add	r30, r18
    4902:	f1 1d       	adc	r31, r1
    4904:	8d ec       	ldi	r24, 0xCD	; 205
    4906:	98 9f       	mul	r25, r24
    4908:	81 2d       	mov	r24, r1
    490a:	11 24       	eor	r1, r1
    490c:	86 95       	lsr	r24
    490e:	86 95       	lsr	r24
    4910:	86 95       	lsr	r24
    4912:	88 0f       	add	r24, r24
    4914:	38 2f       	mov	r19, r24
    4916:	33 0f       	add	r19, r19
    4918:	33 0f       	add	r19, r19
    491a:	83 0f       	add	r24, r19
    491c:	98 1b       	sub	r25, r24
    491e:	90 5d       	subi	r25, 0xD0	; 208
    4920:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 0;
    4922:	2f 5f       	subi	r18, 0xFF	; 255
    4924:	e1 e0       	ldi	r30, 0x01	; 1
    4926:	f0 e0       	ldi	r31, 0x00	; 0
    4928:	ec 0f       	add	r30, r28
    492a:	fd 1f       	adc	r31, r29
    492c:	e2 0f       	add	r30, r18
    492e:	f1 1d       	adc	r31, r1
    4930:	10 82       	st	Z, r1
	
	SetLCD(0,"\xC0");
    4932:	6f e2       	ldi	r22, 0x2F	; 47
    4934:	70 e2       	ldi	r23, 0x20	; 32
    4936:	80 e0       	ldi	r24, 0x00	; 0
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>
	SetLCD(1,TextBuffer);
    493e:	be 01       	movw	r22, r28
    4940:	6f 5f       	subi	r22, 0xFF	; 255
    4942:	7f 4f       	sbci	r23, 0xFF	; 255
    4944:	81 e0       	ldi	r24, 0x01	; 1
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	0e 94 2a 21 	call	0x4254	; 0x4254 <SetLCD>

}
    494c:	61 96       	adiw	r28, 0x11	; 17
    494e:	cd bf       	out	0x3d, r28	; 61
    4950:	de bf       	out	0x3e, r29	; 62
    4952:	df 91       	pop	r29
    4954:	cf 91       	pop	r28
    4956:	08 95       	ret

00004958 <DoSerial>:
uint16_t wacht;
	
char IDString[30]= "D&R Airlab v2.04 - 08/2006";

void DoSerial()
{
    4958:	0f 93       	push	r16
    495a:	1f 93       	push	r17
    495c:	cf 93       	push	r28
    495e:	df 93       	push	r29

	
	unsigned char Event = SerialBufferIn[SerialBufferInPtrBottom++];
    4960:	20 91 24 21 	lds	r18, 0x2124	; 0x802124 <SerialBufferInPtrBottom>
    4964:	e2 2f       	mov	r30, r18
    4966:	f0 e0       	ldi	r31, 0x00	; 0
    4968:	ea 5d       	subi	r30, 0xDA	; 218
    496a:	fe 4d       	sbci	r31, 0xDE	; 222
    496c:	e0 81       	ld	r30, Z
	unsigned char Channel = SerialBufferIn[SerialBufferInPtrBottom++];
    496e:	a1 e0       	ldi	r26, 0x01	; 1
    4970:	a2 0f       	add	r26, r18
    4972:	b0 e0       	ldi	r27, 0x00	; 0
    4974:	aa 5d       	subi	r26, 0xDA	; 218
    4976:	be 4d       	sbci	r27, 0xDE	; 222
    4978:	3c 91       	ld	r19, X
	unsigned char Data = SerialBufferIn[SerialBufferInPtrBottom++];
    497a:	93 e0       	ldi	r25, 0x03	; 3
    497c:	92 0f       	add	r25, r18
    497e:	90 93 24 21 	sts	0x2124, r25	; 0x802124 <SerialBufferInPtrBottom>
    4982:	a2 e0       	ldi	r26, 0x02	; 2
    4984:	a2 0f       	add	r26, r18
    4986:	b0 e0       	ldi	r27, 0x00	; 0
    4988:	aa 5d       	subi	r26, 0xDA	; 218
    498a:	be 4d       	sbci	r27, 0xDE	; 222
    498c:	cc 91       	ld	r28, X
	
	//unsigned char EEread[16], wr[16], Address;

	switch (Event)
    498e:	4e 2f       	mov	r20, r30
    4990:	50 e0       	ldi	r21, 0x00	; 0
    4992:	fa 01       	movw	r30, r20
    4994:	e0 58       	subi	r30, 0x80	; 128
    4996:	f1 09       	sbc	r31, r1
    4998:	e3 36       	cpi	r30, 0x63	; 99
    499a:	f1 05       	cpc	r31, r1
    499c:	08 f0       	brcs	.+2      	; 0x49a0 <DoSerial+0x48>
    499e:	d4 c1       	rjmp	.+936    	; 0x4d48 <DoSerial+0x3f0>
    49a0:	88 27       	eor	r24, r24
    49a2:	ed 51       	subi	r30, 0x1D	; 29
    49a4:	fe 4f       	sbci	r31, 0xFE	; 254
    49a6:	8f 4f       	sbci	r24, 0xFF	; 255
    49a8:	0c 94 98 28 	jmp	0x5130	; 0x5130 <__tablejump2__>
	{
		case SERIAL_ON:
		{
			EventBuffer[EventBufferPtrTop++] = (unsigned int)ON | (Channel<<3);
    49ac:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    49b0:	81 e0       	ldi	r24, 0x01	; 1
    49b2:	8e 0f       	add	r24, r30
    49b4:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    49b8:	f0 e0       	ldi	r31, 0x00	; 0
    49ba:	ee 0f       	add	r30, r30
    49bc:	ff 1f       	adc	r31, r31
    49be:	e6 5f       	subi	r30, 0xF6	; 246
    49c0:	fa 4d       	sbci	r31, 0xDA	; 218
    49c2:	a3 2f       	mov	r26, r19
    49c4:	b0 e0       	ldi	r27, 0x00	; 0
    49c6:	aa 0f       	add	r26, r26
    49c8:	bb 1f       	adc	r27, r27
    49ca:	aa 0f       	add	r26, r26
    49cc:	bb 1f       	adc	r27, r27
    49ce:	aa 0f       	add	r26, r26
    49d0:	bb 1f       	adc	r27, r27
    49d2:	a3 60       	ori	r26, 0x03	; 3
    49d4:	a0 83       	st	Z, r26
    49d6:	b1 83       	std	Z+1, r27	; 0x01
		}
		break;
    49d8:	b7 c1       	rjmp	.+878    	; 0x4d48 <DoSerial+0x3f0>
		case SERIAL_CUE:
		{
			EventBuffer[EventBufferPtrTop++] = (unsigned int)PFL | (Channel<<3);
    49da:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    49de:	81 e0       	ldi	r24, 0x01	; 1
    49e0:	8e 0f       	add	r24, r30
    49e2:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    49e6:	f0 e0       	ldi	r31, 0x00	; 0
    49e8:	ee 0f       	add	r30, r30
    49ea:	ff 1f       	adc	r31, r31
    49ec:	e6 5f       	subi	r30, 0xF6	; 246
    49ee:	fa 4d       	sbci	r31, 0xDA	; 218
    49f0:	a3 2f       	mov	r26, r19
    49f2:	b0 e0       	ldi	r27, 0x00	; 0
    49f4:	aa 0f       	add	r26, r26
    49f6:	bb 1f       	adc	r27, r27
    49f8:	aa 0f       	add	r26, r26
    49fa:	bb 1f       	adc	r27, r27
    49fc:	aa 0f       	add	r26, r26
    49fe:	bb 1f       	adc	r27, r27
    4a00:	a2 60       	ori	r26, 0x02	; 2
    4a02:	a0 83       	st	Z, r26
    4a04:	b1 83       	std	Z+1, r27	; 0x01
		}
		break;
    4a06:	a0 c1       	rjmp	.+832    	; 0x4d48 <DoSerial+0x3f0>
		case TIMER_START:
		{
			GlobalTimerActive = 1;
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	80 93 1b 3a 	sts	0x3A1B, r24	; 0x803a1b <GlobalTimerActive>
		}
		break;
    4a0e:	9c c1       	rjmp	.+824    	; 0x4d48 <DoSerial+0x3f0>
		case TIMER_STOP:
		{
			GlobalTimerActive = 0;
    4a10:	10 92 1b 3a 	sts	0x3A1B, r1	; 0x803a1b <GlobalTimerActive>
		}
		break;
    4a14:	99 c1       	rjmp	.+818    	; 0x4d48 <DoSerial+0x3f0>
		case TIMER_RESET:
		{
			TimeAndDate.Hours = 0;
    4a16:	e6 e1       	ldi	r30, 0x16	; 22
    4a18:	fa e3       	ldi	r31, 0x3A	; 58
    4a1a:	13 82       	std	Z+3, r1	; 0x03
			TimeAndDate.Minutes = 0;
    4a1c:	12 82       	std	Z+2, r1	; 0x02
			TimeAndDate.Seconds = 0;
    4a1e:	11 82       	std	Z+1, r1	; 0x01
			TimeAndDate.Frames = 0;
    4a20:	10 82       	st	Z, r1
		}
		break;
    4a22:	92 c1       	rjmp	.+804    	; 0x4d48 <DoSerial+0x3f0>
		case SERIAL_MODULESETUPDATA:
		{
			unsigned char cntByte;
			ConsoleModuleSettings[Channel][0] = Data;
    4a24:	8d e1       	ldi	r24, 0x1D	; 29
    4a26:	38 9f       	mul	r19, r24
    4a28:	d0 01       	movw	r26, r0
    4a2a:	11 24       	eor	r1, r1
    4a2c:	fd 01       	movw	r30, r26
    4a2e:	e5 5e       	subi	r30, 0xE5	; 229
    4a30:	f7 4c       	sbci	r31, 0xC7	; 199
    4a32:	c0 83       	st	Z, r28
    4a34:	a4 5e       	subi	r26, 0xE4	; 228
    4a36:	b7 4c       	sbci	r27, 0xC7	; 199
    4a38:	8f e1       	ldi	r24, 0x1F	; 31
    4a3a:	82 0f       	add	r24, r18
			for (cntByte=1; cntByte<29; cntByte++)
			{
				ConsoleModuleSettings[Channel][cntByte] = SerialBufferIn[SerialBufferInPtrBottom++];
    4a3c:	e9 2f       	mov	r30, r25
    4a3e:	f0 e0       	ldi	r31, 0x00	; 0
    4a40:	ea 5d       	subi	r30, 0xDA	; 218
    4a42:	fe 4d       	sbci	r31, 0xDE	; 222
    4a44:	30 81       	ld	r19, Z
    4a46:	3d 93       	st	X+, r19
    4a48:	9f 5f       	subi	r25, 0xFF	; 255
		break;
		case SERIAL_MODULESETUPDATA:
		{
			unsigned char cntByte;
			ConsoleModuleSettings[Channel][0] = Data;
			for (cntByte=1; cntByte<29; cntByte++)
    4a4a:	98 13       	cpse	r25, r24
    4a4c:	f7 cf       	rjmp	.-18     	; 0x4a3c <DoSerial+0xe4>
    4a4e:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <SerialBufferInPtrBottom>
    4a52:	7a c1       	rjmp	.+756    	; 0x4d48 <DoSerial+0x3f0>
		}
		break;
		case SERIAL_MASTERSETUPDATA:
		{
			unsigned char cntByte;
			ConsoleMasterSettings[0] = Data;
    4a54:	c0 93 8e 2b 	sts	0x2B8E, r28	; 0x802b8e <ConsoleMasterSettings>
    4a58:	af e8       	ldi	r26, 0x8F	; 143
    4a5a:	bb e2       	ldi	r27, 0x2B	; 43
    4a5c:	87 e0       	ldi	r24, 0x07	; 7
    4a5e:	82 0f       	add	r24, r18
			for (cntByte=1; cntByte<5; cntByte++)
			{
				ConsoleMasterSettings[cntByte] = SerialBufferIn[SerialBufferInPtrBottom++];
    4a60:	e9 2f       	mov	r30, r25
    4a62:	f0 e0       	ldi	r31, 0x00	; 0
    4a64:	ea 5d       	subi	r30, 0xDA	; 218
    4a66:	fe 4d       	sbci	r31, 0xDE	; 222
    4a68:	20 81       	ld	r18, Z
    4a6a:	2d 93       	st	X+, r18
    4a6c:	9f 5f       	subi	r25, 0xFF	; 255
		break;
		case SERIAL_MASTERSETUPDATA:
		{
			unsigned char cntByte;
			ConsoleMasterSettings[0] = Data;
			for (cntByte=1; cntByte<5; cntByte++)
    4a6e:	89 13       	cpse	r24, r25
    4a70:	f7 cf       	rjmp	.-18     	; 0x4a60 <DoSerial+0x108>
    4a72:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <SerialBufferInPtrBottom>
    4a76:	68 c1       	rjmp	.+720    	; 0x4d48 <DoSerial+0x3f0>
		}
		break;
		case GETSERIAL_IDSTRING:
		{
			unsigned char cntByte;
			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_IDSTRING;
    4a78:	40 91 82 22 	lds	r20, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4a7c:	e4 2f       	mov	r30, r20
    4a7e:	f0 e0       	ldi	r31, 0x00	; 0
    4a80:	eb 53       	subi	r30, 0x3B	; 59
    4a82:	fc 4d       	sbci	r31, 0xDC	; 220
    4a84:	8a e9       	ldi	r24, 0x9A	; 154
    4a86:	80 83       	st	Z, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    4a88:	92 e0       	ldi	r25, 0x02	; 2
    4a8a:	94 0f       	add	r25, r20
    4a8c:	e1 e0       	ldi	r30, 0x01	; 1
    4a8e:	e4 0f       	add	r30, r20
    4a90:	f0 e0       	ldi	r31, 0x00	; 0
    4a92:	eb 53       	subi	r30, 0x3B	; 59
    4a94:	fc 4d       	sbci	r31, 0xDC	; 220
    4a96:	10 82       	st	Z, r1
    4a98:	a0 e0       	ldi	r26, 0x00	; 0
    4a9a:	b0 e2       	ldi	r27, 0x20	; 32
    4a9c:	2e e1       	ldi	r18, 0x1E	; 30
    4a9e:	30 e2       	ldi	r19, 0x20	; 32
			for (cntByte=0; cntByte<30; cntByte++)
			{
				SerialBufferOut[SerialBufferOutPtrTop++] = IDString[cntByte]&0x7F;
    4aa0:	8d 91       	ld	r24, X+
    4aa2:	e9 2f       	mov	r30, r25
    4aa4:	f0 e0       	ldi	r31, 0x00	; 0
    4aa6:	eb 53       	subi	r30, 0x3B	; 59
    4aa8:	fc 4d       	sbci	r31, 0xDC	; 220
    4aaa:	8f 77       	andi	r24, 0x7F	; 127
    4aac:	80 83       	st	Z, r24
    4aae:	9f 5f       	subi	r25, 0xFF	; 255
		case GETSERIAL_IDSTRING:
		{
			unsigned char cntByte;
			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_IDSTRING;
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
			for (cntByte=0; cntByte<30; cntByte++)
    4ab0:	a2 17       	cp	r26, r18
    4ab2:	b3 07       	cpc	r27, r19
    4ab4:	a9 f7       	brne	.-22     	; 0x4aa0 <DoSerial+0x148>
    4ab6:	40 5e       	subi	r20, 0xE0	; 224
    4ab8:	40 93 82 22 	sts	0x2282, r20	; 0x802282 <SerialBufferOutPtrTop>
    4abc:	45 c1       	rjmp	.+650    	; 0x4d48 <DoSerial+0x3f0>
		break;
		case GETSERIAL_MODULESETUPDATA:
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    4abe:	20 91 82 22 	lds	r18, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4ac2:	e2 2f       	mov	r30, r18
    4ac4:	f0 e0       	ldi	r31, 0x00	; 0
    4ac6:	eb 53       	subi	r30, 0x3B	; 59
    4ac8:	fc 4d       	sbci	r31, 0xDC	; 220
    4aca:	83 e9       	ldi	r24, 0x93	; 147
    4acc:	80 83       	st	Z, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = Channel;
    4ace:	82 e0       	ldi	r24, 0x02	; 2
    4ad0:	82 0f       	add	r24, r18
    4ad2:	e1 e0       	ldi	r30, 0x01	; 1
    4ad4:	e2 0f       	add	r30, r18
    4ad6:	f0 e0       	ldi	r31, 0x00	; 0
    4ad8:	eb 53       	subi	r30, 0x3B	; 59
    4ada:	fc 4d       	sbci	r31, 0xDC	; 220
    4adc:	30 83       	st	Z, r19
    4ade:	9d e1       	ldi	r25, 0x1D	; 29
    4ae0:	39 9f       	mul	r19, r25
    4ae2:	d0 01       	movw	r26, r0
    4ae4:	11 24       	eor	r1, r1
    4ae6:	a5 5e       	subi	r26, 0xE5	; 229
    4ae8:	b7 4c       	sbci	r27, 0xC7	; 199
    4aea:	21 5e       	subi	r18, 0xE1	; 225
			for (cntByte=0; cntByte<29; cntByte++)
			{
				SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleModuleSettings[Channel][cntByte]&0x7F;
    4aec:	9d 91       	ld	r25, X+
    4aee:	e8 2f       	mov	r30, r24
    4af0:	f0 e0       	ldi	r31, 0x00	; 0
    4af2:	eb 53       	subi	r30, 0x3B	; 59
    4af4:	fc 4d       	sbci	r31, 0xDC	; 220
    4af6:	9f 77       	andi	r25, 0x7F	; 127
    4af8:	90 83       	st	Z, r25
    4afa:	8f 5f       	subi	r24, 0xFF	; 255
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
			SerialBufferOut[SerialBufferOutPtrTop++] = Channel;
			for (cntByte=0; cntByte<29; cntByte++)
    4afc:	82 13       	cpse	r24, r18
    4afe:	f6 cf       	rjmp	.-20     	; 0x4aec <DoSerial+0x194>
    4b00:	20 93 82 22 	sts	0x2282, r18	; 0x802282 <SerialBufferOutPtrTop>
    4b04:	21 c1       	rjmp	.+578    	; 0x4d48 <DoSerial+0x3f0>
		break;
		case GETSERIAL_MASTERSETUPDATA:
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    4b06:	20 91 82 22 	lds	r18, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4b0a:	e2 2f       	mov	r30, r18
    4b0c:	f0 e0       	ldi	r31, 0x00	; 0
    4b0e:	eb 53       	subi	r30, 0x3B	; 59
    4b10:	fc 4d       	sbci	r31, 0xDC	; 220
    4b12:	84 e9       	ldi	r24, 0x94	; 148
    4b14:	80 83       	st	Z, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    4b16:	82 e0       	ldi	r24, 0x02	; 2
    4b18:	82 0f       	add	r24, r18
    4b1a:	e1 e0       	ldi	r30, 0x01	; 1
    4b1c:	e2 0f       	add	r30, r18
    4b1e:	f0 e0       	ldi	r31, 0x00	; 0
    4b20:	eb 53       	subi	r30, 0x3B	; 59
    4b22:	fc 4d       	sbci	r31, 0xDC	; 220
    4b24:	10 82       	st	Z, r1
    4b26:	ae e8       	ldi	r26, 0x8E	; 142
    4b28:	bb e2       	ldi	r27, 0x2B	; 43
    4b2a:	29 5f       	subi	r18, 0xF9	; 249
			for (cntByte=0; cntByte<5; cntByte++)
			{
				SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    4b2c:	9d 91       	ld	r25, X+
    4b2e:	e8 2f       	mov	r30, r24
    4b30:	f0 e0       	ldi	r31, 0x00	; 0
    4b32:	eb 53       	subi	r30, 0x3B	; 59
    4b34:	fc 4d       	sbci	r31, 0xDC	; 220
    4b36:	9f 77       	andi	r25, 0x7F	; 127
    4b38:	90 83       	st	Z, r25
    4b3a:	8f 5f       	subi	r24, 0xFF	; 255
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
			for (cntByte=0; cntByte<5; cntByte++)
    4b3c:	82 13       	cpse	r24, r18
    4b3e:	f6 cf       	rjmp	.-20     	; 0x4b2c <DoSerial+0x1d4>
    4b40:	20 93 82 22 	sts	0x2282, r18	; 0x802282 <SerialBufferOutPtrTop>
    4b44:	01 c1       	rjmp	.+514    	; 0x4d48 <DoSerial+0x3f0>
		break;
		case GETSERIAL_CONFIG:
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_CONFIG;
    4b46:	40 91 82 22 	lds	r20, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4b4a:	e4 2f       	mov	r30, r20
    4b4c:	f0 e0       	ldi	r31, 0x00	; 0
    4b4e:	eb 53       	subi	r30, 0x3B	; 59
    4b50:	fc 4d       	sbci	r31, 0xDC	; 220
    4b52:	85 e9       	ldi	r24, 0x95	; 149
    4b54:	80 83       	st	Z, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    4b56:	92 e0       	ldi	r25, 0x02	; 2
    4b58:	94 0f       	add	r25, r20
    4b5a:	e1 e0       	ldi	r30, 0x01	; 1
    4b5c:	e4 0f       	add	r30, r20
    4b5e:	f0 e0       	ldi	r31, 0x00	; 0
    4b60:	eb 53       	subi	r30, 0x3B	; 59
    4b62:	fc 4d       	sbci	r31, 0xDC	; 220
    4b64:	10 82       	st	Z, r1
    4b66:	a0 e7       	ldi	r26, 0x70	; 112
    4b68:	b2 e2       	ldi	r27, 0x22	; 34
    4b6a:	20 e8       	ldi	r18, 0x80	; 128
    4b6c:	32 e2       	ldi	r19, 0x22	; 34
			for (cntByte=0; cntByte<16; cntByte++)
			{
				SerialBufferOut[SerialBufferOutPtrTop++] = ModuleType[cntByte]&0x7F;
    4b6e:	8d 91       	ld	r24, X+
    4b70:	e9 2f       	mov	r30, r25
    4b72:	f0 e0       	ldi	r31, 0x00	; 0
    4b74:	eb 53       	subi	r30, 0x3B	; 59
    4b76:	fc 4d       	sbci	r31, 0xDC	; 220
    4b78:	8f 77       	andi	r24, 0x7F	; 127
    4b7a:	80 83       	st	Z, r24
    4b7c:	9f 5f       	subi	r25, 0xFF	; 255
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_CONFIG;
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
			for (cntByte=0; cntByte<16; cntByte++)
    4b7e:	a2 17       	cp	r26, r18
    4b80:	b3 07       	cpc	r27, r19
    4b82:	a9 f7       	brne	.-22     	; 0x4b6e <DoSerial+0x216>
    4b84:	4e 5e       	subi	r20, 0xEE	; 238
    4b86:	40 93 82 22 	sts	0x2282, r20	; 0x802282 <SerialBufferOutPtrTop>
    4b8a:	de c0       	rjmp	.+444    	; 0x4d48 <DoSerial+0x3f0>
		case STORE_EEPROM:
		{			
			unsigned char cntModule;
			unsigned int Address = 0x0000;
			
			TWIM_Transmit(I2CAddressEEProm, Address, ModuleType, NROFMODULES);
    4b8c:	20 e1       	ldi	r18, 0x10	; 16
    4b8e:	40 e7       	ldi	r20, 0x70	; 112
    4b90:	52 e2       	ldi	r21, 0x22	; 34
    4b92:	60 e0       	ldi	r22, 0x00	; 0
    4b94:	80 e7       	ldi	r24, 0x70	; 112
    4b96:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <TWIM_Transmit>
			while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
    4b9a:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    4b9e:	84 30       	cpi	r24, 0x04	; 4
    4ba0:	09 f4       	brne	.+2      	; 0x4ba4 <DoSerial+0x24c>
    4ba2:	cb c0       	rjmp	.+406    	; 0x4d3a <DoSerial+0x3e2>
    4ba4:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    4ba8:	8f 3f       	cpi	r24, 0xFF	; 255
    4baa:	b9 f7       	brne	.-18     	; 0x4b9a <DoSerial+0x242>
    4bac:	c6 c0       	rjmp	.+396    	; 0x4d3a <DoSerial+0x3e2>
			
			
			//--------------------------------------------------------------------
			for (int t=0; t<29; t++)
			{
				wr[t]=ConsoleModuleSettings[0][t];
    4bae:	81 91       	ld	r24, Z+
    4bb0:	8d 93       	st	X+, r24

			Address += NROFMODULES;
			
			
			//--------------------------------------------------------------------
			for (int t=0; t<29; t++)
    4bb2:	2e 17       	cp	r18, r30
    4bb4:	3f 07       	cpc	r19, r31
    4bb6:	d9 f7       	brne	.-10     	; 0x4bae <DoSerial+0x256>
    4bb8:	09 e0       	ldi	r16, 0x09	; 9
    4bba:	12 e3       	ldi	r17, 0x32	; 50
    4bbc:	c0 e0       	ldi	r28, 0x00	; 0
    4bbe:	d0 e0       	ldi	r29, 0x00	; 0
    4bc0:	21 e0       	ldi	r18, 0x01	; 1
    4bc2:	30 e0       	ldi	r19, 0x00	; 0
			int vlag=1;
			int bufsize = sizeof(wr);
			
			for (int tm=0; tm<bufsize; tm++)
			{
				if ( (tm < 16) & (vlag==1) )
    4bc4:	81 e0       	ldi	r24, 0x01	; 1
    4bc6:	c0 31       	cpi	r28, 0x10	; 16
    4bc8:	d1 05       	cpc	r29, r1
    4bca:	0c f0       	brlt	.+2      	; 0x4bce <DoSerial+0x276>
    4bcc:	80 e0       	ldi	r24, 0x00	; 0
    4bce:	88 23       	and	r24, r24
    4bd0:	d9 f0       	breq	.+54     	; 0x4c08 <DoSerial+0x2b0>
    4bd2:	81 e0       	ldi	r24, 0x01	; 1
    4bd4:	21 30       	cpi	r18, 0x01	; 1
    4bd6:	31 05       	cpc	r19, r1
    4bd8:	09 f0       	breq	.+2      	; 0x4bdc <DoSerial+0x284>
    4bda:	80 e0       	ldi	r24, 0x00	; 0
    4bdc:	88 23       	and	r24, r24
    4bde:	a1 f0       	breq	.+40     	; 0x4c08 <DoSerial+0x2b0>
				{
					vlag=2;
					TWIM_Transmit(I2CAddressEEProm, 0x10, wr, 16);
    4be0:	20 e1       	ldi	r18, 0x10	; 16
    4be2:	49 e1       	ldi	r20, 0x19	; 25
    4be4:	52 e3       	ldi	r21, 0x32	; 50
    4be6:	60 e1       	ldi	r22, 0x10	; 16
    4be8:	80 e7       	ldi	r24, 0x70	; 112
    4bea:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <TWIM_Transmit>
					while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
    4bee:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    4bf2:	84 30       	cpi	r24, 0x04	; 4
    4bf4:	39 f0       	breq	.+14     	; 0x4c04 <DoSerial+0x2ac>
    4bf6:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    4bfa:	8f 3f       	cpi	r24, 0xFF	; 255
    4bfc:	c1 f7       	brne	.-16     	; 0x4bee <DoSerial+0x296>
			
			for (int tm=0; tm<bufsize; tm++)
			{
				if ( (tm < 16) & (vlag==1) )
				{
					vlag=2;
    4bfe:	22 e0       	ldi	r18, 0x02	; 2
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	02 c0       	rjmp	.+4      	; 0x4c08 <DoSerial+0x2b0>
    4c04:	22 e0       	ldi	r18, 0x02	; 2
    4c06:	30 e0       	ldi	r19, 0x00	; 0
					TWIM_Transmit(I2CAddressEEProm, 0x10, wr, 16);
					while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
				}
				
				if ( tm > 15 )
    4c08:	c0 31       	cpi	r28, 0x10	; 16
    4c0a:	d1 05       	cpc	r29, r1
    4c0c:	1c f0       	brlt	.+6      	; 0x4c14 <DoSerial+0x2bc>
				{
					wr[tm-16]=wr[tm];
    4c0e:	f8 01       	movw	r30, r16
    4c10:	80 89       	ldd	r24, Z+16	; 0x10
    4c12:	80 83       	st	Z, r24
				
			//----------------
			int vlag=1;
			int bufsize = sizeof(wr);
			
			for (int tm=0; tm<bufsize; tm++)
    4c14:	21 96       	adiw	r28, 0x01	; 1
    4c16:	0f 5f       	subi	r16, 0xFF	; 255
    4c18:	1f 4f       	sbci	r17, 0xFF	; 255
    4c1a:	cd 31       	cpi	r28, 0x1D	; 29
    4c1c:	d1 05       	cpc	r29, r1
    4c1e:	91 f6       	brne	.-92     	; 0x4bc4 <DoSerial+0x26c>
					wr[tm-16]=wr[tm];
				}
			}
			

			TWIM_Transmit(I2CAddressEEProm, 32, wr, 13);
    4c20:	2d e0       	ldi	r18, 0x0D	; 13
    4c22:	49 e1       	ldi	r20, 0x19	; 25
    4c24:	52 e3       	ldi	r21, 0x32	; 50
    4c26:	60 e2       	ldi	r22, 0x20	; 32
    4c28:	80 e7       	ldi	r24, 0x70	; 112
    4c2a:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <TWIM_Transmit>
			while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
    4c2e:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    4c32:	84 30       	cpi	r24, 0x04	; 4
    4c34:	21 f0       	breq	.+8      	; 0x4c3e <DoSerial+0x2e6>
    4c36:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    4c3a:	8f 3f       	cpi	r24, 0xFF	; 255
    4c3c:	c1 f7       	brne	.-16     	; 0x4c2e <DoSerial+0x2d6>
			//------------------------------------------------------------------------------------------
					
			Address += 29;
			
			TWIM_Transmit(I2CAddressEEProm, Address, ConsoleMasterSettings, 5);
    4c3e:	25 e0       	ldi	r18, 0x05	; 5
    4c40:	4e e8       	ldi	r20, 0x8E	; 142
    4c42:	5b e2       	ldi	r21, 0x2B	; 43
    4c44:	6d e2       	ldi	r22, 0x2D	; 45
    4c46:	80 e7       	ldi	r24, 0x70	; 112
    4c48:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <TWIM_Transmit>
			while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
    4c4c:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    4c50:	84 30       	cpi	r24, 0x04	; 4
    4c52:	21 f0       	breq	.+8      	; 0x4c5c <DoSerial+0x304>
    4c54:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TWIM_Status>
    4c58:	8f 3f       	cpi	r24, 0xFF	; 255
    4c5a:	c1 f7       	brne	.-16     	; 0x4c4c <DoSerial+0x2f4>
			
			for (int tm=0; tm<bufsize; tm++)
			{
				if ( (tm < 16) & (vlag==1) )
				{
					vlag=2;
    4c5c:	88 ee       	ldi	r24, 0xE8	; 232
    4c5e:	9d ef       	ldi	r25, 0xFD	; 253
    4c60:	01 97       	sbiw	r24, 0x01	; 1
					
			Address += 29;
			
			TWIM_Transmit(I2CAddressEEProm, Address, ConsoleMasterSettings, 5);
			while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
			for (wacht=0; wacht<65000; wacht++);
    4c62:	f1 f7       	brne	.-4      	; 0x4c60 <DoSerial+0x308>
    4c64:	88 ee       	ldi	r24, 0xE8	; 232
    4c66:	9d ef       	ldi	r25, 0xFD	; 253
    4c68:	80 93 a1 3a 	sts	0x3AA1, r24	; 0x803aa1 <wacht>
    4c6c:	90 93 a2 3a 	sts	0x3AA2, r25	; 0x803aa2 <wacht+0x1>
    4c70:	6b c0       	rjmp	.+214    	; 0x4d48 <DoSerial+0x3f0>
		//}
		//break;
		
		case FROMDIRECTOR_TELCO_ON_CONNECT:
		{
			if (Data)
    4c72:	cc 23       	and	r28, r28
    4c74:	09 f4       	brne	.+2      	; 0x4c78 <DoSerial+0x320>
    4c76:	68 c0       	rjmp	.+208    	; 0x4d48 <DoSerial+0x3f0>
			{
				char ModuleNr;
			
				ModuleNr = GetModuleNrFromTelcoNr(Channel);
    4c78:	83 2f       	mov	r24, r19
    4c7a:	0e 94 0e 08 	call	0x101c	; 0x101c <GetModuleNrFromTelcoNr>

				if (ModuleNr != -1)
				{
					EventBuffer[EventBufferPtrTop++] = (ModuleNr<<3) | ON;
    4c7e:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    4c82:	91 e0       	ldi	r25, 0x01	; 1
    4c84:	9e 0f       	add	r25, r30
    4c86:	90 93 8b 2b 	sts	0x2B8B, r25	; 0x802b8b <EventBufferPtrTop>
    4c8a:	f0 e0       	ldi	r31, 0x00	; 0
    4c8c:	ee 0f       	add	r30, r30
    4c8e:	ff 1f       	adc	r31, r31
    4c90:	e6 5f       	subi	r30, 0xF6	; 246
    4c92:	fa 4d       	sbci	r31, 0xDA	; 218
    4c94:	28 e0       	ldi	r18, 0x08	; 8
    4c96:	82 9f       	mul	r24, r18
    4c98:	c0 01       	movw	r24, r0
    4c9a:	11 24       	eor	r1, r1
    4c9c:	83 60       	ori	r24, 0x03	; 3
    4c9e:	80 83       	st	Z, r24
    4ca0:	91 83       	std	Z+1, r25	; 0x01
    4ca2:	52 c0       	rjmp	.+164    	; 0x4d48 <DoSerial+0x3f0>
		break;
		case FROMDIRECTOR_TELCO_MUTE:
		{
			char ModuleNr;
			
			ModuleNr = GetModuleNrFromTelcoNr(Channel);
    4ca4:	83 2f       	mov	r24, r19
    4ca6:	0e 94 0e 08 	call	0x101c	; 0x101c <GetModuleNrFromTelcoNr>

			if (ModuleNr != -1)
			{
				if (Data)
    4caa:	cc 23       	and	r28, r28
    4cac:	b9 f0       	breq	.+46     	; 0x4cdc <DoSerial+0x384>
				{
					EventBuffer[EventBufferPtrTop++] = (unsigned int)(ModuleNr<<3) | EXT_MUTE;
    4cae:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    4cb2:	91 e0       	ldi	r25, 0x01	; 1
    4cb4:	9e 0f       	add	r25, r30
    4cb6:	90 93 8b 2b 	sts	0x2B8B, r25	; 0x802b8b <EventBufferPtrTop>
    4cba:	f0 e0       	ldi	r31, 0x00	; 0
    4cbc:	ee 0f       	add	r30, r30
    4cbe:	ff 1f       	adc	r31, r31
    4cc0:	e6 5f       	subi	r30, 0xF6	; 246
    4cc2:	fa 4d       	sbci	r31, 0xDA	; 218
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	88 0f       	add	r24, r24
    4cc8:	99 1f       	adc	r25, r25
    4cca:	88 0f       	add	r24, r24
    4ccc:	99 1f       	adc	r25, r25
    4cce:	88 0f       	add	r24, r24
    4cd0:	99 1f       	adc	r25, r25
    4cd2:	87 68       	ori	r24, 0x87	; 135
    4cd4:	92 60       	ori	r25, 0x02	; 2
    4cd6:	80 83       	st	Z, r24
    4cd8:	91 83       	std	Z+1, r25	; 0x01
    4cda:	36 c0       	rjmp	.+108    	; 0x4d48 <DoSerial+0x3f0>
				}
				else
				{
					EventBuffer[EventBufferPtrTop++] = (unsigned int)(ModuleNr<<3) | EXT_MUTE | 0x100;
    4cdc:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    4ce0:	91 e0       	ldi	r25, 0x01	; 1
    4ce2:	9e 0f       	add	r25, r30
    4ce4:	90 93 8b 2b 	sts	0x2B8B, r25	; 0x802b8b <EventBufferPtrTop>
    4ce8:	f0 e0       	ldi	r31, 0x00	; 0
    4cea:	ee 0f       	add	r30, r30
    4cec:	ff 1f       	adc	r31, r31
    4cee:	e6 5f       	subi	r30, 0xF6	; 246
    4cf0:	fa 4d       	sbci	r31, 0xDA	; 218
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	88 0f       	add	r24, r24
    4cf6:	99 1f       	adc	r25, r25
    4cf8:	88 0f       	add	r24, r24
    4cfa:	99 1f       	adc	r25, r25
    4cfc:	88 0f       	add	r24, r24
    4cfe:	99 1f       	adc	r25, r25
    4d00:	87 68       	ori	r24, 0x87	; 135
    4d02:	93 60       	ori	r25, 0x03	; 3
    4d04:	80 83       	st	Z, r24
    4d06:	91 83       	std	Z+1, r25	; 0x01
    4d08:	1f c0       	rjmp	.+62     	; 0x4d48 <DoSerial+0x3f0>
			}
		}
		break;
		case FROMDIRECTOR_TELCO_TB:
		{
			if (Data)
    4d0a:	cc 23       	and	r28, r28
    4d0c:	e9 f0       	breq	.+58     	; 0x4d48 <DoSerial+0x3f0>
			{
				char ModuleNr;
			
				ModuleNr = GetModuleNrFromTelcoNr(Channel);
    4d0e:	83 2f       	mov	r24, r19
    4d10:	0e 94 0e 08 	call	0x101c	; 0x101c <GetModuleNrFromTelcoNr>
	
				if (ModuleNr != -1)
				{
					EventBuffer[EventBufferPtrTop++] = (ModuleNr<<3) | PFL;
    4d14:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    4d18:	91 e0       	ldi	r25, 0x01	; 1
    4d1a:	9e 0f       	add	r25, r30
    4d1c:	90 93 8b 2b 	sts	0x2B8B, r25	; 0x802b8b <EventBufferPtrTop>
    4d20:	f0 e0       	ldi	r31, 0x00	; 0
    4d22:	ee 0f       	add	r30, r30
    4d24:	ff 1f       	adc	r31, r31
    4d26:	e6 5f       	subi	r30, 0xF6	; 246
    4d28:	fa 4d       	sbci	r31, 0xDA	; 218
    4d2a:	28 e0       	ldi	r18, 0x08	; 8
    4d2c:	82 9f       	mul	r24, r18
    4d2e:	c0 01       	movw	r24, r0
    4d30:	11 24       	eor	r1, r1
    4d32:	82 60       	ori	r24, 0x02	; 2
    4d34:	80 83       	st	Z, r24
    4d36:	91 83       	std	Z+1, r25	; 0x01
			//}
			//CueControl();
		//}
		//break;
	}
}
    4d38:	07 c0       	rjmp	.+14     	; 0x4d48 <DoSerial+0x3f0>
    4d3a:	eb e1       	ldi	r30, 0x1B	; 27
    4d3c:	f8 e3       	ldi	r31, 0x38	; 56
    4d3e:	a9 e1       	ldi	r26, 0x19	; 25
    4d40:	b2 e3       	ldi	r27, 0x32	; 50
    4d42:	28 e3       	ldi	r18, 0x38	; 56
    4d44:	38 e3       	ldi	r19, 0x38	; 56
    4d46:	33 cf       	rjmp	.-410    	; 0x4bae <DoSerial+0x256>
    4d48:	df 91       	pop	r29
    4d4a:	cf 91       	pop	r28
    4d4c:	1f 91       	pop	r17
    4d4e:	0f 91       	pop	r16
    4d50:	08 95       	ret

00004d52 <SetupSIO0>:

void SetupSIO0()
{
			

	cli();
    4d52:	f8 94       	cli

		PORTE_OUTSET = 0x8;
    4d54:	88 e0       	ldi	r24, 0x08	; 8
    4d56:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7de685>
					
		// Communication mode: Asynchronous USART on PORTE
		// Data bits: 8
		// Stop bits: 1
		// Parity: Disabled
		USARTE0_CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    4d5a:	83 e0       	ldi	r24, 0x03	; 3
    4d5c:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7deaa5>

		// Receive complete interrupt: Medium Level
		// Transmit complete interrupt: Medium Level
		// Data register empty interrupt: Disabled
		USARTE0.CTRLA=(USARTE0.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
    4d60:	e0 ea       	ldi	r30, 0xA0	; 160
    4d62:	fa e0       	ldi	r31, 0x0A	; 10
    4d64:	83 81       	ldd	r24, Z+3	; 0x03
    4d66:	80 7c       	andi	r24, 0xC0	; 192
    4d68:	88 62       	ori	r24, 0x28	; 40
    4d6a:	83 83       	std	Z+3, r24	; 0x03
		//USARTE0.BAUDCTRLB=((0x09 << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x04;
		
		// Bij een interne OSC van 9 MHz
		// Required Baud rate: 57600
		// Real Baud Rate: 57600,0 (x1 Mode), Error: 0,0 %
		USARTE0.BAUDCTRLA=0x62;
    4d6c:	82 e6       	ldi	r24, 0x62	; 98
    4d6e:	86 83       	std	Z+6, r24	; 0x06
		USARTE0.BAUDCTRLB=((0x09 << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x04;		
    4d70:	84 e9       	ldi	r24, 0x94	; 148
    4d72:	87 83       	std	Z+7, r24	; 0x07

		// Receiver: On
		// Transmitter: On
		// Double transmission speed mode: Off
		// Multi-processor communication mode: Off
		USARTE0.CTRLB=(USARTE0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
    4d74:	84 81       	ldd	r24, Z+4	; 0x04
    4d76:	80 7e       	andi	r24, 0xE0	; 224
    4d78:	88 61       	ori	r24, 0x18	; 24
    4d7a:	84 83       	std	Z+4, r24	; 0x04
		USART_RXEN_bm | USART_TXEN_bm;

				
		sei();
    4d7c:	78 94       	sei
    4d7e:	08 95       	ret

00004d80 <__vector_58>:
}


ISR(USARTE0_RXC_vect)
{
    4d80:	1f 92       	push	r1
    4d82:	0f 92       	push	r0
    4d84:	0f b6       	in	r0, 0x3f	; 63
    4d86:	0f 92       	push	r0
    4d88:	11 24       	eor	r1, r1
    4d8a:	08 b6       	in	r0, 0x38	; 56
    4d8c:	0f 92       	push	r0
    4d8e:	18 be       	out	0x38, r1	; 56
    4d90:	09 b6       	in	r0, 0x39	; 57
    4d92:	0f 92       	push	r0
    4d94:	19 be       	out	0x39, r1	; 57
    4d96:	0b b6       	in	r0, 0x3b	; 59
    4d98:	0f 92       	push	r0
    4d9a:	1b be       	out	0x3b, r1	; 59
    4d9c:	2f 93       	push	r18
    4d9e:	8f 93       	push	r24
    4da0:	9f 93       	push	r25
    4da2:	af 93       	push	r26
    4da4:	bf 93       	push	r27
    4da6:	ef 93       	push	r30
    4da8:	ff 93       	push	r31
	SerialByte = USARTE0.DATA;
    4daa:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
    4dae:	80 93 b1 22 	sts	0x22B1, r24	; 0x8022b1 <SerialByte>

	if (SerialByte&0x80)
    4db2:	88 23       	and	r24, r24
    4db4:	94 f4       	brge	.+36     	; 0x4dda <__vector_58+0x5a>
	{

		SerialCnt = 0;
    4db6:	10 92 c4 23 	sts	0x23C4, r1	; 0x8023c4 <SerialCnt>
		switch (SerialByte)
    4dba:	83 39       	cpi	r24, 0x93	; 147
    4dbc:	19 f0       	breq	.+6      	; 0x4dc4 <__vector_58+0x44>
    4dbe:	84 39       	cpi	r24, 0x94	; 148
    4dc0:	29 f0       	breq	.+10     	; 0x4dcc <__vector_58+0x4c>
    4dc2:	08 c0       	rjmp	.+16     	; 0x4dd4 <__vector_58+0x54>
		{
			case SERIAL_MODULESETUPDATA:
			{

				SerialLength = 31;
    4dc4:	9f e1       	ldi	r25, 0x1F	; 31
    4dc6:	90 93 6e 22 	sts	0x226E, r25	; 0x80226e <SerialLength>
				
			}
			break;
    4dca:	07 c0       	rjmp	.+14     	; 0x4dda <__vector_58+0x5a>
			case SERIAL_MASTERSETUPDATA:
			{

				SerialLength = 7;
    4dcc:	97 e0       	ldi	r25, 0x07	; 7
    4dce:	90 93 6e 22 	sts	0x226E, r25	; 0x80226e <SerialLength>
			}
			break;
    4dd2:	03 c0       	rjmp	.+6      	; 0x4dda <__vector_58+0x5a>
			default:
			{

				SerialLength = 3;
    4dd4:	93 e0       	ldi	r25, 0x03	; 3
    4dd6:	90 93 6e 22 	sts	0x226E, r25	; 0x80226e <SerialLength>
			}
			break;
		}	
	}
		
	DummySerialBuffer[SerialCnt++] = SerialByte;
    4dda:	e0 91 c4 23 	lds	r30, 0x23C4	; 0x8023c4 <SerialCnt>
    4dde:	91 e0       	ldi	r25, 0x01	; 1
    4de0:	9e 0f       	add	r25, r30
    4de2:	90 93 c4 23 	sts	0x23C4, r25	; 0x8023c4 <SerialCnt>
    4de6:	f0 e0       	ldi	r31, 0x00	; 0
    4de8:	ec 53       	subi	r30, 0x3C	; 60
    4dea:	fd 4d       	sbci	r31, 0xDD	; 221
    4dec:	80 83       	st	Z, r24
	if (SerialCnt >= SerialLength)
    4dee:	20 91 6e 22 	lds	r18, 0x226E	; 0x80226e <SerialLength>
    4df2:	92 17       	cp	r25, r18
    4df4:	90 f0       	brcs	.+36     	; 0x4e1a <__vector_58+0x9a>
	{
		unsigned char cnt;
		for (cnt=0; cnt<SerialLength; cnt++)
    4df6:	22 23       	and	r18, r18
    4df8:	81 f0       	breq	.+32     	; 0x4e1a <__vector_58+0x9a>
    4dfa:	80 91 15 3a 	lds	r24, 0x3A15	; 0x803a15 <SerialBufferInPtrTop>
    4dfe:	a4 ec       	ldi	r26, 0xC4	; 196
    4e00:	b2 e2       	ldi	r27, 0x22	; 34
    4e02:	28 0f       	add	r18, r24
		{
							//PORTB_OUTSET = 1;  // TEST LED
							//Delay(1000);
							//PORTB_OUTCLR = 1;
							//Delay(1000);
			SerialBufferIn[SerialBufferInPtrTop++] = DummySerialBuffer[cnt];
    4e04:	9d 91       	ld	r25, X+
    4e06:	e8 2f       	mov	r30, r24
    4e08:	f0 e0       	ldi	r31, 0x00	; 0
    4e0a:	ea 5d       	subi	r30, 0xDA	; 218
    4e0c:	fe 4d       	sbci	r31, 0xDE	; 222
    4e0e:	90 83       	st	Z, r25
    4e10:	8f 5f       	subi	r24, 0xFF	; 255
		
	DummySerialBuffer[SerialCnt++] = SerialByte;
	if (SerialCnt >= SerialLength)
	{
		unsigned char cnt;
		for (cnt=0; cnt<SerialLength; cnt++)
    4e12:	82 13       	cpse	r24, r18
    4e14:	f7 cf       	rjmp	.-18     	; 0x4e04 <__vector_58+0x84>
    4e16:	20 93 15 3a 	sts	0x3A15, r18	; 0x803a15 <SerialBufferInPtrTop>
							//PORTB_OUTCLR = 1;
							//Delay(1000);
			SerialBufferIn[SerialBufferInPtrTop++] = DummySerialBuffer[cnt];
		}
	}
}
    4e1a:	ff 91       	pop	r31
    4e1c:	ef 91       	pop	r30
    4e1e:	bf 91       	pop	r27
    4e20:	af 91       	pop	r26
    4e22:	9f 91       	pop	r25
    4e24:	8f 91       	pop	r24
    4e26:	2f 91       	pop	r18
    4e28:	0f 90       	pop	r0
    4e2a:	0b be       	out	0x3b, r0	; 59
    4e2c:	0f 90       	pop	r0
    4e2e:	09 be       	out	0x39, r0	; 57
    4e30:	0f 90       	pop	r0
    4e32:	08 be       	out	0x38, r0	; 56
    4e34:	0f 90       	pop	r0
    4e36:	0f be       	out	0x3f, r0	; 63
    4e38:	0f 90       	pop	r0
    4e3a:	1f 90       	pop	r1
    4e3c:	18 95       	reti

00004e3e <__vector_60>:

ISR(USARTE0_TXC_vect)
{
    4e3e:	1f 92       	push	r1
    4e40:	0f 92       	push	r0
    4e42:	0f b6       	in	r0, 0x3f	; 63
    4e44:	0f 92       	push	r0
    4e46:	11 24       	eor	r1, r1
    4e48:	08 b6       	in	r0, 0x38	; 56
    4e4a:	0f 92       	push	r0
    4e4c:	18 be       	out	0x38, r1	; 56
    4e4e:	0b b6       	in	r0, 0x3b	; 59
    4e50:	0f 92       	push	r0
    4e52:	1b be       	out	0x3b, r1	; 59
    4e54:	8f 93       	push	r24
    4e56:	9f 93       	push	r25
    4e58:	ef 93       	push	r30
    4e5a:	ff 93       	push	r31
	//USARTE0_DATA = (!(SerialBufferOut[SerialBufferOutPtrBottom]&0x80));
	//USARTE0_DATA = SerialBufferOutPtrTop;
	//while ( !( USARTE0.STATUS & USART_DREIF_bm) );
	//USARTE0_DATA = SerialBufferOutPtrBottom;
	//while ( !( USARTE0.STATUS & USART_DREIF_bm) );
	if ((SerialBufferOutPtrBottom != SerialBufferOutPtrTop) &&  (!(SerialBufferOut[SerialBufferOutPtrBottom]&0x80)))
    4e5c:	80 91 93 2b 	lds	r24, 0x2B93	; 0x802b93 <SerialBufferOutPtrBottom>
    4e60:	90 91 82 22 	lds	r25, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4e64:	89 17       	cp	r24, r25
    4e66:	69 f0       	breq	.+26     	; 0x4e82 <__vector_60+0x44>
    4e68:	e8 2f       	mov	r30, r24
    4e6a:	f0 e0       	ldi	r31, 0x00	; 0
    4e6c:	eb 53       	subi	r30, 0x3B	; 59
    4e6e:	fc 4d       	sbci	r31, 0xDC	; 220
    4e70:	90 81       	ld	r25, Z
    4e72:	99 23       	and	r25, r25
    4e74:	34 f0       	brlt	.+12     	; 0x4e82 <__vector_60+0x44>
	//if (SerialBufferOutPtrBottom != SerialBufferOutPtrTop)
	//if (!(SerialBufferOut[SerialBufferOutPtrBottom]&0x80))
	{
		USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    4e76:	8f 5f       	subi	r24, 0xFF	; 255
    4e78:	80 93 93 2b 	sts	0x2B93, r24	; 0x802b93 <SerialBufferOutPtrBottom>
    4e7c:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
    4e80:	03 c0       	rjmp	.+6      	; 0x4e88 <__vector_60+0x4a>
	}
	else
	{
		SendSerialReady = 1;
    4e82:	81 e0       	ldi	r24, 0x01	; 1
    4e84:	80 93 6a 22 	sts	0x226A, r24	; 0x80226a <SendSerialReady>
	}
}
    4e88:	ff 91       	pop	r31
    4e8a:	ef 91       	pop	r30
    4e8c:	9f 91       	pop	r25
    4e8e:	8f 91       	pop	r24
    4e90:	0f 90       	pop	r0
    4e92:	0b be       	out	0x3b, r0	; 59
    4e94:	0f 90       	pop	r0
    4e96:	08 be       	out	0x38, r0	; 56
    4e98:	0f 90       	pop	r0
    4e9a:	0f be       	out	0x3f, r0	; 63
    4e9c:	0f 90       	pop	r0
    4e9e:	1f 90       	pop	r1
    4ea0:	18 95       	reti

00004ea2 <TWIM_ErrorHandler>:
	Message.Status = TWI_MASTER_READ;

	// Start the transmission by writing the address
	Message.Device->MASTER.ADDR = TWI_READ(Message.DeviceAddress);
	
	for (wacht=0; wacht<20000; wacht++);
    4ea2:	e8 ee       	ldi	r30, 0xE8	; 232
    4ea4:	f0 e2       	ldi	r31, 0x20	; 32
    4ea6:	8f ef       	ldi	r24, 0xFF	; 255
    4ea8:	84 87       	std	Z+12, r24	; 0x0c
    4eaa:	01 90       	ld	r0, Z+
    4eac:	f0 81       	ld	r31, Z
    4eae:	e0 2d       	mov	r30, r0
    4eb0:	83 e0       	ldi	r24, 0x03	; 3
    4eb2:	83 83       	std	Z+3, r24	; 0x03
    4eb4:	08 95       	ret

00004eb6 <TWIM_InitInterrupt>:
    4eb6:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <__TEXT_REGION_LENGTH__+0x7de4a0>
    4eba:	88 e2       	ldi	r24, 0x28	; 40
    4ebc:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7de4a5>
    4ec0:	88 e7       	ldi	r24, 0x78	; 120
    4ec2:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7de4a1>
    4ec6:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <__TEXT_REGION_LENGTH__+0x7de4a2>
    4eca:	e4 ea       	ldi	r30, 0xA4	; 164
    4ecc:	f4 e0       	ldi	r31, 0x04	; 4
    4ece:	80 81       	ld	r24, Z
    4ed0:	81 60       	ori	r24, 0x01	; 1
    4ed2:	80 83       	st	Z, r24
    4ed4:	08 95       	ret

00004ed6 <TWIM_Transmit>:
    4ed6:	e8 ee       	ldi	r30, 0xE8	; 232
    4ed8:	f0 e2       	ldi	r31, 0x20	; 32
    4eda:	12 86       	std	Z+10, r1	; 0x0a
    4edc:	13 86       	std	Z+11, r1	; 0x0b
    4ede:	16 82       	std	Z+6, r1	; 0x06
    4ee0:	15 82       	std	Z+5, r1	; 0x05
    4ee2:	40 87       	std	Z+8, r20	; 0x08
    4ee4:	51 87       	std	Z+9, r21	; 0x09
    4ee6:	24 83       	std	Z+4, r18	; 0x04
    4ee8:	a0 ea       	ldi	r26, 0xA0	; 160
    4eea:	b4 e0       	ldi	r27, 0x04	; 4
    4eec:	a0 83       	st	Z, r26
    4eee:	b1 83       	std	Z+1, r27	; 0x01
    4ef0:	82 83       	std	Z+2, r24	; 0x02
    4ef2:	63 83       	std	Z+3, r22	; 0x03
    4ef4:	14 86       	std	Z+12, r1	; 0x0c
    4ef6:	88 0f       	add	r24, r24
    4ef8:	16 96       	adiw	r26, 0x06	; 6
    4efa:	8c 93       	st	X, r24
    4efc:	10 92 a1 3a 	sts	0x3AA1, r1	; 0x803aa1 <wacht>
    4f00:	10 92 a2 3a 	sts	0x3AA2, r1	; 0x803aa2 <wacht+0x1>
    4f04:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <wacht>
    4f08:	90 91 a2 3a 	lds	r25, 0x3AA2	; 0x803aa2 <wacht+0x1>
    4f0c:	88 39       	cpi	r24, 0x98	; 152
    4f0e:	9a 43       	sbci	r25, 0x3A	; 58
    4f10:	80 f4       	brcc	.+32     	; 0x4f32 <TWIM_Transmit+0x5c>
    4f12:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <wacht>
    4f16:	90 91 a2 3a 	lds	r25, 0x3AA2	; 0x803aa2 <wacht+0x1>
    4f1a:	01 96       	adiw	r24, 0x01	; 1
    4f1c:	80 93 a1 3a 	sts	0x3AA1, r24	; 0x803aa1 <wacht>
    4f20:	90 93 a2 3a 	sts	0x3AA2, r25	; 0x803aa2 <wacht+0x1>
    4f24:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <wacht>
    4f28:	90 91 a2 3a 	lds	r25, 0x3AA2	; 0x803aa2 <wacht+0x1>
    4f2c:	88 39       	cpi	r24, 0x98	; 152
    4f2e:	9a 43       	sbci	r25, 0x3A	; 58
    4f30:	80 f3       	brcs	.-32     	; 0x4f12 <TWIM_Transmit+0x3c>
    4f32:	08 95       	ret

00004f34 <TWIM_Receive>:
}

//void TWIM_Receive(uint8_t DeviceAddress, uint8_t Register, uint8_t Bytes, uint8_t* Data)
void TWIM_Receive(uint8_t DeviceAddress, uint8_t Register, unsigned char* Data, uint8_t Bytes)
{
	Message.BufferWrite = 0x00;
    4f34:	e8 ee       	ldi	r30, 0xE8	; 232
    4f36:	f0 e2       	ldi	r31, 0x20	; 32
    4f38:	10 86       	std	Z+8, r1	; 0x08
    4f3a:	11 86       	std	Z+9, r1	; 0x09
	Message.BytesWrite = 0x00;
    4f3c:	14 82       	std	Z+4, r1	; 0x04

	Message.IndexRead = 0x00;
    4f3e:	17 82       	std	Z+7, r1	; 0x07
	Message.BufferRead = Data;
    4f40:	42 87       	std	Z+10, r20	; 0x0a
    4f42:	53 87       	std	Z+11, r21	; 0x0b
	Message.BytesRead = Bytes;
    4f44:	26 83       	std	Z+6, r18	; 0x06
	Message.Device = &TWIE;
    4f46:	a0 ea       	ldi	r26, 0xA0	; 160
    4f48:	b4 e0       	ldi	r27, 0x04	; 4
    4f4a:	a0 83       	st	Z, r26
    4f4c:	b1 83       	std	Z+1, r27	; 0x01
	Message.DeviceAddress = DeviceAddress;
    4f4e:	82 83       	std	Z+2, r24	; 0x02
	Message.Register = Register;
    4f50:	63 83       	std	Z+3, r22	; 0x03
	Message.Status = TWI_MASTER_REGISTER;
    4f52:	14 86       	std	Z+12, r1	; 0x0c

	// Start the transmission by writing the address
	Message.Device->MASTER.ADDR = TWI_WRITE(Message.DeviceAddress);
    4f54:	88 0f       	add	r24, r24
    4f56:	16 96       	adiw	r26, 0x06	; 6
    4f58:	8c 93       	st	X, r24
	
	for (wacht=0; wacht<20000; wacht++);
    4f5a:	10 92 a1 3a 	sts	0x3AA1, r1	; 0x803aa1 <wacht>
    4f5e:	10 92 a2 3a 	sts	0x3AA2, r1	; 0x803aa2 <wacht+0x1>
    4f62:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <wacht>
    4f66:	90 91 a2 3a 	lds	r25, 0x3AA2	; 0x803aa2 <wacht+0x1>
    4f6a:	80 32       	cpi	r24, 0x20	; 32
    4f6c:	9e 44       	sbci	r25, 0x4E	; 78
    4f6e:	80 f4       	brcc	.+32     	; 0x4f90 <TWIM_Receive+0x5c>
    4f70:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <wacht>
    4f74:	90 91 a2 3a 	lds	r25, 0x3AA2	; 0x803aa2 <wacht+0x1>
    4f78:	01 96       	adiw	r24, 0x01	; 1
    4f7a:	80 93 a1 3a 	sts	0x3AA1, r24	; 0x803aa1 <wacht>
    4f7e:	90 93 a2 3a 	sts	0x3AA2, r25	; 0x803aa2 <wacht+0x1>
    4f82:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <wacht>
    4f86:	90 91 a2 3a 	lds	r25, 0x3AA2	; 0x803aa2 <wacht+0x1>
    4f8a:	80 32       	cpi	r24, 0x20	; 32
    4f8c:	9e 44       	sbci	r25, 0x4E	; 78
    4f8e:	80 f3       	brcs	.-32     	; 0x4f70 <TWIM_Receive+0x3c>
    4f90:	08 95       	ret

00004f92 <TWIM_Status>:
}

TWI_MasterStatus_t TWIM_Status(void)
{
	return Message.Status;
}
    4f92:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <__data_end+0xc>
    4f96:	08 95       	ret

00004f98 <__vector_46>:

ISR(TWIE_TWIM_vect)
{
    4f98:	1f 92       	push	r1
    4f9a:	0f 92       	push	r0
    4f9c:	0f b6       	in	r0, 0x3f	; 63
    4f9e:	0f 92       	push	r0
    4fa0:	11 24       	eor	r1, r1
    4fa2:	08 b6       	in	r0, 0x38	; 56
    4fa4:	0f 92       	push	r0
    4fa6:	18 be       	out	0x38, r1	; 56
    4fa8:	09 b6       	in	r0, 0x39	; 57
    4faa:	0f 92       	push	r0
    4fac:	19 be       	out	0x39, r1	; 57
    4fae:	0a b6       	in	r0, 0x3a	; 58
    4fb0:	0f 92       	push	r0
    4fb2:	1a be       	out	0x3a, r1	; 58
    4fb4:	0b b6       	in	r0, 0x3b	; 59
    4fb6:	0f 92       	push	r0
    4fb8:	1b be       	out	0x3b, r1	; 59
    4fba:	2f 93       	push	r18
    4fbc:	3f 93       	push	r19
    4fbe:	4f 93       	push	r20
    4fc0:	5f 93       	push	r21
    4fc2:	6f 93       	push	r22
    4fc4:	7f 93       	push	r23
    4fc6:	8f 93       	push	r24
    4fc8:	9f 93       	push	r25
    4fca:	af 93       	push	r26
    4fcc:	bf 93       	push	r27
    4fce:	cf 93       	push	r28
    4fd0:	df 93       	push	r29
    4fd2:	ef 93       	push	r30
    4fd4:	ff 93       	push	r31
	uint8_t Status = Message.Device->MASTER.STATUS;
    4fd6:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <__data_end>
    4fda:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <__data_end+0x1>
    4fde:	84 81       	ldd	r24, Z+4	; 0x04

	/*
		Arbitration lost
	*/
	if(Status & TWI_MASTER_ARBLOST_bm)
    4fe0:	83 ff       	sbrs	r24, 3
    4fe2:	03 c0       	rjmp	.+6      	; 0x4fea <__vector_46+0x52>
	Message.Device->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
}

static void TWIM_ArbitrationLostHandler(void)
{
	TWIM_ErrorHandler();
    4fe4:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <TWIM_ErrorHandler>
    4fe8:	74 c0       	rjmp	.+232    	; 0x50d2 <__vector_46+0x13a>
		TWIM_ArbitrationLostHandler();
	}
	/*
		Write interrupt
	*/
	else if(Status & TWI_MASTER_WIF_bm)
    4fea:	86 ff       	sbrs	r24, 6
    4fec:	48 c0       	rjmp	.+144    	; 0x507e <__vector_46+0xe6>
}

static void TWIM_WriteHandler(void)
{
	// Abort transmission if slave has send an NACK
	if(Message.Device->MASTER.STATUS & TWI_MASTER_RXACK_bm)
    4fee:	84 81       	ldd	r24, Z+4	; 0x04
    4ff0:	84 ff       	sbrs	r24, 4
    4ff2:	03 c0       	rjmp	.+6      	; 0x4ffa <__vector_46+0x62>
	{
		// Slave send NACK instead of ACK - abort transmission
		TWIM_ErrorHandler();
    4ff4:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <TWIM_ErrorHandler>
    4ff8:	6c c0       	rjmp	.+216    	; 0x50d2 <__vector_46+0x13a>
	}
	else
	{
		if(Message.Status == TWI_MASTER_REGISTER)
    4ffa:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <__data_end+0xc>
    4ffe:	81 11       	cpse	r24, r1
    5000:	12 c0       	rjmp	.+36     	; 0x5026 <__vector_46+0x8e>
		{
			Message.Device->MASTER.DATA = Message.Register;
    5002:	a8 ee       	ldi	r26, 0xE8	; 232
    5004:	b0 e2       	ldi	r27, 0x20	; 32
    5006:	13 96       	adiw	r26, 0x03	; 3
    5008:	8c 91       	ld	r24, X
    500a:	13 97       	sbiw	r26, 0x03	; 3
    500c:	87 83       	std	Z+7, r24	; 0x07

			if(Message.BytesRead > 0x00)
    500e:	16 96       	adiw	r26, 0x06	; 6
    5010:	8c 91       	ld	r24, X
    5012:	88 23       	and	r24, r24
    5014:	21 f0       	breq	.+8      	; 0x501e <__vector_46+0x86>
			{
				Message.Status = TWI_MASTER_ADDRESS;
    5016:	81 e0       	ldi	r24, 0x01	; 1
    5018:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <__data_end+0xc>
    501c:	5a c0       	rjmp	.+180    	; 0x50d2 <__vector_46+0x13a>
			}
			else
			{
				Message.Status = TWI_MASTER_WRITE;
    501e:	82 e0       	ldi	r24, 0x02	; 2
    5020:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <__data_end+0xc>
    5024:	56 c0       	rjmp	.+172    	; 0x50d2 <__vector_46+0x13a>
			}
		}
		else if(Message.Status == TWI_MASTER_ADDRESS)
    5026:	81 30       	cpi	r24, 0x01	; 1
    5028:	61 f4       	brne	.+24     	; 0x5042 <__vector_46+0xaa>
		{
			Message.Device->MASTER.ADDR = TWI_READ(Message.DeviceAddress);
    502a:	a8 ee       	ldi	r26, 0xE8	; 232
    502c:	b0 e2       	ldi	r27, 0x20	; 32
    502e:	12 96       	adiw	r26, 0x02	; 2
    5030:	8c 91       	ld	r24, X
    5032:	12 97       	sbiw	r26, 0x02	; 2
    5034:	88 0f       	add	r24, r24
    5036:	81 60       	ori	r24, 0x01	; 1
    5038:	86 83       	std	Z+6, r24	; 0x06
			Message.Status = TWI_MASTER_READ;
    503a:	83 e0       	ldi	r24, 0x03	; 3
    503c:	1c 96       	adiw	r26, 0x0c	; 12
    503e:	8c 93       	st	X, r24
    5040:	48 c0       	rjmp	.+144    	; 0x50d2 <__vector_46+0x13a>
		}
		else if(Message.Status == TWI_MASTER_WRITE)
    5042:	82 30       	cpi	r24, 0x02	; 2
    5044:	09 f0       	breq	.+2      	; 0x5048 <__vector_46+0xb0>
    5046:	45 c0       	rjmp	.+138    	; 0x50d2 <__vector_46+0x13a>
		{
			if ( Message.IndexWrite  < Message.BytesWrite  )
    5048:	a8 ee       	ldi	r26, 0xE8	; 232
    504a:	b0 e2       	ldi	r27, 0x20	; 32
    504c:	15 96       	adiw	r26, 0x05	; 5
    504e:	8c 91       	ld	r24, X
    5050:	15 97       	sbiw	r26, 0x05	; 5
    5052:	14 96       	adiw	r26, 0x04	; 4
    5054:	9c 91       	ld	r25, X
    5056:	14 97       	sbiw	r26, 0x04	; 4
    5058:	89 17       	cp	r24, r25
    505a:	58 f4       	brcc	.+22     	; 0x5072 <__vector_46+0xda>
			{
				Message.Device->MASTER.DATA = Message.BufferWrite[ Message.IndexWrite++];
    505c:	ed 01       	movw	r28, r26
    505e:	a8 85       	ldd	r26, Y+8	; 0x08
    5060:	b9 85       	ldd	r27, Y+9	; 0x09
    5062:	91 e0       	ldi	r25, 0x01	; 1
    5064:	98 0f       	add	r25, r24
    5066:	9d 83       	std	Y+5, r25	; 0x05
    5068:	a8 0f       	add	r26, r24
    506a:	b1 1d       	adc	r27, r1
    506c:	8c 91       	ld	r24, X
    506e:	87 83       	std	Z+7, r24	; 0x07
    5070:	30 c0       	rjmp	.+96     	; 0x50d2 <__vector_46+0x13a>
				
			}
			else
			{
				Message.Device->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    5072:	83 e0       	ldi	r24, 0x03	; 3
    5074:	83 83       	std	Z+3, r24	; 0x03
				Message.Status = TWI_MASTER_SEND;
    5076:	84 e0       	ldi	r24, 0x04	; 4
    5078:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <__data_end+0xc>
    507c:	2a c0       	rjmp	.+84     	; 0x50d2 <__vector_46+0x13a>
		TWIM_WriteHandler();
	}
	/*
		Read interrupt
	*/
	else if(Status & TWI_MASTER_RIF_bm)
    507e:	88 23       	and	r24, r24
    5080:	34 f5       	brge	.+76     	; 0x50ce <__vector_46+0x136>
	}
}

static void TWIM_ReadHandler(void)
{
	if(Message.Status == TWI_MASTER_READ)
    5082:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <__data_end+0xc>
    5086:	83 30       	cpi	r24, 0x03	; 3
    5088:	f9 f4       	brne	.+62     	; 0x50c8 <__vector_46+0x130>
	{
		// Check for buffer overflow
		if(Message.IndexRead < TWI_BUFFER_SIZE)
		{
			Message.BufferRead[Message.IndexRead++] = Message.Device->MASTER.DATA;
    508a:	a8 ee       	ldi	r26, 0xE8	; 232
    508c:	b0 e2       	ldi	r27, 0x20	; 32
    508e:	1a 96       	adiw	r26, 0x0a	; 10
    5090:	cd 91       	ld	r28, X+
    5092:	dc 91       	ld	r29, X
    5094:	1b 97       	sbiw	r26, 0x0b	; 11
    5096:	17 96       	adiw	r26, 0x07	; 7
    5098:	9c 91       	ld	r25, X
    509a:	17 97       	sbiw	r26, 0x07	; 7
    509c:	81 e0       	ldi	r24, 0x01	; 1
    509e:	89 0f       	add	r24, r25
    50a0:	17 96       	adiw	r26, 0x07	; 7
    50a2:	8c 93       	st	X, r24
    50a4:	17 97       	sbiw	r26, 0x07	; 7
    50a6:	27 81       	ldd	r18, Z+7	; 0x07
    50a8:	c9 0f       	add	r28, r25
    50aa:	d1 1d       	adc	r29, r1
    50ac:	28 83       	st	Y, r18
		{
			Message.Device->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
			Message.Status = TWI_MASTER_BUFFEROVERFLOW;
		}
		
		if(Message.IndexRead < Message.BytesRead)
    50ae:	16 96       	adiw	r26, 0x06	; 6
    50b0:	9c 91       	ld	r25, X
    50b2:	89 17       	cp	r24, r25
    50b4:	18 f4       	brcc	.+6      	; 0x50bc <__vector_46+0x124>
		{
			Message.Device->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    50b6:	82 e0       	ldi	r24, 0x02	; 2
    50b8:	83 83       	std	Z+3, r24	; 0x03
    50ba:	0b c0       	rjmp	.+22     	; 0x50d2 <__vector_46+0x13a>
		}
		else
		{
			Message.Device->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    50bc:	87 e0       	ldi	r24, 0x07	; 7
    50be:	83 83       	std	Z+3, r24	; 0x03
			Message.Status = TWI_MASTER_RECEIVED;
    50c0:	85 e0       	ldi	r24, 0x05	; 5
    50c2:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <__data_end+0xc>
    50c6:	05 c0       	rjmp	.+10     	; 0x50d2 <__vector_46+0x13a>
		}
	}
	else
	{
		TWIM_ErrorHandler();		
    50c8:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <TWIM_ErrorHandler>
    50cc:	02 c0       	rjmp	.+4      	; 0x50d2 <__vector_46+0x13a>
	/*
		Error
	*/
	else
	{
		TWIM_ErrorHandler();
    50ce:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <TWIM_ErrorHandler>
	}
    50d2:	ff 91       	pop	r31
    50d4:	ef 91       	pop	r30
    50d6:	df 91       	pop	r29
    50d8:	cf 91       	pop	r28
    50da:	bf 91       	pop	r27
    50dc:	af 91       	pop	r26
    50de:	9f 91       	pop	r25
    50e0:	8f 91       	pop	r24
    50e2:	7f 91       	pop	r23
    50e4:	6f 91       	pop	r22
    50e6:	5f 91       	pop	r21
    50e8:	4f 91       	pop	r20
    50ea:	3f 91       	pop	r19
    50ec:	2f 91       	pop	r18
    50ee:	0f 90       	pop	r0
    50f0:	0b be       	out	0x3b, r0	; 59
    50f2:	0f 90       	pop	r0
    50f4:	0a be       	out	0x3a, r0	; 58
    50f6:	0f 90       	pop	r0
    50f8:	09 be       	out	0x39, r0	; 57
    50fa:	0f 90       	pop	r0
    50fc:	08 be       	out	0x38, r0	; 56
    50fe:	0f 90       	pop	r0
    5100:	0f be       	out	0x3f, r0	; 63
    5102:	0f 90       	pop	r0
    5104:	1f 90       	pop	r1
    5106:	18 95       	reti

00005108 <__divmodhi4>:
    5108:	97 fb       	bst	r25, 7
    510a:	07 2e       	mov	r0, r23
    510c:	16 f4       	brtc	.+4      	; 0x5112 <__divmodhi4+0xa>
    510e:	00 94       	com	r0
    5110:	07 d0       	rcall	.+14     	; 0x5120 <__divmodhi4_neg1>
    5112:	77 fd       	sbrc	r23, 7
    5114:	09 d0       	rcall	.+18     	; 0x5128 <__divmodhi4_neg2>
    5116:	0e 94 a1 28 	call	0x5142	; 0x5142 <__udivmodhi4>
    511a:	07 fc       	sbrc	r0, 7
    511c:	05 d0       	rcall	.+10     	; 0x5128 <__divmodhi4_neg2>
    511e:	3e f4       	brtc	.+14     	; 0x512e <__divmodhi4_exit>

00005120 <__divmodhi4_neg1>:
    5120:	90 95       	com	r25
    5122:	81 95       	neg	r24
    5124:	9f 4f       	sbci	r25, 0xFF	; 255
    5126:	08 95       	ret

00005128 <__divmodhi4_neg2>:
    5128:	70 95       	com	r23
    512a:	61 95       	neg	r22
    512c:	7f 4f       	sbci	r23, 0xFF	; 255

0000512e <__divmodhi4_exit>:
    512e:	08 95       	ret

00005130 <__tablejump2__>:
    5130:	ee 0f       	add	r30, r30
    5132:	ff 1f       	adc	r31, r31
    5134:	88 1f       	adc	r24, r24
    5136:	8b bf       	out	0x3b, r24	; 59
    5138:	07 90       	elpm	r0, Z+
    513a:	f6 91       	elpm	r31, Z
    513c:	e0 2d       	mov	r30, r0
    513e:	1b be       	out	0x3b, r1	; 59
    5140:	19 94       	eijmp

00005142 <__udivmodhi4>:
    5142:	aa 1b       	sub	r26, r26
    5144:	bb 1b       	sub	r27, r27
    5146:	51 e1       	ldi	r21, 0x11	; 17
    5148:	07 c0       	rjmp	.+14     	; 0x5158 <__udivmodhi4_ep>

0000514a <__udivmodhi4_loop>:
    514a:	aa 1f       	adc	r26, r26
    514c:	bb 1f       	adc	r27, r27
    514e:	a6 17       	cp	r26, r22
    5150:	b7 07       	cpc	r27, r23
    5152:	10 f0       	brcs	.+4      	; 0x5158 <__udivmodhi4_ep>
    5154:	a6 1b       	sub	r26, r22
    5156:	b7 0b       	sbc	r27, r23

00005158 <__udivmodhi4_ep>:
    5158:	88 1f       	adc	r24, r24
    515a:	99 1f       	adc	r25, r25
    515c:	5a 95       	dec	r21
    515e:	a9 f7       	brne	.-22     	; 0x514a <__udivmodhi4_loop>
    5160:	80 95       	com	r24
    5162:	90 95       	com	r25
    5164:	bc 01       	movw	r22, r24
    5166:	cd 01       	movw	r24, r26
    5168:	08 95       	ret

0000516a <_exit>:
    516a:	f8 94       	cli

0000516c <__stop_program>:
    516c:	ff cf       	rjmp	.-2      	; 0x516c <__stop_program>
